{
  "api/Bunit.Asserting.ActualExpectedAssertException.html": {
    "href": "api/Bunit.Asserting.ActualExpectedAssertException.html",
    "title": "Class ActualExpectedAssertException | bUnit",
    "keywords": "Class ActualExpectedAssertException Represents a generic assert exception used when an actual result does not match an expected result. Inheritance System.Object System.Exception ActualExpectedAssertException DiffChangeAssertException HtmlEqualException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Bunit.Asserting Assembly : Bunit.Core.dll Syntax public class ActualExpectedAssertException : Exception, ISerializable Constructors | Improve this Doc View Source ActualExpectedAssertException(String, String, String, String, String) Creates an instance of the ActualExpectedAssertException . Declaration public ActualExpectedAssertException(string actual, string expected, string actualText, string expectedText, string message) Parameters Type Name Description System.String actual The actual result System.String expected The expected result System.String actualText A text explaining the actual result System.String expectedText A text explaining the expected result System.String message An error message explaining the context of the assertion Implements System.Runtime.Serialization.ISerializable Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.Asserting.html": {
    "href": "api/Bunit.Asserting.html",
    "title": "Namespace Bunit.Asserting | bUnit",
    "keywords": "Namespace Bunit.Asserting Classes ActualExpectedAssertException Represents a generic assert exception used when an actual result does not match an expected result."
  },
  "api/Bunit.BlazorExtensions.html": {
    "href": "api/Bunit.BlazorExtensions.html",
    "title": "Class BlazorExtensions | bUnit",
    "keywords": "Class BlazorExtensions Extensions for Blazor types. Inheritance System.Object BlazorExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Core.dll Syntax public static class BlazorExtensions Methods | Improve this Doc View Source ToMarkupRenderFragment(String) Creates a Microsoft.AspNetCore.Components.RenderFragment that will render the markup . Declaration public static RenderFragment ToMarkupRenderFragment(this string markup) Parameters Type Name Description System.String markup Markup to render Returns Type Description Microsoft.AspNetCore.Components.RenderFragment The Microsoft.AspNetCore.Components.RenderFragment ."
  },
  "api/Bunit.ClipboardEventDispatchExtensions.html": {
    "href": "api/Bunit.ClipboardEventDispatchExtensions.html",
    "title": "Class ClipboardEventDispatchExtensions | bUnit",
    "keywords": "Class ClipboardEventDispatchExtensions Clipboard event dispatch helper extension methods. Inheritance System.Object ClipboardEventDispatchExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Web.dll Syntax public static class ClipboardEventDispatchExtensions Methods | Improve this Doc View Source BeforeCopy(IElement) Raises the @onbeforecopy event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void BeforeCopy(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source BeforeCopyAsync(IElement) Raises the @onbeforecopy event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task BeforeCopyAsync(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source BeforeCut(IElement) Raises the @onbeforecut event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void BeforeCut(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source BeforeCutAsync(IElement) Raises the @onbeforecut event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task BeforeCutAsync(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source BeforePaste(IElement) Raises the @onbeforepaste event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void BeforePaste(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source BeforePasteAsync(IElement) Raises the @onbeforepaste event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task BeforePasteAsync(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Copy(IElement, ClipboardEventArgs) Raises the @oncopy event on element , passing the provided eventArgs to the event handler. Declaration public static void Copy(this IElement element, ClipboardEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.ClipboardEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source Copy(IElement, String) Raises the @oncopy event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.ClipboardEventArgs object. Declaration public static void Copy(this IElement element, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.String type The type of the event. | Improve this Doc View Source CopyAsync(IElement, ClipboardEventArgs) Raises the @oncopy event on element , passing the provided eventArgs to the event handler. Declaration public static Task CopyAsync(this IElement element, ClipboardEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element Microsoft.AspNetCore.Components.Web.ClipboardEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Cut(IElement, ClipboardEventArgs) Raises the @oncut event on element , passing the provided eventArgs to the event handler. Declaration public static void Cut(this IElement element, ClipboardEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.ClipboardEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source Cut(IElement, String) Raises the @oncut event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.ClipboardEventArgs object. Declaration public static void Cut(this IElement element, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.String type The type of the event. | Improve this Doc View Source CutAsync(IElement, ClipboardEventArgs) Raises the @oncut event on element , passing the provided eventArgs to the event handler. Declaration public static Task CutAsync(this IElement element, ClipboardEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element Microsoft.AspNetCore.Components.Web.ClipboardEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Paste(IElement, ClipboardEventArgs) Raises the @onpaste event on element , passing the provided eventArgs to the event handler. Declaration public static void Paste(this IElement element, ClipboardEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.ClipboardEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source Paste(IElement, String) Raises the @onpaste event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.ClipboardEventArgs object. Declaration public static void Paste(this IElement element, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.String type The type of the event. | Improve this Doc View Source PasteAsync(IElement, ClipboardEventArgs) Raises the @onpaste event on element , passing the provided eventArgs to the event handler. Declaration public static Task PasteAsync(this IElement element, ClipboardEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element Microsoft.AspNetCore.Components.Web.ClipboardEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done."
  },
  "api/Bunit.CollectionAssertExtensions.html": {
    "href": "api/Bunit.CollectionAssertExtensions.html",
    "title": "Class CollectionAssertExtensions | bUnit",
    "keywords": "Class CollectionAssertExtensions Collection test assertions Inheritance System.Object CollectionAssertExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Xunit.dll Syntax public static class CollectionAssertExtensions Methods | Improve this Doc View Source ShouldAllBe<T>(IEnumerable<T>, Action<T, Int32>[]) Verifies that a collection contains exactly a given number of elements, which meet the criteria provided by the element inspectors. Declaration public static void ShouldAllBe<T>(this IEnumerable<T> collection, params Action<T, int>[] elementInspectors) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> collection The collection to be inspected System.Action <T, System.Int32 >[] elementInspectors The element inspectors, which inspect each element and its index in the collection in turn. The total number of element inspectors must exactly match the number of elements in the collection. Type Parameters Name Description T | Improve this Doc View Source ShouldAllBe<T>(IEnumerable<T>, Action<T>[]) Verifies that a collection contains exactly a given number of elements, which meet the criteria provided by the element inspectors. Declaration public static void ShouldAllBe<T>(this IEnumerable<T> collection, params Action<T>[] elementInspectors) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> collection The collection to be inspected System.Action <T>[] elementInspectors The element inspectors, which inspect each element in turn. The total number of element inspectors must exactly match the number of elements in the collection. Type Parameters Name Description T"
  },
  "api/Bunit.CompareToExtensions.html": {
    "href": "api/Bunit.CompareToExtensions.html",
    "title": "Class CompareToExtensions | bUnit",
    "keywords": "Class CompareToExtensions Extension methods that allows different rendered fragments to be compared to others or strings. Inheritance System.Object CompareToExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Web.dll Syntax public static class CompareToExtensions Methods | Improve this Doc View Source CompareTo(INode, INodeList) Compares an actual AngleSharp.Dom.INode with an expected AngleSharp.Dom.INodeList . Declaration public static IReadOnlyList<IDiff> CompareTo(this INode actual, INodeList expected) Parameters Type Name Description AngleSharp.Dom.INode actual The node to check. AngleSharp.Dom.INodeList expected The node list to compare with Returns Type Description System.Collections.Generic.IReadOnlyList < AngleSharp.Diffing.Core.IDiff > Any differences found. | Improve this Doc View Source CompareTo(INodeList, INode) Compares an actual AngleSharp.Dom.INodeList with an expected AngleSharp.Dom.INode . Declaration public static IReadOnlyList<IDiff> CompareTo(this INodeList actual, INode expected) Parameters Type Name Description AngleSharp.Dom.INodeList actual The node list to check. AngleSharp.Dom.INode expected The node to compare with Returns Type Description System.Collections.Generic.IReadOnlyList < AngleSharp.Diffing.Core.IDiff > Any differences found. | Improve this Doc View Source CompareTo(INodeList, INodeList) Compares an actual AngleSharp.Dom.INodeList with an expected AngleSharp.Dom.INodeList . Declaration public static IReadOnlyList<IDiff> CompareTo(this INodeList actual, INodeList expected) Parameters Type Name Description AngleSharp.Dom.INodeList actual The node list to check. AngleSharp.Dom.INodeList expected The node list to compare with Returns Type Description System.Collections.Generic.IReadOnlyList < AngleSharp.Diffing.Core.IDiff > Any differences found. | Improve this Doc View Source CompareTo(IRenderedFragment, IRenderedFragment) Compare the rendered markup in the actual IRenderedFragmentBase to the rendered markup in the expected IRenderedFragmentBase Declaration public static IReadOnlyList<IDiff> CompareTo(this IRenderedFragment actual, IRenderedFragment expected) Parameters Type Name Description IRenderedFragment actual Source of rendered markup to check. IRenderedFragment expected Source of rendered markup to compare with. Returns Type Description System.Collections.Generic.IReadOnlyList < AngleSharp.Diffing.Core.IDiff > Any differences found. | Improve this Doc View Source CompareTo(IRenderedFragment, String) Compare the rendered markup in the actual IRenderedFragmentBase with that in the expected markup string. Declaration public static IReadOnlyList<IDiff> CompareTo(this IRenderedFragment actual, string expected) Parameters Type Name Description IRenderedFragment actual Source of rendered markup to check. System.String expected Markup to compare with. Returns Type Description System.Collections.Generic.IReadOnlyList < AngleSharp.Diffing.Core.IDiff > Any differences found."
  },
  "api/Bunit.ComponentParameterBuilder-1.html": {
    "href": "api/Bunit.ComponentParameterBuilder-1.html",
    "title": "Class ComponentParameterBuilder<TComponent> | bUnit",
    "keywords": "Class ComponentParameterBuilder<TComponent> A builder to set a value for strongly typed ComponentParameters. Inheritance System.Object ComponentParameterBuilder<TComponent> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Core.dll Syntax public sealed class ComponentParameterBuilder<TComponent> where TComponent : IComponent Type Parameters Name Description TComponent The type of component under test to add the parameters Methods | Improve this Doc View Source Add(Expression<Func<TComponent, EventCallback>>, Action) Add a strongly typed Microsoft.AspNetCore.Components.EventCallback parameter with a action for the component under test. Declaration public ComponentParameterBuilder<TComponent> Add(Expression<Func<TComponent, EventCallback>> parameterSelector, Action callback) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TComponent, Microsoft.AspNetCore.Components.EventCallback >> parameterSelector The parameter selector which defines the parameter to add System.Action callback The event callback. Returns Type Description ComponentParameterBuilder <TComponent> The ComponentParameter . | Improve this Doc View Source Add(Expression<Func<TComponent, EventCallback>>, Func<Task>) Add a strongly typed Microsoft.AspNetCore.Components.EventCallback parameter with a callback for the component under test. Declaration public ComponentParameterBuilder<TComponent> Add(Expression<Func<TComponent, EventCallback>> parameterSelector, Func<Task> callback) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TComponent, Microsoft.AspNetCore.Components.EventCallback >> parameterSelector The parameter selector which defines the parameter to add System.Func < System.Threading.Tasks.Task > callback The event callback that returns a System.Threading.Tasks.Task . Returns Type Description ComponentParameterBuilder <TComponent> A ComponentParameterBuilder<TComponent> which can be chained | Improve this Doc View Source Add(Expression<Func<TComponent, RenderFragment>>, String) Add a strongly typed Microsoft.AspNetCore.Components.RenderFragment parameter with a html markup value for the component under test. Declaration public ComponentParameterBuilder<TComponent> Add(Expression<Func<TComponent, RenderFragment>> parameterSelector, string markup) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TComponent, Microsoft.AspNetCore.Components.RenderFragment >> parameterSelector The parameter selector which defines the parameter to add System.String markup Markup to render as output Returns Type Description ComponentParameterBuilder <TComponent> A ComponentParameterBuilder<TComponent> which can be chained | Improve this Doc View Source Add(Object) Add an unnamed cascading value for the component under test. Declaration public ComponentParameterBuilder<TComponent> Add(object value) Parameters Type Name Description System.Object value The value to set for an unnamed cascading parameter Returns Type Description ComponentParameterBuilder <TComponent> A ComponentParameterBuilder<TComponent> which can be chained | Improve this Doc View Source Add<TValue>(Expression<Func<TComponent, TValue>>, TValue) Add a strongly typed parameter with a value for the component under test. Declaration public ComponentParameterBuilder<TComponent> Add<TValue>(Expression<Func<TComponent, TValue>> parameterSelector, TValue value) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TComponent, TValue>> parameterSelector The parameter selector which defines the parameter to add TValue value The value, which cannot be null in case of cascading parameter Returns Type Description ComponentParameterBuilder <TComponent> A ComponentParameterBuilder<TComponent> which can be chained Type Parameters Name Description TValue The generic value type | Improve this Doc View Source Add<TValue>(Expression<Func<TComponent, EventCallback<TValue>>>, Action<TValue>) Add a strongly typed Microsoft.AspNetCore.Components.EventCallback`1 parameter with a callback for the component under test. Declaration public ComponentParameterBuilder<TComponent> Add<TValue>(Expression<Func<TComponent, EventCallback<TValue>>> parameterSelector, Action<TValue> callback) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TComponent, Microsoft.AspNetCore.Components.EventCallback <TValue>>> parameterSelector The parameter selector which defines the parameter to add System.Action <TValue> callback A callback that takes a TValue . Returns Type Description ComponentParameterBuilder <TComponent> A ComponentParameterBuilder<TComponent> which can be chained Type Parameters Name Description TValue | Improve this Doc View Source Add<TValue>(Expression<Func<TComponent, EventCallback<TValue>>>, Func<TValue, Task>) Add a strongly typed Microsoft.AspNetCore.Components.EventCallback`1 parameter with a callback for the component under test. Declaration public ComponentParameterBuilder<TComponent> Add<TValue>(Expression<Func<TComponent, EventCallback<TValue>>> parameterSelector, Func<TValue, Task> callback) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TComponent, Microsoft.AspNetCore.Components.EventCallback <TValue>>> parameterSelector The parameter selector which defines the parameter to add System.Func <TValue, System.Threading.Tasks.Task > callback A callback that takes a TValue and returns a System.Threading.Tasks.Task . Returns Type Description ComponentParameterBuilder <TComponent> A ComponentParameterBuilder<TComponent> which can be chained Type Parameters Name Description TValue | Improve this Doc View Source Add<TValue>(Expression<Func<TComponent, RenderFragment<TValue>>>, RenderFragment<TValue>) Add a strongly typed Microsoft.AspNetCore.Components.RenderFragment<TValue> parameter with a template for the component under test. Declaration public ComponentParameterBuilder<TComponent> Add<TValue>(Expression<Func<TComponent, RenderFragment<TValue>>> parameterSelector, RenderFragment<TValue> template) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TComponent, Microsoft.AspNetCore.Components.RenderFragment <TValue>>> parameterSelector The parameter selector which defines the parameter to add Microsoft.AspNetCore.Components.RenderFragment <TValue> template Microsoft.AspNetCore.Components.RenderFragment<TValue> to pass to the parameter Returns Type Description ComponentParameterBuilder <TComponent> A ComponentParameterBuilder<TComponent> which can be chained Type Parameters Name Description TValue The generic value type | Improve this Doc View Source Add<TValue>(Expression<Func<TComponent, RenderFragment<TValue>>>, Func<TValue, String>) Add a strongly typed Microsoft.AspNetCore.Components.RenderFragment<TValue> parameter with a markupFactory for the component under test. Declaration public ComponentParameterBuilder<TComponent> Add<TValue>(Expression<Func<TComponent, RenderFragment<TValue>>> parameterSelector, Func<TValue, string> markupFactory) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TComponent, Microsoft.AspNetCore.Components.RenderFragment <TValue>>> parameterSelector The parameter selector which defines the parameter to add System.Func <TValue, System.String > markupFactory A markup factory that takes a TValue as input and returns markup/HTML. Returns Type Description ComponentParameterBuilder <TComponent> A ComponentParameterBuilder<TComponent> which can be chained Type Parameters Name Description TValue The generic value type | Improve this Doc View Source Add<TChildComponent>(Expression<Func<TComponent, RenderFragment>>, Action<ComponentParameterBuilder<TChildComponent>>) Add a strongly typed Microsoft.AspNetCore.Components.RenderFragment parameter with a ComponentParameterBuilder<TComponent> for the component under test. Declaration public ComponentParameterBuilder<TComponent> Add<TChildComponent>(Expression<Func<TComponent, RenderFragment>> parameterSelector, Action<ComponentParameterBuilder<TChildComponent>> childParameterBuilder = null) where TChildComponent : class, IComponent Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TComponent, Microsoft.AspNetCore.Components.RenderFragment >> parameterSelector The parameter selector which defines the parameter to add System.Action < ComponentParameterBuilder <TChildComponent>> childParameterBuilder An optional builder action for the child component. Returns Type Description ComponentParameterBuilder <TComponent> A ComponentParameterBuilder<TComponent> which can be chained Type Parameters Name Description TChildComponent | Improve this Doc View Source AddChildContent(String) Add a child component markup for a ChildContent parameter. Declaration public ComponentParameterBuilder<TComponent> AddChildContent(string markup) Parameters Type Name Description System.String markup Markup to render as output for the ChildContent parameter Returns Type Description ComponentParameterBuilder <TComponent> A ComponentParameterBuilder<TComponent> which can be chained | Improve this Doc View Source AddChildContent<TChildComponent>(Action<ComponentParameterBuilder<TChildComponent>>) Add a ComponentParameterBuilder<TComponent> to build a ChildContent parameter. Declaration public ComponentParameterBuilder<TComponent> AddChildContent<TChildComponent>(Action<ComponentParameterBuilder<TChildComponent>> childParameterBuilder = null) where TChildComponent : class, IComponent Parameters Type Name Description System.Action < ComponentParameterBuilder <TChildComponent>> childParameterBuilder An optional builder action for the child component. Returns Type Description ComponentParameterBuilder <TComponent> A ComponentParameterBuilder<TComponent> which can be chained Type Parameters Name Description TChildComponent | Improve this Doc View Source AddUnmatched(String, Object) Adds an unmatched attribute to the component under test. Declaration public ComponentParameterBuilder<TComponent> AddUnmatched(string key, object value) Parameters Type Name Description System.String key The value to set for an unnamed cascading parameter System.Object value The value to set for an unnamed cascading parameter Returns Type Description ComponentParameterBuilder <TComponent> A ComponentParameterBuilder<TComponent> which can be chained | Improve this Doc View Source Build() Create a System.Collections.Generic.IReadOnlyList<T> . Declaration public IReadOnlyList<ComponentParameter> Build() Returns Type Description System.Collections.Generic.IReadOnlyList < ComponentParameter > A list of ComponentParameter Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.ComponentParameterExtensions.html": {
    "href": "api/Bunit.ComponentParameterExtensions.html",
    "title": "Class ComponentParameterExtensions | bUnit",
    "keywords": "Class ComponentParameterExtensions Helpful extensions for working with ComponentParameter and collections of these. Inheritance System.Object ComponentParameterExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Core.dll Syntax public static class ComponentParameterExtensions Methods | Improve this Doc View Source ToComponentRenderFragment<TComponent>(IEnumerable<ComponentParameter>) Creates a Microsoft.AspNetCore.Components.RenderFragment that will render a component of TComponent type, with the provided parameters . If one or more of the parameters include a cascading values, the TComponent will be wrapped in Microsoft.AspNetCore.Components.CascadingValue`1 components. Declaration public static RenderFragment ToComponentRenderFragment<TComponent>(this IEnumerable<ComponentParameter> parameters) where TComponent : IComponent Parameters Type Name Description System.Collections.Generic.IEnumerable < ComponentParameter > parameters Parameters to pass to the component Returns Type Description Microsoft.AspNetCore.Components.RenderFragment The Microsoft.AspNetCore.Components.RenderFragment . Type Parameters Name Description TComponent Type of component to render in the render fragment"
  },
  "api/Bunit.ComponentParameterFactory.html": {
    "href": "api/Bunit.ComponentParameterFactory.html",
    "title": "Class ComponentParameterFactory | bUnit",
    "keywords": "Class ComponentParameterFactory ComponentParameter factory methods. Inheritance System.Object ComponentParameterFactory Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Core.dll Syntax public static class ComponentParameterFactory Methods | Improve this Doc View Source CascadingValue(Object) Creates a cascading value which can be passed to a test contexts render methods. Declaration public static ComponentParameter CascadingValue(object value) Parameters Type Name Description System.Object value Value of the parameter Returns Type Description ComponentParameter The ComponentParameter . | Improve this Doc View Source CascadingValue(String, Object) Creates a cascading value which can be passed to a test contexts render methods. Declaration public static ComponentParameter CascadingValue(string name, object value) Parameters Type Name Description System.String name Parameter name System.Object value Value of the parameter Returns Type Description ComponentParameter The ComponentParameter . | Improve this Doc View Source ChildContent(String) Creates a ChildContent Microsoft.AspNetCore.Components.RenderFragment with the provided markup as rendered output. Declaration public static ComponentParameter ChildContent(string markup) Parameters Type Name Description System.String markup Markup to pass to the child content parameter Returns Type Description ComponentParameter The ComponentParameter . | Improve this Doc View Source ChildContent<TComponent>(ComponentParameter[]) Creates a ChildContent Microsoft.AspNetCore.Components.RenderFragment which will render a TComponent component with the provided parameters as input. Declaration public static ComponentParameter ChildContent<TComponent>(params ComponentParameter[] parameters) where TComponent : class, IComponent Parameters Type Name Description ComponentParameter [] parameters Parameters to pass to the TComponent . Returns Type Description ComponentParameter The ComponentParameter . Type Parameters Name Description TComponent The type of the component to render with the Microsoft.AspNetCore.Components.RenderFragment | Improve this Doc View Source EventCallback(String, Action) Creates a ComponentParameter with an Microsoft.AspNetCore.Components.EventCallback that will call the provided callback . Declaration public static ComponentParameter EventCallback(string name, Action callback) Parameters Type Name Description System.String name Parameter name. System.Action callback The event callback. Returns Type Description ComponentParameter The ComponentParameter . | Improve this Doc View Source EventCallback(String, Action<Object>) Creates a ComponentParameter with an Microsoft.AspNetCore.Components.EventCallback that will call the provided callback . Declaration public static ComponentParameter EventCallback(string name, Action<object> callback) Parameters Type Name Description System.String name Parameter name. System.Action < System.Object > callback The event callback. Returns Type Description ComponentParameter The ComponentParameter . | Improve this Doc View Source EventCallback(String, Func<Object, Task>) Creates a ComponentParameter with an Microsoft.AspNetCore.Components.EventCallback that will call the provided callback . Declaration public static ComponentParameter EventCallback(string name, Func<object, Task> callback) Parameters Type Name Description System.String name Parameter name. System.Func < System.Object , System.Threading.Tasks.Task > callback The event callback. Returns Type Description ComponentParameter The ComponentParameter . | Improve this Doc View Source EventCallback(String, Func<Task>) Creates a ComponentParameter with an Microsoft.AspNetCore.Components.EventCallback that will call the provided callback . Declaration public static ComponentParameter EventCallback(string name, Func<Task> callback) Parameters Type Name Description System.String name Parameter name. System.Func < System.Threading.Tasks.Task > callback The event callback. Returns Type Description ComponentParameter The ComponentParameter . | Improve this Doc View Source EventCallback<TValue>(String, Action) Creates a ComponentParameter with an Microsoft.AspNetCore.Components.EventCallback that will call the provided callback . Declaration public static ComponentParameter EventCallback<TValue>(string name, Action callback) Parameters Type Name Description System.String name Parameter name. System.Action callback The event callback. Returns Type Description ComponentParameter The ComponentParameter . Type Parameters Name Description TValue | Improve this Doc View Source EventCallback<TValue>(String, Action<TValue>) Creates a ComponentParameter with an Microsoft.AspNetCore.Components.EventCallback that will call the provided callback . Declaration public static ComponentParameter EventCallback<TValue>(string name, Action<TValue> callback) Parameters Type Name Description System.String name Parameter name. System.Action <TValue> callback The event callback. Returns Type Description ComponentParameter The ComponentParameter . Type Parameters Name Description TValue | Improve this Doc View Source EventCallback<TValue>(String, Func<TValue, Task>) Creates a ComponentParameter with an Microsoft.AspNetCore.Components.EventCallback that will call the provided callback . Declaration public static ComponentParameter EventCallback<TValue>(string name, Func<TValue, Task> callback) Parameters Type Name Description System.String name Parameter name. System.Func <TValue, System.Threading.Tasks.Task > callback The event callback. Returns Type Description ComponentParameter The ComponentParameter . Type Parameters Name Description TValue | Improve this Doc View Source EventCallback<TValue>(String, Func<Task>) Creates a ComponentParameter with an Microsoft.AspNetCore.Components.EventCallback that will call the provided callback . Declaration public static ComponentParameter EventCallback<TValue>(string name, Func<Task> callback) Parameters Type Name Description System.String name Parameter name. System.Func < System.Threading.Tasks.Task > callback The event callback. Returns Type Description ComponentParameter The ComponentParameter . Type Parameters Name Description TValue | Improve this Doc View Source Parameter(String, Object) Creates a component parameter which can be passed to a test contexts render methods. Declaration public static ComponentParameter Parameter(string name, object value) Parameters Type Name Description System.String name Parameter name System.Object value Value or null of the parameter Returns Type Description ComponentParameter The ComponentParameter . | Improve this Doc View Source RenderFragment(String, String) Creates a Microsoft.AspNetCore.Components.RenderFragment with the provided markup as rendered output and passes it to the parameter specified in name . Declaration public static ComponentParameter RenderFragment(string name, string markup) Parameters Type Name Description System.String name Parameter name. System.String markup Markup to pass to the render fragment parameter Returns Type Description ComponentParameter The ComponentParameter . | Improve this Doc View Source RenderFragment<TComponent>(String, ComponentParameter[]) Creates a Microsoft.AspNetCore.Components.RenderFragment which will render a TComponent component with the provided parameters as input, and passes it to the parameter specified in name . Declaration public static ComponentParameter RenderFragment<TComponent>(string name, params ComponentParameter[] parameters) where TComponent : class, IComponent Parameters Type Name Description System.String name Parameter name. ComponentParameter [] parameters Parameters to pass to the TComponent . Returns Type Description ComponentParameter The ComponentParameter . Type Parameters Name Description TComponent The type of the component to render with the Microsoft.AspNetCore.Components.RenderFragment | Improve this Doc View Source Template<TValue>(String, RenderFragment<TValue>) Creates a template component parameter which will pass the template Microsoft.AspNetCore.Components.RenderFragment<TValue> to the parameter with the name name . Declaration public static ComponentParameter Template<TValue>(string name, RenderFragment<TValue> template) Parameters Type Name Description System.String name Parameter name. Microsoft.AspNetCore.Components.RenderFragment <TValue> template Microsoft.AspNetCore.Components.RenderFragment<TValue> to pass to the parameter. Returns Type Description ComponentParameter The ComponentParameter . Type Parameters Name Description TValue The value used to build the content. | Improve this Doc View Source Template<TValue>(String, Func<TValue, String>) Creates a template component parameter which will pass the a Microsoft.AspNetCore.Components.RenderFragment<TValue> to the parameter with the name name . The markupFactory will be used to generate the markup inside the template. Declaration public static ComponentParameter Template<TValue>(string name, Func<TValue, string> markupFactory) Parameters Type Name Description System.String name Parameter name. System.Func <TValue, System.String > markupFactory A markup factory that takes a TValue as input and returns markup/HTML. Returns Type Description ComponentParameter The ComponentParameter . Type Parameters Name Description TValue The value used to build the content."
  },
  "api/Bunit.ComponentTestFixture.html": {
    "href": "api/Bunit.ComponentTestFixture.html",
    "title": "Class ComponentTestFixture | bUnit",
    "keywords": "Class ComponentTestFixture Base class for test classes that contains Razor component tests. Inheritance System.Object TestContextBase TestContext ComponentTestFixture Implements ITestContext System.IDisposable Inherited Members TestContext.RenderComponent<TComponent>(ComponentParameter[]) TestContext.RenderComponent<TComponent>(Action<ComponentParameterBuilder<TComponent>>) TestContextBase.Renderer TestContextBase.Services TestContextBase.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Web.dll Syntax [Obsolete(\"Inherit from TestContext instead, and add a 'using static Bunit.ComponentParameterFactory' to your test class to keep using the component parameter factories/helpers, provided in this class. Alternatively, you can switch to using the RenderComponent overload that takes an ComponentParameterBuilder as input. This class will be removed in a later release.\")] public abstract class ComponentTestFixture : TestContext, ITestContext, IDisposable Methods | Improve this Doc View Source CascadingValue(Object) Creates a cascading value which can be passed to a test contexts render methods. Declaration protected static ComponentParameter CascadingValue(object value) Parameters Type Name Description System.Object value Value of the parameter Returns Type Description ComponentParameter The ComponentParameter . | Improve this Doc View Source CascadingValue(String, Object) Creates a cascading value which can be passed to a test contexts render methods. Declaration protected static ComponentParameter CascadingValue(string name, object value) Parameters Type Name Description System.String name Parameter name System.Object value Value of the parameter Returns Type Description ComponentParameter The ComponentParameter . | Improve this Doc View Source ChildContent(String) Creates a ChildContent Microsoft.AspNetCore.Components.RenderFragment with the provided markup as rendered output. Declaration protected static ComponentParameter ChildContent(string markup) Parameters Type Name Description System.String markup Markup to pass to the child content parameter Returns Type Description ComponentParameter The ComponentParameter . | Improve this Doc View Source ChildContent<TComponent>(ComponentParameter[]) Creates a ChildContent Microsoft.AspNetCore.Components.RenderFragment which will render a TComponent component with the provided parameters as input. Declaration protected static ComponentParameter ChildContent<TComponent>(params ComponentParameter[] parameters) where TComponent : class, IComponent Parameters Type Name Description ComponentParameter [] parameters Parameters to pass to the TComponent . Returns Type Description ComponentParameter The ComponentParameter . Type Parameters Name Description TComponent The type of the component to render with the Microsoft.AspNetCore.Components.RenderFragment | Improve this Doc View Source EventCallback(String, Action) Creates a ComponentParameter with an Microsoft.AspNetCore.Components.EventCallback as parameter value for this TestContext and callback . Declaration protected static ComponentParameter EventCallback(string name, Action callback) Parameters Type Name Description System.String name Parameter name. System.Action callback The event callback. Returns Type Description ComponentParameter The ComponentParameter . | Improve this Doc View Source EventCallback(String, Action<Object>) Creates a ComponentParameter with an Microsoft.AspNetCore.Components.EventCallback as parameter value for this TestContext and callback . Declaration protected static ComponentParameter EventCallback(string name, Action<object> callback) Parameters Type Name Description System.String name Parameter name. System.Action < System.Object > callback The event callback. Returns Type Description ComponentParameter The ComponentParameter . | Improve this Doc View Source EventCallback(String, Func<Object, Task>) Creates a ComponentParameter with an Microsoft.AspNetCore.Components.EventCallback as parameter value for this TestContext and callback . Declaration protected static ComponentParameter EventCallback(string name, Func<object, Task> callback) Parameters Type Name Description System.String name Parameter name. System.Func < System.Object , System.Threading.Tasks.Task > callback The event callback. Returns Type Description ComponentParameter The ComponentParameter . | Improve this Doc View Source EventCallback(String, Func<Task>) Creates a ComponentParameter with an Microsoft.AspNetCore.Components.EventCallback as parameter value for this TestContext and callback . Declaration protected static ComponentParameter EventCallback(string name, Func<Task> callback) Parameters Type Name Description System.String name Parameter name. System.Func < System.Threading.Tasks.Task > callback The event callback. Returns Type Description ComponentParameter The ComponentParameter . | Improve this Doc View Source EventCallback<TValue>(String, Action) Creates a ComponentParameter with an Microsoft.AspNetCore.Components.EventCallback as parameter value for this TestContext and callback . Declaration protected static ComponentParameter EventCallback<TValue>(string name, Action callback) Parameters Type Name Description System.String name Parameter name. System.Action callback The event callback. Returns Type Description ComponentParameter The ComponentParameter . Type Parameters Name Description TValue | Improve this Doc View Source EventCallback<TValue>(String, Action<TValue>) Creates a ComponentParameter with an Microsoft.AspNetCore.Components.EventCallback as parameter value for this TestContext and callback . Declaration protected static ComponentParameter EventCallback<TValue>(string name, Action<TValue> callback) Parameters Type Name Description System.String name Parameter name. System.Action <TValue> callback The event callback. Returns Type Description ComponentParameter The ComponentParameter . Type Parameters Name Description TValue | Improve this Doc View Source EventCallback<TValue>(String, Func<TValue, Task>) Creates a ComponentParameter with an Microsoft.AspNetCore.Components.EventCallback as parameter value for this TestContext and callback . Declaration protected static ComponentParameter EventCallback<TValue>(string name, Func<TValue, Task> callback) Parameters Type Name Description System.String name Parameter name. System.Func <TValue, System.Threading.Tasks.Task > callback The event callback. Returns Type Description ComponentParameter The ComponentParameter . Type Parameters Name Description TValue | Improve this Doc View Source EventCallback<TValue>(String, Func<Task>) Creates a ComponentParameter with an Microsoft.AspNetCore.Components.EventCallback as parameter value for this TestContext and callback . Declaration protected static ComponentParameter EventCallback<TValue>(string name, Func<Task> callback) Parameters Type Name Description System.String name Parameter name. System.Func < System.Threading.Tasks.Task > callback The event callback. Returns Type Description ComponentParameter The ComponentParameter . Type Parameters Name Description TValue | Improve this Doc View Source Parameter(String, Object) Creates a component parameter which can be passed to a test contexts render methods. Declaration protected static ComponentParameter Parameter(string name, object value) Parameters Type Name Description System.String name Parameter name System.Object value Value or null of the parameter Returns Type Description ComponentParameter The ComponentParameter . | Improve this Doc View Source RenderFragment(String, String) Creates a Microsoft.AspNetCore.Components.RenderFragment with the provided markup as rendered output and passes it to the parameter specified in name . Declaration protected static ComponentParameter RenderFragment(string name, string markup) Parameters Type Name Description System.String name Parameter name. System.String markup Markup to pass to the render fragment parameter Returns Type Description ComponentParameter The ComponentParameter . | Improve this Doc View Source RenderFragment<TComponent>(String, ComponentParameter[]) Creates a Microsoft.AspNetCore.Components.RenderFragment which will render a TComponent component with the provided parameters as input, and passes it to the parameter specified in name . Declaration protected static ComponentParameter RenderFragment<TComponent>(string name, params ComponentParameter[] parameters) where TComponent : class, IComponent Parameters Type Name Description System.String name Parameter name. ComponentParameter [] parameters Parameters to pass to the TComponent . Returns Type Description ComponentParameter The ComponentParameter . Type Parameters Name Description TComponent The type of the component to render with the Microsoft.AspNetCore.Components.RenderFragment | Improve this Doc View Source Template<TValue>(String, RenderFragment<TValue>) Creates a template component parameter which will pass the template Microsoft.AspNetCore.Components.RenderFragment<TValue> to the parameter with the name name . Declaration protected static ComponentParameter Template<TValue>(string name, RenderFragment<TValue> template) Parameters Type Name Description System.String name Parameter name. Microsoft.AspNetCore.Components.RenderFragment <TValue> template Microsoft.AspNetCore.Components.RenderFragment<TValue> to pass to the parameter. Returns Type Description ComponentParameter The ComponentParameter . Type Parameters Name Description TValue The value used to build the content. | Improve this Doc View Source Template<TValue>(String, Func<TValue, String>) Creates a template component parameter which will pass the a Microsoft.AspNetCore.Components.RenderFragment<TValue> to the parameter with the name name . The markupFactory will be used to generate the markup inside the template. Declaration protected static ComponentParameter Template<TValue>(string name, Func<TValue, string> markupFactory) Parameters Type Name Description System.String name Parameter name. System.Func <TValue, System.String > markupFactory A markup factory that takes a TValue as input and returns markup/HTML. Returns Type Description ComponentParameter The ComponentParameter . Type Parameters Name Description TValue The value used to build the content. Implements ITestContext System.IDisposable Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.ComponentUnderTest.html": {
    "href": "api/Bunit.ComponentUnderTest.html",
    "title": "Class ComponentUnderTest | bUnit",
    "keywords": "Class ComponentUnderTest Represents a component that can be added inside a RazorTestBase , where a component under test can be defined as the child content. Inheritance System.Object FragmentBase ComponentUnderTest Implements Microsoft.AspNetCore.Components.IComponent Inherited Members FragmentBase.ChildContent FragmentBase.Attach(RenderHandle) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Core.dll Syntax public class ComponentUnderTest : FragmentBase, IComponent Methods | Improve this Doc View Source SetParametersAsync(ParameterView) Declaration public override Task SetParametersAsync(ParameterView parameters) Parameters Type Name Description Microsoft.AspNetCore.Components.ParameterView parameters Returns Type Description System.Threading.Tasks.Task Overrides FragmentBase.SetParametersAsync(ParameterView) Implements Microsoft.AspNetCore.Components.IComponent Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.DiffAssertExtensions.html": {
    "href": "api/Bunit.DiffAssertExtensions.html",
    "title": "Class DiffAssertExtensions | bUnit",
    "keywords": "Class DiffAssertExtensions A collection of AngleSharp.Diffing.Core.IDiff assert extensions and generic assert extensions Inheritance System.Object DiffAssertExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Web.dll Syntax public static class DiffAssertExtensions Methods | Improve this Doc View Source ShouldHaveChanges(IEnumerable<IDiff>, Action<IDiff>[]) Verifies that a collection of AngleSharp.Diffing.Core.IDiff s contains exactly a given number of elements, which meet the criteria provided by the AngleSharp.Diffing.Core.IDiff inspectors Declaration public static void ShouldHaveChanges(this IEnumerable<IDiff> diffs, params Action<IDiff>[] diffInspectors) Parameters Type Name Description System.Collections.Generic.IEnumerable < AngleSharp.Diffing.Core.IDiff > diffs The collection to be inspected System.Action < AngleSharp.Diffing.Core.IDiff >[] diffInspectors The AngleSharp.Diffing.Core.IDiff inspectors, which inspect each AngleSharp.Diffing.Core.IDiff in turn. The total number of AngleSharp.Diffing.Core.IDiff inspectors must exactly match the number of AngleSharp.Diffing.Core.IDiff s in the collection | Improve this Doc View Source ShouldHaveSingleChange(IEnumerable<IDiff>) Verifies that a collection of AngleSharp.Diffing.Core.IDiff s contains exactly one AngleSharp.Diffing.Core.IDiff . Declaration public static IDiff ShouldHaveSingleChange(this IEnumerable<IDiff> diffs) Parameters Type Name Description System.Collections.Generic.IEnumerable < AngleSharp.Diffing.Core.IDiff > diffs The collection to be inspected Returns Type Description AngleSharp.Diffing.Core.IDiff The expected single AngleSharp.Diffing.Core.IDiff in the collection."
  },
  "api/Bunit.DiffChangeAssertException.html": {
    "href": "api/Bunit.DiffChangeAssertException.html",
    "title": "Class DiffChangeAssertException | bUnit",
    "keywords": "Class DiffChangeAssertException Represents an diff change assertion that has failed. Inheritance System.Object System.Exception ActualExpectedAssertException DiffChangeAssertException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Bunit Assembly : Bunit.Web.dll Syntax public class DiffChangeAssertException : ActualExpectedAssertException, ISerializable Constructors | Improve this Doc View Source DiffChangeAssertException(DiffResult, DiffResult, String) Creates an instance of the DiffChangeAssertException . Declaration public DiffChangeAssertException(DiffResult actual, DiffResult expected, string message) Parameters Type Name Description AngleSharp.Diffing.Core.DiffResult actual The actual change AngleSharp.Diffing.Core.DiffResult expected The expected change System.String message An error message explaining the context of the assertion Implements System.Runtime.Serialization.ISerializable Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.Diffing.BlazorDiffingHelpers.html": {
    "href": "api/Bunit.Diffing.BlazorDiffingHelpers.html",
    "title": "Class BlazorDiffingHelpers | bUnit",
    "keywords": "Class BlazorDiffingHelpers Blazor Dffing Helpers Inheritance System.Object BlazorDiffingHelpers Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.Diffing Assembly : Bunit.Web.dll Syntax public static class BlazorDiffingHelpers Methods | Improve this Doc View Source BlazorEventHandlerIdAttrFilter(AttributeComparisonSource, FilterDecision) Represents a diffing filter that removes all special Blazor attributes added by the TestRenderer / Bunit.Htmlizer . Declaration public static FilterDecision BlazorEventHandlerIdAttrFilter(in AttributeComparisonSource attrSource, FilterDecision currentDecision) Parameters Type Name Description AngleSharp.Diffing.Core.AttributeComparisonSource attrSource AngleSharp.Diffing.Core.FilterDecision currentDecision Returns Type Description AngleSharp.Diffing.Core.FilterDecision"
  },
  "api/Bunit.Diffing.DiffMarkupFormatter.html": {
    "href": "api/Bunit.Diffing.DiffMarkupFormatter.html",
    "title": "Class DiffMarkupFormatter | bUnit",
    "keywords": "Class DiffMarkupFormatter A markup formatter, that skips any special Blazor attributes added by the TestRenderer / Bunit.Htmlizer . Inheritance System.Object AngleSharp.Html.HtmlMarkupFormatter AngleSharp.Html.PrettyMarkupFormatter DiffMarkupFormatter Implements AngleSharp.IMarkupFormatter Inherited Members AngleSharp.Html.PrettyMarkupFormatter.Comment(AngleSharp.Dom.IComment) AngleSharp.Html.PrettyMarkupFormatter.Doctype(AngleSharp.Dom.IDocumentType) AngleSharp.Html.PrettyMarkupFormatter.Processing(AngleSharp.Dom.IProcessingInstruction) AngleSharp.Html.PrettyMarkupFormatter.Text(AngleSharp.Dom.ICharacterData) AngleSharp.Html.PrettyMarkupFormatter.OpenTag(AngleSharp.Dom.IElement, System.Boolean) AngleSharp.Html.PrettyMarkupFormatter.CloseTag(AngleSharp.Dom.IElement, System.Boolean) AngleSharp.Html.PrettyMarkupFormatter.Indentation AngleSharp.Html.PrettyMarkupFormatter.NewLine AngleSharp.Html.HtmlMarkupFormatter.LiteralText(AngleSharp.Dom.ICharacterData) AngleSharp.Html.HtmlMarkupFormatter.EscapeText(System.String) AngleSharp.Html.HtmlMarkupFormatter.GetIds(System.String, System.String) AngleSharp.Html.HtmlMarkupFormatter.XmlNamespaceLocalName(System.String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.Diffing Assembly : Bunit.Web.dll Syntax public class DiffMarkupFormatter : PrettyMarkupFormatter, IMarkupFormatter Constructors | Improve this Doc View Source DiffMarkupFormatter() Creates an instance of the DiffMarkupFormatter . Declaration public DiffMarkupFormatter() Fields | Improve this Doc View Source Instance Gets an instance of the DiffMarkupFormatter . Declaration public static readonly DiffMarkupFormatter Instance Field Value Type Description DiffMarkupFormatter Methods | Improve this Doc View Source Attribute(IAttr) Creates the string representation of the attribute. If it is a special Blazor renderer attribute, then it is ignored. Declaration protected override string Attribute(IAttr attr) Parameters Type Name Description AngleSharp.Dom.IAttr attr The attribute to serialize. Returns Type Description System.String The string representation. Overrides AngleSharp.Html.HtmlMarkupFormatter.Attribute(AngleSharp.Dom.IAttr) | Improve this Doc View Source ConvertToString(IAttr) Creates the string representation of the attribute. Declaration public string ConvertToString(IAttr attr) Parameters Type Name Description AngleSharp.Dom.IAttr attr The attribute to serialize. Returns Type Description System.String The string representation. Implements AngleSharp.IMarkupFormatter Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.Diffing.html": {
    "href": "api/Bunit.Diffing.html",
    "title": "Namespace Bunit.Diffing | bUnit",
    "keywords": "Namespace Bunit.Diffing Classes BlazorDiffingHelpers Blazor Dffing Helpers DiffMarkupFormatter A markup formatter, that skips any special Blazor attributes added by the TestRenderer / Bunit.Htmlizer . HtmlComparer Represents a test HTML comparer, that is configured to work with markup generated by the TestRenderer and Bunit.Htmlizer classes. HtmlParser A AngleSharp based HTML Parse that can parse markup strings into a AngleSharp.Dom.INodeList ."
  },
  "api/Bunit.Diffing.HtmlComparer.html": {
    "href": "api/Bunit.Diffing.HtmlComparer.html",
    "title": "Class HtmlComparer | bUnit",
    "keywords": "Class HtmlComparer Represents a test HTML comparer, that is configured to work with markup generated by the TestRenderer and Bunit.Htmlizer classes. Inheritance System.Object HtmlComparer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.Diffing Assembly : Bunit.Web.dll Syntax public sealed class HtmlComparer Constructors | Improve this Doc View Source HtmlComparer() Initializes a new instance of the HtmlComparer class. Declaration public HtmlComparer() Methods | Improve this Doc View Source Compare(INode, INode) Compares the controlHtml with the testHtml and returns any differences found. Declaration public IEnumerable<IDiff> Compare(INode controlHtml, INode testHtml) Parameters Type Name Description AngleSharp.Dom.INode controlHtml AngleSharp.Dom.INode testHtml Returns Type Description System.Collections.Generic.IEnumerable < AngleSharp.Diffing.Core.IDiff > | Improve this Doc View Source Compare(IEnumerable<INode>, IEnumerable<INode>) Compares the controlHtml with the testHtml and returns any differences found. Declaration public IEnumerable<IDiff> Compare(IEnumerable<INode> controlHtml, IEnumerable<INode> testHtml) Parameters Type Name Description System.Collections.Generic.IEnumerable < AngleSharp.Dom.INode > controlHtml System.Collections.Generic.IEnumerable < AngleSharp.Dom.INode > testHtml Returns Type Description System.Collections.Generic.IEnumerable < AngleSharp.Diffing.Core.IDiff > Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.Diffing.HtmlParser.html": {
    "href": "api/Bunit.Diffing.HtmlParser.html",
    "title": "Class HtmlParser | bUnit",
    "keywords": "Class HtmlParser A AngleSharp based HTML Parse that can parse markup strings into a AngleSharp.Dom.INodeList . Inheritance System.Object HtmlParser Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.Diffing Assembly : Bunit.Web.dll Syntax public sealed class HtmlParser : IDisposable Constructors | Improve this Doc View Source HtmlParser() Creates an instance of the parser with a AngleSharp context without a TestRenderer registered. Declaration public HtmlParser() | Improve this Doc View Source HtmlParser(ITestRenderer, HtmlComparer) Creates an instance of the parser with a AngleSharp context with the testRenderer registered. Declaration public HtmlParser(ITestRenderer testRenderer, HtmlComparer htmlComparer) Parameters Type Name Description ITestRenderer testRenderer HtmlComparer htmlComparer Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Parse(String) Parses a markup HTML string using AngleSharps HTML5 parser. Declaration public INodeList Parse(string markup) Parameters Type Name Description System.String markup The markup to parse. Returns Type Description AngleSharp.Dom.INodeList The AngleSharp.Dom.INodeList . Implements System.IDisposable Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.DragEventDispatchExtensions.html": {
    "href": "api/Bunit.DragEventDispatchExtensions.html",
    "title": "Class DragEventDispatchExtensions | bUnit",
    "keywords": "Class DragEventDispatchExtensions Drag event dispatch helper extension methods. Inheritance System.Object DragEventDispatchExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Web.dll Syntax public static class DragEventDispatchExtensions Methods | Improve this Doc View Source Drag(IElement, DragEventArgs) Raises the @ondrag event on element , passing the provided eventArgs to the event handler. Declaration public static void Drag(this IElement element, DragEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.DragEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source Drag(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String, DataTransfer) Raises the @ondrag event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.DragEventArgs object. Declaration public static void Drag(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null, DataTransfer dataTransfer = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. Microsoft.AspNetCore.Components.Web.DataTransfer dataTransfer The data that underlies a drag-and-drop operation, known as the drag data store. See Microsoft.AspNetCore.Components.Web.DataTransfer . | Improve this Doc View Source DragAsync(IElement, DragEventArgs) Raises the @ondrag event on element , passing the provided eventArgs to the event handler. Declaration public static Task DragAsync(this IElement element, DragEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element Microsoft.AspNetCore.Components.Web.DragEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source DragEnd(IElement, DragEventArgs) Raises the @ondragend event on element , passing the provided eventArgs to the event handler. Declaration public static void DragEnd(this IElement element, DragEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.DragEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source DragEnd(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String, DataTransfer) Raises the @ondragend event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.DragEventArgs object. Declaration public static void DragEnd(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null, DataTransfer dataTransfer = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. Microsoft.AspNetCore.Components.Web.DataTransfer dataTransfer The data that underlies a drag-and-drop operation, known as the drag data store. See Microsoft.AspNetCore.Components.Web.DataTransfer . | Improve this Doc View Source DragEndAsync(IElement, DragEventArgs) Raises the @ondragend event on element , passing the provided eventArgs to the event handler. Declaration public static Task DragEndAsync(this IElement element, DragEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element Microsoft.AspNetCore.Components.Web.DragEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source DragEnter(IElement, DragEventArgs) Raises the @ondragenter event on element , passing the provided eventArgs to the event handler. Declaration public static void DragEnter(this IElement element, DragEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.DragEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source DragEnter(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String, DataTransfer) Raises the @ondragenter event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.DragEventArgs object. Declaration public static void DragEnter(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null, DataTransfer dataTransfer = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. Microsoft.AspNetCore.Components.Web.DataTransfer dataTransfer The data that underlies a drag-and-drop operation, known as the drag data store. See Microsoft.AspNetCore.Components.Web.DataTransfer . | Improve this Doc View Source DragEnterAsync(IElement, DragEventArgs) Raises the @ondragenter event on element , passing the provided eventArgs to the event handler. Declaration public static Task DragEnterAsync(this IElement element, DragEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element Microsoft.AspNetCore.Components.Web.DragEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source DragLeave(IElement, DragEventArgs) Raises the @ondragleave event on element , passing the provided eventArgs to the event handler. Declaration public static void DragLeave(this IElement element, DragEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.DragEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source DragLeave(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String, DataTransfer) Raises the @ondragleave event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.DragEventArgs object. Declaration public static void DragLeave(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null, DataTransfer dataTransfer = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. Microsoft.AspNetCore.Components.Web.DataTransfer dataTransfer The data that underlies a drag-and-drop operation, known as the drag data store. See Microsoft.AspNetCore.Components.Web.DataTransfer . | Improve this Doc View Source DragLeaveAsync(IElement, DragEventArgs) Raises the @ondragleave event on element , passing the provided eventArgs to the event handler. Declaration public static Task DragLeaveAsync(this IElement element, DragEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element Microsoft.AspNetCore.Components.Web.DragEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source DragOver(IElement, DragEventArgs) Raises the @ondragover event on element , passing the provided eventArgs to the event handler. Declaration public static void DragOver(this IElement element, DragEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.DragEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source DragOver(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String, DataTransfer) Raises the @ondragover event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.DragEventArgs object. Declaration public static void DragOver(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null, DataTransfer dataTransfer = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. Microsoft.AspNetCore.Components.Web.DataTransfer dataTransfer The data that underlies a drag-and-drop operation, known as the drag data store. See Microsoft.AspNetCore.Components.Web.DataTransfer . | Improve this Doc View Source DragOverAsync(IElement, DragEventArgs) Raises the @ondragover event on element , passing the provided eventArgs to the event handler. Declaration public static Task DragOverAsync(this IElement element, DragEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element Microsoft.AspNetCore.Components.Web.DragEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source DragStart(IElement, DragEventArgs) Raises the @ondragstart event on element , passing the provided eventArgs to the event handler. Declaration public static void DragStart(this IElement element, DragEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.DragEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source DragStart(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String, DataTransfer) Raises the @ondragstart event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.DragEventArgs object. Declaration public static void DragStart(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null, DataTransfer dataTransfer = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. Microsoft.AspNetCore.Components.Web.DataTransfer dataTransfer The data that underlies a drag-and-drop operation, known as the drag data store. See Microsoft.AspNetCore.Components.Web.DataTransfer . | Improve this Doc View Source DragStartAsync(IElement, DragEventArgs) Raises the @ondragstart event on element , passing the provided eventArgs to the event handler. Declaration public static Task DragStartAsync(this IElement element, DragEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element Microsoft.AspNetCore.Components.Web.DragEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Drop(IElement, DragEventArgs) Raises the @ondrop event on element , passing the provided eventArgs to the event handler. Declaration public static void Drop(this IElement element, DragEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.DragEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source Drop(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String, DataTransfer) Raises the @ondrop event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.DragEventArgs object. Declaration public static void Drop(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null, DataTransfer dataTransfer = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. Microsoft.AspNetCore.Components.Web.DataTransfer dataTransfer The data that underlies a drag-and-drop operation, known as the drag data store. See Microsoft.AspNetCore.Components.Web.DataTransfer . | Improve this Doc View Source DropAsync(IElement, DragEventArgs) Raises the @ondrop event on element , passing the provided eventArgs to the event handler. Declaration public static Task DropAsync(this IElement element, DragEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element Microsoft.AspNetCore.Components.Web.DragEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done."
  },
  "api/Bunit.ElementNotFoundException.html": {
    "href": "api/Bunit.ElementNotFoundException.html",
    "title": "Class ElementNotFoundException | bUnit",
    "keywords": "Class ElementNotFoundException Represents a failure to find an element in the searched target using a css selector. Inheritance System.Object System.Exception ElementNotFoundException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Bunit Assembly : Bunit.Web.dll Syntax public class ElementNotFoundException : Exception, ISerializable Constructors | Improve this Doc View Source ElementNotFoundException() Declaration public ElementNotFoundException() | Improve this Doc View Source ElementNotFoundException(String) Declaration public ElementNotFoundException(string cssSelector) Parameters Type Name Description System.String cssSelector | Improve this Doc View Source ElementNotFoundException(String, Exception) Declaration public ElementNotFoundException(string message, Exception innerException) Parameters Type Name Description System.String message System.Exception innerException Properties | Improve this Doc View Source CssSelector The css selector used to search with. Declaration public string CssSelector { get; } Property Value Type Description System.String Implements System.Runtime.Serialization.ISerializable Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.ElementRemovedException.html": {
    "href": "api/Bunit.ElementRemovedException.html",
    "title": "Class ElementRemovedException | bUnit",
    "keywords": "Class ElementRemovedException Represents an exception that is thrown when a wrapped element is no longer available in the DOM tree. Inheritance System.Object System.Exception ElementRemovedException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Bunit Assembly : Bunit.Web.dll Syntax public class ElementRemovedException : Exception, ISerializable Constructors | Improve this Doc View Source ElementRemovedException() Declaration public ElementRemovedException() Implements System.Runtime.Serialization.ISerializable Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.Extensions.html": {
    "href": "api/Bunit.Extensions.html",
    "title": "Namespace Bunit.Extensions | bUnit",
    "keywords": "Namespace Bunit.Extensions Classes LoggerHelperExtensions Helper extension methods for getting a logger. TestServiceProviderExtensions Helper methods for correctly registering test dependencies"
  },
  "api/Bunit.Extensions.LoggerHelperExtensions.html": {
    "href": "api/Bunit.Extensions.LoggerHelperExtensions.html",
    "title": "Class LoggerHelperExtensions | bUnit",
    "keywords": "Class LoggerHelperExtensions Helper extension methods for getting a logger. Inheritance System.Object LoggerHelperExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.Extensions Assembly : Bunit.Core.dll Syntax public static class LoggerHelperExtensions Methods | Improve this Doc View Source CreateLogger<TCategoryName>(IServiceProvider) Creates a logger from the Microsoft.Extensions.Logging.ILoggerFactory registered in the System.IServiceProvider . Declaration public static ILogger<TCategoryName> CreateLogger<TCategoryName>(this IServiceProvider services) Parameters Type Name Description System.IServiceProvider services The service to get the Microsoft.Extensions.Logging.ILoggerFactory from. Returns Type Description Microsoft.Extensions.Logging.ILogger <TCategoryName> The Microsoft.Extensions.Logging.ILogger<TCategoryName> Type Parameters Name Description TCategoryName The category for the logger."
  },
  "api/Bunit.Extensions.TestServiceProviderExtensions.html": {
    "href": "api/Bunit.Extensions.TestServiceProviderExtensions.html",
    "title": "Class TestServiceProviderExtensions | bUnit",
    "keywords": "Class TestServiceProviderExtensions Helper methods for correctly registering test dependencies Inheritance System.Object TestServiceProviderExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.Extensions Assembly : Bunit.Web.dll Syntax public static class TestServiceProviderExtensions Methods | Improve this Doc View Source AddDefaultTestContextServices(IServiceCollection) Registers the default services required by the web TestContext . Declaration public static IServiceCollection AddDefaultTestContextServices(this IServiceCollection services) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection"
  },
  "api/Bunit.Extensions.WaitForHelpers.html": {
    "href": "api/Bunit.Extensions.WaitForHelpers.html",
    "title": "Namespace Bunit.Extensions.WaitForHelpers | bUnit",
    "keywords": "Namespace Bunit.Extensions.WaitForHelpers Classes WaitForAssertionHelper Represents an async wait helper, that will wait for a specified time for an assertion to pass. WaitForFailedException Represents an exception thrown when the WaitForHelper does not complete successfully. WaitForHelper Represents a helper class that can wait for a render notifications from a IRenderedFragmentBase type, until a specific timeout is reached. WaitForStateHelper Represents an async wait helper, that will wait for a specified time for a state predicate to pass."
  },
  "api/Bunit.Extensions.WaitForHelpers.WaitForAssertionHelper.html": {
    "href": "api/Bunit.Extensions.WaitForHelpers.WaitForAssertionHelper.html",
    "title": "Class WaitForAssertionHelper | bUnit",
    "keywords": "Class WaitForAssertionHelper Represents an async wait helper, that will wait for a specified time for an assertion to pass. Inheritance System.Object WaitForHelper WaitForAssertionHelper Implements System.IDisposable Inherited Members WaitForHelper.CheckThrowErrorMessage WaitForHelper.WaitTask WaitForHelper.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.Extensions.WaitForHelpers Assembly : Bunit.Core.dll Syntax public class WaitForAssertionHelper : WaitForHelper, IDisposable Constructors | Improve this Doc View Source WaitForAssertionHelper(IRenderedFragmentBase, Action, Nullable<TimeSpan>) Creates an instance of the WaitForAssertionHelper type, which will until the provided assertion passes (i.e. does not throw an exception), or the timeout is reached (default is one second). The assertion is attempted initially, and then each time the renderedFragment renders. Declaration public WaitForAssertionHelper(IRenderedFragmentBase renderedFragment, Action assertion, TimeSpan? timeout = default(TimeSpan? )) Parameters Type Name Description IRenderedFragmentBase renderedFragment The rendered fragment to wait for renders from and assert against. System.Action assertion The verification or assertion to perform. System.Nullable < System.TimeSpan > timeout The maximum time to attempt the verification. Properties | Improve this Doc View Source StopWaitingOnCheckException Declaration protected override bool StopWaitingOnCheckException { get; } Property Value Type Description System.Boolean Overrides WaitForHelper.StopWaitingOnCheckException | Improve this Doc View Source TimeoutErrorMessage Declaration protected override string TimeoutErrorMessage { get; } Property Value Type Description System.String Overrides WaitForHelper.TimeoutErrorMessage Implements System.IDisposable Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.Extensions.WaitForHelpers.WaitForFailedException.html": {
    "href": "api/Bunit.Extensions.WaitForHelpers.WaitForFailedException.html",
    "title": "Class WaitForFailedException | bUnit",
    "keywords": "Class WaitForFailedException Represents an exception thrown when the WaitForHelper does not complete successfully. Inheritance System.Object System.Exception WaitForFailedException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Bunit.Extensions.WaitForHelpers Assembly : Bunit.Core.dll Syntax public class WaitForFailedException : Exception, ISerializable Constructors | Improve this Doc View Source WaitForFailedException(String, Exception) Creates an instance of the WaitForFailedException . Declaration public WaitForFailedException(string errorMessage, Exception innerException = null) Parameters Type Name Description System.String errorMessage System.Exception innerException Implements System.Runtime.Serialization.ISerializable Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.Extensions.WaitForHelpers.WaitForHelper.html": {
    "href": "api/Bunit.Extensions.WaitForHelpers.WaitForHelper.html",
    "title": "Class WaitForHelper | bUnit",
    "keywords": "Class WaitForHelper Represents a helper class that can wait for a render notifications from a IRenderedFragmentBase type, until a specific timeout is reached. Inheritance System.Object WaitForHelper WaitForAssertionHelper WaitForStateHelper Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.Extensions.WaitForHelpers Assembly : Bunit.Core.dll Syntax public abstract class WaitForHelper : IDisposable Constructors | Improve this Doc View Source WaitForHelper(IRenderedFragmentBase, Func<Boolean>, Nullable<TimeSpan>) Creates an instance of the WaitForHelper type. Declaration protected WaitForHelper(IRenderedFragmentBase renderedFragment, Func<bool> completeChecker, TimeSpan? timeout = default(TimeSpan? )) Parameters Type Name Description IRenderedFragmentBase renderedFragment System.Func < System.Boolean > completeChecker System.Nullable < System.TimeSpan > timeout Properties | Improve this Doc View Source CheckThrowErrorMessage Gets the error message passed to the user when the wait for checker throws an exception. Only used if StopWaitingOnCheckException is true. Declaration protected virtual string CheckThrowErrorMessage { get; } Property Value Type Description System.String | Improve this Doc View Source StopWaitingOnCheckException Gets whether to continue waiting if the wait condition checker throws. Declaration protected abstract bool StopWaitingOnCheckException { get; } Property Value Type Description System.Boolean | Improve this Doc View Source TimeoutErrorMessage Gets the error message passed to the user when the wait for helper times out. Declaration protected virtual string TimeoutErrorMessage { get; } Property Value Type Description System.String | Improve this Doc View Source WaitTask Gets the task that will complete successfully if the check passed before the timeout was reached. The task will complete with an WaitForFailedException exception if the timeout was reached without the check passing. Declaration public Task WaitTask { get; } Property Value Type Description System.Threading.Tasks.Task Methods | Improve this Doc View Source Dispose() Disposes the wait helper and sets the WaitTask to canceled, if it is not already in one of the other completed states. Declaration public void Dispose() Implements System.IDisposable Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.Extensions.WaitForHelpers.WaitForStateHelper.html": {
    "href": "api/Bunit.Extensions.WaitForHelpers.WaitForStateHelper.html",
    "title": "Class WaitForStateHelper | bUnit",
    "keywords": "Class WaitForStateHelper Represents an async wait helper, that will wait for a specified time for a state predicate to pass. Inheritance System.Object WaitForHelper WaitForStateHelper Implements System.IDisposable Inherited Members WaitForHelper.WaitTask WaitForHelper.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.Extensions.WaitForHelpers Assembly : Bunit.Core.dll Syntax public class WaitForStateHelper : WaitForHelper, IDisposable Constructors | Improve this Doc View Source WaitForStateHelper(IRenderedFragmentBase, Func<Boolean>, Nullable<TimeSpan>) Creates an instance of the WaitForStateHelper type, which will wait until the provided statePredicate action returns true, or the timeout is reached (default is one second). The statePredicate is evaluated initially, and then each time the renderedFragment renders. Declaration public WaitForStateHelper(IRenderedFragmentBase renderedFragment, Func<bool> statePredicate, TimeSpan? timeout = default(TimeSpan? )) Parameters Type Name Description IRenderedFragmentBase renderedFragment The render fragment or component to attempt to verify state against. System.Func < System.Boolean > statePredicate The predicate to invoke after each render, which must returns true when the desired state has been reached. System.Nullable < System.TimeSpan > timeout The maximum time to wait for the desired state. Exceptions Type Condition WaitForFailedException Thrown if the statePredicate throw an exception during invocation, or if the timeout has been reached. See the inner exception for details. Properties | Improve this Doc View Source CheckThrowErrorMessage Declaration protected override string CheckThrowErrorMessage { get; } Property Value Type Description System.String Overrides WaitForHelper.CheckThrowErrorMessage | Improve this Doc View Source StopWaitingOnCheckException Declaration protected override bool StopWaitingOnCheckException { get; } Property Value Type Description System.Boolean Overrides WaitForHelper.StopWaitingOnCheckException | Improve this Doc View Source TimeoutErrorMessage Declaration protected override string TimeoutErrorMessage { get; } Property Value Type Description System.String Overrides WaitForHelper.TimeoutErrorMessage Implements System.IDisposable Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.Fixture.html": {
    "href": "api/Bunit.Fixture.html",
    "title": "Class Fixture | bUnit",
    "keywords": "Class Fixture Inheritance System.Object TestContextBase RazorTestBase FixtureBase < Fixture > Fixture Implements ITestContext System.IDisposable Microsoft.AspNetCore.Components.IComponent Inherited Members FixtureBase<Fixture>.DisplayName FixtureBase<Fixture>.ChildContent FixtureBase<Fixture>.Setup FixtureBase<Fixture>.SetupAsync FixtureBase<Fixture>.Test FixtureBase<Fixture>.TestAsync FixtureBase<Fixture>.Tests FixtureBase<Fixture>.TestsAsync FixtureBase<Fixture>.SetParametersAsync(ParameterView) FixtureBase<Fixture>.Validate() FixtureBase<Fixture>.Run(Fixture) RazorTestBase.IsRunning RazorTestBase.Description RazorTestBase.Skip RazorTestBase.Timeout RazorTestBase.RunTest() RazorTestBase.IComponent.Attach(RenderHandle) RazorTestBase.TryRun<T>(Action<T>, T) RazorTestBase.TryRunAsync<T>(Func<T, Task>, T) TestContextBase.Renderer TestContextBase.Services TestContextBase.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Web.dll Syntax public class Fixture : FixtureBase<Fixture>, ITestContext, IDisposable, IComponent Methods | Improve this Doc View Source GetComponentUnderTest() Gets (and renders) the markup/component defined in the <Fixture><ComponentUnderTest>...<ComponentUnderTest/><Fixture/> element. The HTML/component is only rendered the first this method is called. Declaration public IRenderedFragment GetComponentUnderTest() Returns Type Description IRenderedFragment A IRenderedFragmentBase | Improve this Doc View Source GetComponentUnderTest<TComponent>() Gets (and renders) the component of type TComponent defined in the <Fixture><ComponentUnderTest>...<ComponentUnderTest/><Fixture/> element. The HTML/component is only rendered the first this method is called. Declaration public IRenderedComponent<TComponent> GetComponentUnderTest<TComponent>() where TComponent : IComponent Returns Type Description IRenderedComponent <TComponent> A IRenderedComponentBase<TComponent> Type Parameters Name Description TComponent The type of component to render | Improve this Doc View Source GetFragment(String) Gets (and renders) the markup/component defined in the <Fixture><Fragment id=\" id \" >...<Fragment/><Fixture/> element. If id is null/not provided, the component defined in the first <Fragment/> in the <Fixture/> element is returned. The HTML/component is only rendered the first this method is called. Declaration public IRenderedFragment GetFragment(string id = null) Parameters Type Name Description System.String id The id of the fragment where the HTML/component is defined in Razor syntax. Returns Type Description IRenderedFragment A IRenderedFragmentBase | Improve this Doc View Source GetFragment<TComponent>(String) Gets (and renders) the component of type TComponent defined in the <Fixture><Fragment id=\" id \" >...<Fragment/><Fixture/> element. If id is null/not provided, the component defined in the first <Fragment/> in the <Fixture/> element is returned. The HTML/component is only rendered the first this method is called. Declaration public IRenderedComponent<TComponent> GetFragment<TComponent>(string id = null) where TComponent : IComponent Parameters Type Name Description System.String id The id of the fragment where the component is defined in Razor syntax. Returns Type Description IRenderedComponent <TComponent> A IRenderedComponentBase<TComponent> Type Parameters Name Description TComponent The type of component to render | Improve this Doc View Source Run() Declaration protected override Task Run() Returns Type Description System.Threading.Tasks.Task Overrides RazorTestBase.Run() Implements ITestContext System.IDisposable Microsoft.AspNetCore.Components.IComponent Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.FocusEventDispatchExtensions.html": {
    "href": "api/Bunit.FocusEventDispatchExtensions.html",
    "title": "Class FocusEventDispatchExtensions | bUnit",
    "keywords": "Class FocusEventDispatchExtensions Focus event dispatch helper extension methods. Inheritance System.Object FocusEventDispatchExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Web.dll Syntax public static class FocusEventDispatchExtensions Methods | Improve this Doc View Source Blur(IElement, FocusEventArgs) Raises the @onblur event on element , passing the provided event arguments to the event handler. Declaration public static void Blur(this IElement element, FocusEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.FocusEventArgs eventArgs The event arguments to passs the event handler. | Improve this Doc View Source Blur(IElement, String) Raises the @onblur event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.FocusEventArgs object Declaration public static void Blur(this IElement element, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.String type The type of the event. | Improve this Doc View Source BlurAsync(IElement, FocusEventArgs) Raises the @onblur event on element , passing the provided event arguments to the event handler. Declaration public static Task BlurAsync(this IElement element, FocusEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.FocusEventArgs eventArgs The event arguments to passs the event handler. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Focus(IElement, FocusEventArgs) Raises the @onfocus event on element , passing the provided event arguments to the event handler. Declaration public static void Focus(this IElement element, FocusEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.FocusEventArgs eventArgs The event arguments to passs the event handler. | Improve this Doc View Source Focus(IElement, String) Raises the @onfocus event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.FocusEventArgs object Declaration public static void Focus(this IElement element, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.String type The type of the event. | Improve this Doc View Source FocusAsync(IElement, FocusEventArgs) Raises the @onfocus event on element , passing the provided event arguments to the event handler. Declaration public static Task FocusAsync(this IElement element, FocusEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.FocusEventArgs eventArgs The event arguments to passs the event handler. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source FocusIn(IElement, FocusEventArgs) Raises the @onfocusin event on element , passing the provided event arguments to the event handler. Declaration public static void FocusIn(this IElement element, FocusEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.FocusEventArgs eventArgs The event arguments to passs the event handler. | Improve this Doc View Source FocusIn(IElement, String) Raises the @onfocusin event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.FocusEventArgs object Declaration public static void FocusIn(this IElement element, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.String type The type of the event. | Improve this Doc View Source FocusInAsync(IElement, FocusEventArgs) Raises the @onfocusin event on element , passing the provided event arguments to the event handler. Declaration public static Task FocusInAsync(this IElement element, FocusEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.FocusEventArgs eventArgs The event arguments to passs the event handler. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source FocusOut(IElement, FocusEventArgs) Raises the @onfocusout event on element , passing the provided event arguments to the event handler. Declaration public static void FocusOut(this IElement element, FocusEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.FocusEventArgs eventArgs The event arguments to passs the event handler. | Improve this Doc View Source FocusOut(IElement, String) Raises the @onfocusout event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.FocusEventArgs object Declaration public static void FocusOut(this IElement element, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.String type The type of the event. | Improve this Doc View Source FocusOutAsync(IElement, FocusEventArgs) Raises the @onfocusout event on element , passing the provided event arguments to the event handler. Declaration public static Task FocusOutAsync(this IElement element, FocusEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.FocusEventArgs eventArgs The event arguments to passs the event handler. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done."
  },
  "api/Bunit.Fragment.html": {
    "href": "api/Bunit.Fragment.html",
    "title": "Class Fragment | bUnit",
    "keywords": "Class Fragment Represents a component that can be added inside a fixture, whose content can be accessed in Razor-based test. Inheritance System.Object FragmentBase Fragment Implements Microsoft.AspNetCore.Components.IComponent Inherited Members FragmentBase.ChildContent FragmentBase.Attach(RenderHandle) FragmentBase.SetParametersAsync(ParameterView) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Core.dll Syntax public class Fragment : FragmentBase, IComponent Properties | Improve this Doc View Source Id Gets or sets the id of the fragment. Declaration [Parameter] public string Id { get; set; } Property Value Type Description System.String Implements Microsoft.AspNetCore.Components.IComponent Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.GeneralEventDispatchExtensions.html": {
    "href": "api/Bunit.GeneralEventDispatchExtensions.html",
    "title": "Class GeneralEventDispatchExtensions | bUnit",
    "keywords": "Class GeneralEventDispatchExtensions General event dispatch helper extension methods. Inheritance System.Object GeneralEventDispatchExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Web.dll Syntax public static class GeneralEventDispatchExtensions Methods | Improve this Doc View Source Activate(IElement) Raises the @onactivate event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Activate(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source ActivateAsync(IElement) Raises the @onactivate event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task ActivateAsync(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source BeforeActivate(IElement) Raises the @onbeforeactivate event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void BeforeActivate(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source BeforeActivateAsync(IElement) Raises the @onbeforeactivate event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task BeforeActivateAsync(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source BeforeDeactivate(IElement) Raises the @onbeforedeactivate event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void BeforeDeactivate(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source BeforeDeactivateAsync(IElement) Raises the @onbeforedeactivate event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task BeforeDeactivateAsync(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Deactivate(IElement) Raises the @ondeactivate event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Deactivate(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source DeactivateAsync(IElement) Raises the @ondeactivate event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task DeactivateAsync(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Ended(IElement) Raises the @onended event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Ended(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source EndedAsync(IElement) Raises the @onended event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task EndedAsync(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source FullscreenChange(IElement) Raises the @onfullscreenchange event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void FullscreenChange(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source FullscreenChangeAsync(IElement) Raises the @onfullscreenchange event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task FullscreenChangeAsync(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source FullscreenError(IElement) Raises the @onfullscreenerror event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void FullscreenError(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source FullscreenErrorAsync(IElement) Raises the @onfullscreenerror event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task FullscreenErrorAsync(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source LoadedData(IElement) Raises the @onloadeddata event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void LoadedData(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source LoadedDataAsync(IElement) Raises the @onloadeddata event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task LoadedDataAsync(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source LoadedMetadata(IElement) Raises the @onloadedmetadata event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void LoadedMetadata(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source LoadedMetadataAsync(IElement) Raises the @onloadedmetadata event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task LoadedMetadataAsync(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source PointerlockChange(IElement) Raises the @onpointerlockchange event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void PointerlockChange(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source PointerlockChangeAsync(IElement) Raises the @onpointerlockchange event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task PointerlockChangeAsync(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source PointerlockError(IElement) Raises the @onpointerlockerror event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void PointerlockError(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source PointerlockErrorAsync(IElement) Raises the @onpointerlockerror event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task PointerlockErrorAsync(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source ReadystateChange(IElement) Raises the @onreadystatechange event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void ReadystateChange(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source ReadystateChangeAsync(IElement) Raises the @onreadystatechange event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task ReadystateChangeAsync(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Scroll(IElement) Raises the @onscroll event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Scroll(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source ScrollAsync(IElement) Raises the @onscroll event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task ScrollAsync(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source TriggerEventAsync(IElement, String, EventArgs) Raises the event eventName on the element element passing the eventArgs to the event handler. Declaration public static Task TriggerEventAsync(this IElement element, string eventName, EventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.String eventName The name of the event to raise (using on-form, e.g. onclick ). System.EventArgs eventArgs The event arguments to pass to the event handler Returns Type Description System.Threading.Tasks.Task"
  },
  "api/Bunit.html": {
    "href": "api/Bunit.html",
    "title": "Namespace Bunit | bUnit",
    "keywords": "Namespace Bunit Classes BlazorExtensions Extensions for Blazor types. ClipboardEventDispatchExtensions Clipboard event dispatch helper extension methods. CollectionAssertExtensions Collection test assertions CompareToExtensions Extension methods that allows different rendered fragments to be compared to others or strings. ComponentParameterBuilder<TComponent> A builder to set a value for strongly typed ComponentParameters. ComponentParameterExtensions Helpful extensions for working with ComponentParameter and collections of these. ComponentParameterFactory ComponentParameter factory methods. ComponentTestFixture Base class for test classes that contains Razor component tests. ComponentUnderTest Represents a component that can be added inside a RazorTestBase , where a component under test can be defined as the child content. DiffAssertExtensions A collection of AngleSharp.Diffing.Core.IDiff assert extensions and generic assert extensions DiffChangeAssertException Represents an diff change assertion that has failed. DragEventDispatchExtensions Drag event dispatch helper extension methods. ElementNotFoundException Represents a failure to find an element in the searched target using a css selector. ElementRemovedException Represents an exception that is thrown when a wrapped element is no longer available in the DOM tree. Fixture FocusEventDispatchExtensions Focus event dispatch helper extension methods. Fragment Represents a component that can be added inside a fixture, whose content can be accessed in Razor-based test. GeneralEventDispatchExtensions General event dispatch helper extension methods. HtmlEqualException Represents an differences between pieces of markup. InputEventDispatchExtensions Input event dispatch helper extension methods. JSInvokeCountExpectedException Represents a number of unexpected invocation to a MockJSRuntimeInvokeHandler . KeyboardEventDispatchExtensions Keyboard event dispatch helper extension methods. MarkupMatchesAssertExtensions Assert helpers for comparing markup MediaEventDispatchExtensions Media event dispatch helper extension methods. MissingEventHandlerException Represents an exception that is thrown when triggering an event handler failed because it wasn't available on the targeted AngleSharp.Dom.IElement . MouseEventDispatchExtensions Mouse event dispatch helper extension methods. NodePrintExtensions Helper methods for pretty printing markup from AngleSharp.Dom.INode and AngleSharp.Dom.INodeList . PointerEventDispatchExtensions Pointer event dispatch helper extension methods. ProgressEventDispatchExtensions Pointer event dispatch helper extension methods. RenderedFragmentExtensions Helper methods for querying IRenderedFragment . RenderedFragmentWaitForHelperExtensions Helper methods dealing with async rendering during testing. ShouldBeAdditionAssertExtensions A set of addition diff assert extensions ShouldBeRemovalAssertExtensions A set of removal diff assert extensions ShouldBeTextChangeAssertExtensions Verification helpers for text SnapshotTest A component used to create snapshot tests. Snapshot tests takes two child inputs, a TestInput section and a ExpectedOutput section. It then compares the result of rendering both using semantic HTML comparison. TestComponentBase Base test class/test runner, that runs Fixtures defined in razor files. TestContext A test context is a factory that makes it possible to create components under tests. TestContextBase A test context is a factory that makes it possible to create components under tests. TestServiceProvider Represents a System.IServiceProvider and Microsoft.Extensions.DependencyInjection.IServiceCollection as a single type used for test purposes. TouchEventDispatchExtensions Pointer event dispatch helper extension methods. XunitLoggerExtensions Helper method for registering the xUnit test logger. Interfaces IRefreshableElementCollection<T> Represents a AngleSharp.Dom.IElement collection, which queries and finds its elements in an IRenderedFragmentBase , based on a CSS selector. The collection can be refreshed either manually or automatically. IRenderedComponent<TComponent> IRenderedComponentBase<TComponent> Represents a rendered component-under-test. IRenderedFragment Represents a rendered fragment. IRenderedFragmentBase Represents a rendered fragment. ITestContext A test context is a factory that makes it possible to create components under tests."
  },
  "api/Bunit.HtmlEqualException.html": {
    "href": "api/Bunit.HtmlEqualException.html",
    "title": "Class HtmlEqualException | bUnit",
    "keywords": "Class HtmlEqualException Represents an differences between pieces of markup. Inheritance System.Object System.Exception ActualExpectedAssertException HtmlEqualException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Bunit Assembly : Bunit.Web.dll Syntax public class HtmlEqualException : ActualExpectedAssertException, ISerializable Constructors | Improve this Doc View Source HtmlEqualException(IEnumerable<IDiff>, IMarkupFormattable, IMarkupFormattable, String) Creates an instance of the HtmlEqualException type. Declaration public HtmlEqualException(IEnumerable<IDiff> diffs, IMarkupFormattable expected, IMarkupFormattable actual, string userMessage) Parameters Type Name Description System.Collections.Generic.IEnumerable < AngleSharp.Diffing.Core.IDiff > diffs AngleSharp.IMarkupFormattable expected AngleSharp.IMarkupFormattable actual System.String userMessage Implements System.Runtime.Serialization.ISerializable Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.InputEventDispatchExtensions.html": {
    "href": "api/Bunit.InputEventDispatchExtensions.html",
    "title": "Class InputEventDispatchExtensions | bUnit",
    "keywords": "Class InputEventDispatchExtensions Input event dispatch helper extension methods. Inheritance System.Object InputEventDispatchExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Web.dll Syntax public static class InputEventDispatchExtensions Methods | Improve this Doc View Source Change(IElement, ChangeEventArgs) Raises the @onchange event on element , passing the provided eventArgs to the event handler. Declaration public static void Change(this IElement element, ChangeEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.ChangeEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source Change(IElement, Object) Raises the @onchange event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.ChangeEventArgs object Declaration public static void Change(this IElement element, object value) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Object value The new value | Improve this Doc View Source ChangeAsync(IElement, ChangeEventArgs) Raises the @onchange event on element , passing the provided eventArgs to the event handler. Declaration public static Task ChangeAsync(this IElement element, ChangeEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.ChangeEventArgs eventArgs The event arguments to pass to the event handler. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Input(IElement) Raises the @oninput event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Input(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source Input(IElement, ChangeEventArgs) Raises the @oninput event on element , passing the provided eventArgs to the event handler. Declaration public static void Input(this IElement element, ChangeEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.ChangeEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source Input(IElement, String) Raises the @oninput event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.ChangeEventArgs object Declaration public static void Input(this IElement element, string value) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.String value The new value | Improve this Doc View Source InputAsync(IElement) Raises the @oninput event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task InputAsync(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source InputAsync(IElement, ChangeEventArgs) Raises the @oninput event on element , passing the provided eventArgs to the event handler. Declaration public static Task InputAsync(this IElement element, ChangeEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.ChangeEventArgs eventArgs The event arguments to pass to the event handler. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Invalid(IElement) Raises the @oninvalid event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Invalid(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source InvalidAsync(IElement) Raises the @oninvalid event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task InvalidAsync(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Reset(IElement) Raises the @onreset event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Reset(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source ResetAsync(IElement) Raises the @onreset event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task ResetAsync(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Select(IElement) Raises the @onselect event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Select(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source SelectAsync(IElement) Raises the @onselect event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task SelectAsync(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source SelectionChange(IElement) Raises the @onselectionchange event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void SelectionChange(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source SelectionChangeAsync(IElement) Raises the @onselectionchange event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task SelectionChangeAsync(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source SelectStart(IElement) Raises the @onselectstart event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void SelectStart(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source SelectStartAsync(IElement) Raises the @onselectstart event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task SelectStartAsync(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Submit(IElement) Raises the @onsubmit event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Submit(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source SubmitAsync(IElement) Raises the @onsubmit event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task SubmitAsync(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done."
  },
  "api/Bunit.IRefreshableElementCollection-1.html": {
    "href": "api/Bunit.IRefreshableElementCollection-1.html",
    "title": "Interface IRefreshableElementCollection<T> | bUnit",
    "keywords": "Interface IRefreshableElementCollection<T> Represents a AngleSharp.Dom.IElement collection, which queries and finds its elements in an IRenderedFragmentBase , based on a CSS selector. The collection can be refreshed either manually or automatically. Inherited Members System.Collections.Generic.IReadOnlyList<T>.Item[System.Int32] System.Collections.Generic.IReadOnlyCollection<T>.Count System.Collections.Generic.IEnumerable<T>.GetEnumerator() Namespace : Bunit Assembly : Bunit.Web.dll Syntax public interface IRefreshableElementCollection<T> : IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable where T : IElement Type Parameters Name Description T The type of AngleSharp.Dom.IElement in the collection. Properties | Improve this Doc View Source EnableAutoRefresh Gets or sets whether the collection automatically refreshes when the IRenderedFragmentBase changes. Declaration bool EnableAutoRefresh { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Refresh() Trigger a refresh of the elements in the collection, by querying the rendered fragments DOM tree. Declaration void Refresh() Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement) CollectionAssertExtensions.ShouldAllBe<T>(IEnumerable<T>, Action<T>[]) CollectionAssertExtensions.ShouldAllBe<T>(IEnumerable<T>, Action<T, Int32>[])"
  },
  "api/Bunit.IRenderedComponent-1.html": {
    "href": "api/Bunit.IRenderedComponent-1.html",
    "title": "Interface IRenderedComponent<TComponent> | bUnit",
    "keywords": "Interface IRenderedComponent<TComponent> Inherited Members IRenderedComponentBase<TComponent>.Instance IRenderedComponentBase<TComponent>.InvokeAsync(Action) IRenderedComponentBase<TComponent>.Render() IRenderedComponentBase<TComponent>.SetParametersAndRender(ParameterView) IRenderedComponentBase<TComponent>.SetParametersAndRender(ComponentParameter[]) IRenderedComponentBase<TComponent>.SetParametersAndRender(Action<ComponentParameterBuilder<TComponent>>) IRenderedFragment.Markup IRenderedFragment.OnMarkupUpdated IRenderedFragment.Nodes IRenderedFragment.GetChangesSinceFirstRender() IRenderedFragment.GetChangesSinceSnapshot() IRenderedFragment.SaveSnapshot() IRenderedFragmentBase.ComponentId IRenderedFragmentBase.RenderCount IRenderedFragmentBase.OnAfterRender IRenderedFragmentBase.Services Namespace : Bunit Assembly : Bunit.Web.dll Syntax public interface IRenderedComponent<TComponent> : IRenderedComponentBase<TComponent>, IRenderedFragment, IRenderedFragmentBase where TComponent : IComponent Type Parameters Name Description TComponent Extension Methods CompareToExtensions.CompareTo(IRenderedFragment, String) CompareToExtensions.CompareTo(IRenderedFragment, IRenderedFragment) MarkupMatchesAssertExtensions.MarkupMatches(IRenderedFragment, String, String) MarkupMatchesAssertExtensions.MarkupMatches(IRenderedFragment, IRenderedFragment, String) RenderedFragmentExtensions.Find(IRenderedFragment, String) RenderedFragmentExtensions.FindAll(IRenderedFragment, String, Boolean) RenderedFragmentExtensions.FindComponent<TComponent>(IRenderedFragment) RenderedFragmentExtensions.FindComponents<TComponent>(IRenderedFragment) JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.IRenderedComponentBase-1.html": {
    "href": "api/Bunit.IRenderedComponentBase-1.html",
    "title": "Interface IRenderedComponentBase<TComponent> | bUnit",
    "keywords": "Interface IRenderedComponentBase<TComponent> Represents a rendered component-under-test. Inherited Members IRenderedFragmentBase.ComponentId IRenderedFragmentBase.RenderCount IRenderedFragmentBase.OnAfterRender IRenderedFragmentBase.Services Namespace : Bunit Assembly : Bunit.Core.dll Syntax public interface IRenderedComponentBase<TComponent> : IRenderedFragmentBase where TComponent : IComponent Type Parameters Name Description TComponent The type of the component under test Properties | Improve this Doc View Source Instance Gets the component under test Declaration TComponent Instance { get; } Property Value Type Description TComponent Methods | Improve this Doc View Source InvokeAsync(Action) Invokes the given callback in the context of the associated ITestRenderer . Declaration Task InvokeAsync(Action callback) Parameters Type Name Description System.Action callback Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that will be completed when the action has finished executing. | Improve this Doc View Source Render() Render the component under test again. Declaration void Render() | Improve this Doc View Source SetParametersAndRender(ComponentParameter[]) Render the component under test again with the provided parameters . Declaration void SetParametersAndRender(params ComponentParameter[] parameters) Parameters Type Name Description ComponentParameter [] parameters Parameters to pass to the component upon rendered | Improve this Doc View Source SetParametersAndRender(ParameterView) Render the component under test again with the provided parameters . Declaration void SetParametersAndRender(ParameterView parameters) Parameters Type Name Description Microsoft.AspNetCore.Components.ParameterView parameters Parameters to pass to the component upon rendered | Improve this Doc View Source SetParametersAndRender(Action<ComponentParameterBuilder<TComponent>>) Render the component under test again with the provided parameters from the parameterBuilder . Declaration void SetParametersAndRender(Action<ComponentParameterBuilder<TComponent>> parameterBuilder) Parameters Type Name Description System.Action < ComponentParameterBuilder <TComponent>> parameterBuilder An action that receives a ComponentParameterBuilder<TComponent> . Extension Methods RenderedFragmentWaitForHelperExtensions.WaitForState(IRenderedFragmentBase, Func<Boolean>, Nullable<TimeSpan>) RenderedFragmentWaitForHelperExtensions.WaitForAssertion(IRenderedFragmentBase, Action, Nullable<TimeSpan>) JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.IRenderedFragment.html": {
    "href": "api/Bunit.IRenderedFragment.html",
    "title": "Interface IRenderedFragment | bUnit",
    "keywords": "Interface IRenderedFragment Represents a rendered fragment. Inherited Members IRenderedFragmentBase.ComponentId IRenderedFragmentBase.RenderCount IRenderedFragmentBase.OnAfterRender IRenderedFragmentBase.Services Namespace : Bunit Assembly : Bunit.Web.dll Syntax public interface IRenderedFragment : IRenderedFragmentBase Properties | Improve this Doc View Source Markup Gets the HTML markup from the rendered fragment/component. Declaration string Markup { get; } Property Value Type Description System.String | Improve this Doc View Source Nodes Gets the AngleSharp AngleSharp.Dom.INodeList based on the HTML markup from the rendered fragment/component. Declaration INodeList Nodes { get; } Property Value Type Description AngleSharp.Dom.INodeList Methods | Improve this Doc View Source GetChangesSinceFirstRender() Performs a comparison of the markup produced by the initial rendering of the fragment or component under test with the current rendering of the fragment or component under test. Declaration IReadOnlyList<IDiff> GetChangesSinceFirstRender() Returns Type Description System.Collections.Generic.IReadOnlyList < AngleSharp.Diffing.Core.IDiff > A list of differences found. | Improve this Doc View Source GetChangesSinceSnapshot() Performs a comparison of the markup produced by the rendering of the fragment or component under test at the time the SaveSnapshot() was called with the current rendering of the fragment or component under test. Declaration IReadOnlyList<IDiff> GetChangesSinceSnapshot() Returns Type Description System.Collections.Generic.IReadOnlyList < AngleSharp.Diffing.Core.IDiff > A list of differences found. | Improve this Doc View Source SaveSnapshot() Saves the markup from the current rendering of the fragment or component under test. Use the method GetChangesSinceSnapshot() later to get the difference between the snapshot and the rendered markup at that time. Declaration void SaveSnapshot() Events | Improve this Doc View Source OnMarkupUpdated An event that is raised after the markup of the IRenderedFragmentBase is updated. Declaration event Action OnMarkupUpdated Event Type Type Description System.Action Extension Methods CompareToExtensions.CompareTo(IRenderedFragment, String) CompareToExtensions.CompareTo(IRenderedFragment, IRenderedFragment) MarkupMatchesAssertExtensions.MarkupMatches(IRenderedFragment, String, String) MarkupMatchesAssertExtensions.MarkupMatches(IRenderedFragment, IRenderedFragment, String) RenderedFragmentExtensions.Find(IRenderedFragment, String) RenderedFragmentExtensions.FindAll(IRenderedFragment, String, Boolean) RenderedFragmentExtensions.FindComponent<TComponent>(IRenderedFragment) RenderedFragmentExtensions.FindComponents<TComponent>(IRenderedFragment) JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.IRenderedFragmentBase.html": {
    "href": "api/Bunit.IRenderedFragmentBase.html",
    "title": "Interface IRenderedFragmentBase | bUnit",
    "keywords": "Interface IRenderedFragmentBase Represents a rendered fragment. Namespace : Bunit Assembly : Bunit.Core.dll Syntax public interface IRenderedFragmentBase Properties | Improve this Doc View Source ComponentId Gets the id of the rendered component or fragment. Declaration int ComponentId { get; } Property Value Type Description System.Int32 | Improve this Doc View Source RenderCount Gets the total number times the fragment has been through its render life-cycle. Declaration int RenderCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Services Gets the System.IServiceProvider used when rendering the component. Declaration IServiceProvider Services { get; } Property Value Type Description System.IServiceProvider Events | Improve this Doc View Source OnAfterRender Adds or removes an event handler that will be triggered after each render of this IRenderedFragmentBase . Declaration event Action OnAfterRender Event Type Type Description System.Action Extension Methods RenderedFragmentWaitForHelperExtensions.WaitForState(IRenderedFragmentBase, Func<Boolean>, Nullable<TimeSpan>) RenderedFragmentWaitForHelperExtensions.WaitForAssertion(IRenderedFragmentBase, Action, Nullable<TimeSpan>) JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.ITestContext.html": {
    "href": "api/Bunit.ITestContext.html",
    "title": "Interface ITestContext | bUnit",
    "keywords": "Interface ITestContext A test context is a factory that makes it possible to create components under tests. Inherited Members System.IDisposable.Dispose() Namespace : Bunit Assembly : Bunit.Core.dll Syntax public interface ITestContext : IDisposable Properties | Improve this Doc View Source Renderer Gets the renderer used by the test context. Declaration ITestRenderer Renderer { get; } Property Value Type Description ITestRenderer | Improve this Doc View Source Services Gets the service collection and service provider that is used when a component is rendered by the test context. Declaration TestServiceProvider Services { get; } Property Value Type Description TestServiceProvider Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.JSInvokeCountExpectedException.html": {
    "href": "api/Bunit.JSInvokeCountExpectedException.html",
    "title": "Class JSInvokeCountExpectedException | bUnit",
    "keywords": "Class JSInvokeCountExpectedException Represents a number of unexpected invocation to a MockJSRuntimeInvokeHandler . Inheritance System.Object System.Exception JSInvokeCountExpectedException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Bunit Assembly : Bunit.Web.dll Syntax public class JSInvokeCountExpectedException : Exception, ISerializable Constructors | Improve this Doc View Source JSInvokeCountExpectedException(String, Int32, Int32, String, String) Creates an instance of the JSInvokeCountExpectedException . Declaration public JSInvokeCountExpectedException(string identifier, int expectedCount, int actualCount, string assertMethod, string userMessage = null) Parameters Type Name Description System.String identifier System.Int32 expectedCount System.Int32 actualCount System.String assertMethod System.String userMessage Properties | Improve this Doc View Source ActualInvocationCount Gets the actual invocation count. Declaration public int ActualInvocationCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source ExpectedInvocationCount Gets the expected invocation count. Declaration public int ExpectedInvocationCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Identifier Gets the identifier. Declaration public string Identifier { get; } Property Value Type Description System.String Implements System.Runtime.Serialization.ISerializable Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.KeyboardEventDispatchExtensions.html": {
    "href": "api/Bunit.KeyboardEventDispatchExtensions.html",
    "title": "Class KeyboardEventDispatchExtensions | bUnit",
    "keywords": "Class KeyboardEventDispatchExtensions Keyboard event dispatch helper extension methods. Inheritance System.Object KeyboardEventDispatchExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Web.dll Syntax public static class KeyboardEventDispatchExtensions Methods | Improve this Doc View Source KeyDown(IElement, KeyboardEventArgs) Raises the @onkeydown event on element , passing the provided eventArgs to the event handler. Declaration public static void KeyDown(this IElement element, KeyboardEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.KeyboardEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source KeyDown(IElement, String, String, Single, Boolean, Boolean, Boolean, Boolean, Boolean, String) Raises the @onkeydown event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.KeyboardEventArgs object Declaration public static void KeyDown(this IElement element, string key, string code = null, float location = 0F, bool repeat = false, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.String key The key value of the key represented by the event. If the value has a printed representation, this attribute's value is the same as the char attribute. Otherwise, it's one of the key value strings specified in 'Key values'. If the key can't be identified, this is the string \"Unidentified\" System.String code Holds a string that identifies the physical key being pressed. The value is not affected by the current keyboard layout or modifier state, so a particular key will always return the same value. System.Single location The location of the key on the device. System.Boolean repeat true if a key has been depressed long enough to trigger key repetition, otherwise false. System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type The type of the event. | Improve this Doc View Source KeyDownAsync(IElement, KeyboardEventArgs) Raises the @onkeydown event on element , passing the provided eventArgs to the event handler. Declaration public static Task KeyDownAsync(this IElement element, KeyboardEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element Microsoft.AspNetCore.Components.Web.KeyboardEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source KeyPress(IElement, KeyboardEventArgs) Raises the @onkeypress event on element , passing the provided eventArgs to the event handler. Declaration public static void KeyPress(this IElement element, KeyboardEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.KeyboardEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source KeyPress(IElement, String, String, Single, Boolean, Boolean, Boolean, Boolean, Boolean, String) Raises the @onkeypress event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.KeyboardEventArgs object Declaration public static void KeyPress(this IElement element, string key, string code = null, float location = 0F, bool repeat = false, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.String key The key value of the key represented by the event. If the value has a printed representation, this attribute's value is the same as the char attribute. Otherwise, it's one of the key value strings specified in 'Key values'. If the key can't be identified, this is the string \"Unidentified\" System.String code Holds a string that identifies the physical key being pressed. The value is not affected by the current keyboard layout or modifier state, so a particular key will always return the same value. System.Single location The location of the key on the device. System.Boolean repeat true if a key has been depressed long enough to trigger key repetition, otherwise false. System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type The type of the event. | Improve this Doc View Source KeyPressAsync(IElement, KeyboardEventArgs) Raises the @onkeypress event on element , passing the provided eventArgs to the event handler. Declaration public static Task KeyPressAsync(this IElement element, KeyboardEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element Microsoft.AspNetCore.Components.Web.KeyboardEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source KeyUp(IElement, KeyboardEventArgs) Raises the @onkeyup event on element , passing the provided eventArgs to the event handler. Declaration public static void KeyUp(this IElement element, KeyboardEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.KeyboardEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source KeyUp(IElement, String, String, Single, Boolean, Boolean, Boolean, Boolean, Boolean, String) Raises the @onkeyup event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.KeyboardEventArgs object Declaration public static void KeyUp(this IElement element, string key, string code = null, float location = 0F, bool repeat = false, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.String key The key value of the key represented by the event. If the value has a printed representation, this attribute's value is the same as the char attribute. Otherwise, it's one of the key value strings specified in 'Key values'. If the key can't be identified, this is the string \"Unidentified\" System.String code Holds a string that identifies the physical key being pressed. The value is not affected by the current keyboard layout or modifier state, so a particular key will always return the same value. System.Single location The location of the key on the device. System.Boolean repeat true if a key has been depressed long enough to trigger key repetition, otherwise false. System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type The type of the event. | Improve this Doc View Source KeyUpAsync(IElement, KeyboardEventArgs) Raises the @onkeyup event on element , passing the provided eventArgs to the event handler. Declaration public static Task KeyUpAsync(this IElement element, KeyboardEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element Microsoft.AspNetCore.Components.Web.KeyboardEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done."
  },
  "api/Bunit.MarkupMatchesAssertExtensions.html": {
    "href": "api/Bunit.MarkupMatchesAssertExtensions.html",
    "title": "Class MarkupMatchesAssertExtensions | bUnit",
    "keywords": "Class MarkupMatchesAssertExtensions Assert helpers for comparing markup Inheritance System.Object MarkupMatchesAssertExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Web.dll Syntax public static class MarkupMatchesAssertExtensions Methods | Improve this Doc View Source MarkupMatches(INode, INodeList, String) Verifies that the actual AngleSharp.Dom.INode matches the expected AngleSharp.Dom.INodeList , using the HtmlComparer type. Declaration public static void MarkupMatches(this INode actual, INodeList expected, string userMessage = null) Parameters Type Name Description AngleSharp.Dom.INode actual The node to verify. AngleSharp.Dom.INodeList expected The expected list of nodes. System.String userMessage A custom user message to display in case the verification fails. Exceptions Type Condition HtmlEqualException Thrown when the actual markup does not match the expected markup. | Improve this Doc View Source MarkupMatches(INode, IRenderedFragment, String) Verifies that the actual AngleSharp.Dom.INode matches the rendered markup from the expected IRenderedFragmentBase , using the HtmlComparer type. Declaration public static void MarkupMatches(this INode actual, IRenderedFragment expected, string userMessage = null) Parameters Type Name Description AngleSharp.Dom.INode actual The node to verify. IRenderedFragment expected The expected rendered fragment. System.String userMessage A custom user message to display in case the verification fails. Exceptions Type Condition HtmlEqualException Thrown when the actual markup does not match the expected markup. | Improve this Doc View Source MarkupMatches(INode, String, String) Verifies that the actual AngleSharp.Dom.INode matches the expected markup, using the HtmlComparer type. Declaration public static void MarkupMatches(this INode actual, string expected, string userMessage = null) Parameters Type Name Description AngleSharp.Dom.INode actual The node to verify. System.String expected The expected markup. System.String userMessage A custom user message to display in case the verification fails. Exceptions Type Condition HtmlEqualException Thrown when the actual markup does not match the expected markup. | Improve this Doc View Source MarkupMatches(INodeList, INode, String) Verifies that the actual AngleSharp.Dom.INodeList matches the expected AngleSharp.Dom.INode , using the HtmlComparer type. Declaration public static void MarkupMatches(this INodeList actual, INode expected, string userMessage = null) Parameters Type Name Description AngleSharp.Dom.INodeList actual The list of nodes to verify. AngleSharp.Dom.INode expected The expected node. System.String userMessage A custom user message to display in case the verification fails. Exceptions Type Condition HtmlEqualException Thrown when the actual markup does not match the expected markup. | Improve this Doc View Source MarkupMatches(INodeList, INodeList, String) Verifies that the actual AngleSharp.Dom.INodeList matches the expected AngleSharp.Dom.INodeList , using the HtmlComparer type. Declaration public static void MarkupMatches(this INodeList actual, INodeList expected, string userMessage = null) Parameters Type Name Description AngleSharp.Dom.INodeList actual The list of nodes to verify. AngleSharp.Dom.INodeList expected The expected list of nodes. System.String userMessage A custom user message to display in case the verification fails. Exceptions Type Condition HtmlEqualException Thrown when the actual markup does not match the expected markup. | Improve this Doc View Source MarkupMatches(INodeList, IRenderedFragment, String) Verifies that the actual AngleSharp.Dom.INodeList matches the rendered markup from the expected IRenderedFragmentBase , using the HtmlComparer type. Declaration public static void MarkupMatches(this INodeList actual, IRenderedFragment expected, string userMessage = null) Parameters Type Name Description AngleSharp.Dom.INodeList actual The list of nodes to verify. IRenderedFragment expected The expected rendered fragment. System.String userMessage A custom user message to display in case the verification fails. Exceptions Type Condition HtmlEqualException Thrown when the actual markup does not match the expected markup. | Improve this Doc View Source MarkupMatches(INodeList, String, String) Verifies that the actual AngleSharp.Dom.INodeList matches the expected markup, using the HtmlComparer type. Declaration public static void MarkupMatches(this INodeList actual, string expected, string userMessage = null) Parameters Type Name Description AngleSharp.Dom.INodeList actual The list of nodes to verify. System.String expected The expected markup. System.String userMessage A custom user message to display in case the verification fails. Exceptions Type Condition HtmlEqualException Thrown when the actual markup does not match the expected markup. | Improve this Doc View Source MarkupMatches(IRenderedFragment, IRenderedFragment, String) Verifies that the rendered markup from the actual IRenderedFragmentBase matches the rendered markup from the expected IRenderedFragmentBase , using the HtmlComparer type. Declaration public static void MarkupMatches(this IRenderedFragment actual, IRenderedFragment expected, string userMessage = null) Parameters Type Name Description IRenderedFragment actual The rendered fragment to verify. IRenderedFragment expected The expected rendered fragment. System.String userMessage A custom user message to display in case the verification fails. Exceptions Type Condition HtmlEqualException Thrown when the actual markup does not match the expected markup. | Improve this Doc View Source MarkupMatches(IRenderedFragment, String, String) Verifies that the rendered markup from the actual IRenderedFragmentBase matches the expected markup, using the HtmlComparer type. Declaration public static void MarkupMatches(this IRenderedFragment actual, string expected, string userMessage = null) Parameters Type Name Description IRenderedFragment actual The rendered fragment to verify. System.String expected The expected markup. System.String userMessage A custom user message to display in case the verification fails. Exceptions Type Condition HtmlEqualException Thrown when the actual markup does not match the expected markup. | Improve this Doc View Source MarkupMatches(String, INode, String) Verifies that the rendered markup from the actual markup fragment matches the expected AngleSharp.Dom.INode , using the HtmlComparer type. Declaration public static void MarkupMatches(this string actual, INode expected, string userMessage = null) Parameters Type Name Description System.String actual The markup fragment to verify. AngleSharp.Dom.INode expected The expected AngleSharp.Dom.INode . System.String userMessage A custom user message to display in case the verification fails. Exceptions Type Condition HtmlEqualException Thrown when the actual markup does not match the expected markup. | Improve this Doc View Source MarkupMatches(String, INodeList, String) Verifies that the rendered markup from the actual markup fragment matches the expected AngleSharp.Dom.INodeList , using the HtmlComparer type. Declaration public static void MarkupMatches(this string actual, INodeList expected, string userMessage = null) Parameters Type Name Description System.String actual The markup fragment to verify. AngleSharp.Dom.INodeList expected The expected AngleSharp.Dom.INodeList . System.String userMessage A custom user message to display in case the verification fails. Exceptions Type Condition HtmlEqualException Thrown when the actual markup does not match the expected markup. | Improve this Doc View Source MarkupMatches(String, IRenderedFragment, String) Verifies that the rendered markup from the actual markup fragment matches the expected IRenderedFragmentBase , using the HtmlComparer type. Declaration public static void MarkupMatches(this string actual, IRenderedFragment expected, string userMessage = null) Parameters Type Name Description System.String actual The markup fragment to verify. IRenderedFragment expected The expected IRenderedFragmentBase . System.String userMessage A custom user message to display in case the verification fails. Exceptions Type Condition HtmlEqualException Thrown when the actual markup does not match the expected markup. | Improve this Doc View Source MarkupMatches(String, String, String) Verifies that the rendered markup from the actual markup fragment matches the expected markup fragment, using the HtmlComparer type. Declaration public static void MarkupMatches(this string actual, string expected, string userMessage = null) Parameters Type Name Description System.String actual The markup fragment to verify. System.String expected The expected markup fragment. System.String userMessage A custom user message to display in case the verification fails. Exceptions Type Condition HtmlEqualException Thrown when the actual markup does not match the expected markup."
  },
  "api/Bunit.MediaEventDispatchExtensions.html": {
    "href": "api/Bunit.MediaEventDispatchExtensions.html",
    "title": "Class MediaEventDispatchExtensions | bUnit",
    "keywords": "Class MediaEventDispatchExtensions Media event dispatch helper extension methods. Inheritance System.Object MediaEventDispatchExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Web.dll Syntax public static class MediaEventDispatchExtensions Methods | Improve this Doc View Source CanPlay(IElement) Raises the @oncanplay event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void CanPlay(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source CanPlayAsync(IElement) Raises the @oncanplay event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task CanPlayAsync(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source CanPlayThrough(IElement) Raises the @oncanplaythrough event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void CanPlayThrough(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source CanPlayThroughAsync(IElement) Raises the @oncanplaythrough event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task CanPlayThroughAsync(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source CueChange(IElement) Raises the @oncuechange event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void CueChange(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source CueChangeAsync(IElement) Raises the @oncuechange event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task CueChangeAsync(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source DurationChange(IElement) Raises the @ondurationchange event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void DurationChange(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source DurationChangeAsync(IElement) Raises the @ondurationchange event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task DurationChangeAsync(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Emptied(IElement) Raises the @onemptied event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Emptied(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source EmptiedAsync(IElement) Raises the @onemptied event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task EmptiedAsync(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Pause(IElement) Raises the @onpause event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Pause(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source PauseAsync(IElement) Raises the @onpause event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task PauseAsync(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Play(IElement) Raises the @onplay event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Play(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source PlayAsync(IElement) Raises the @onplay event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task PlayAsync(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Playing(IElement) Raises the @onplaying event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Playing(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source PlayingAsync(IElement) Raises the @onplaying event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task PlayingAsync(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source RateChange(IElement) Raises the @onratechange event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void RateChange(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source RateChangeAsync(IElement) Raises the @onratechange event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task RateChangeAsync(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Seeked(IElement) Raises the @onseeked event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Seeked(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source SeekedAsync(IElement) Raises the @onseeked event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task SeekedAsync(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Seeking(IElement) Raises the @onseeking event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Seeking(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source SeekingAsync(IElement) Raises the @onseeking event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task SeekingAsync(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Stalled(IElement) Raises the @onstalled event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Stalled(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source StalledAsync(IElement) Raises the @onstalled event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task StalledAsync(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Stop(IElement) Raises the @onstop event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Stop(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source StopAsync(IElement) Raises the @onstop event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task StopAsync(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Suspend(IElement) Raises the @onsuspend event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Suspend(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source SuspendAsync(IElement) Raises the @onsuspend event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task SuspendAsync(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source TimeUpdate(IElement) Raises the @ontimeupdate event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void TimeUpdate(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source TimeUpdateAsync(IElement) Raises the @ontimeupdate event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task TimeUpdateAsync(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source VolumeChange(IElement) Raises the @onvolumechange event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void VolumeChange(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source VolumeChangeAsync(IElement) Raises the @onvolumechange event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task VolumeChangeAsync(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Waiting(IElement) Raises the @onwaiting event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Waiting(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source WaitingAsync(IElement) Raises the @onwaiting event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task WaitingAsync(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done."
  },
  "api/Bunit.MissingEventHandlerException.html": {
    "href": "api/Bunit.MissingEventHandlerException.html",
    "title": "Class MissingEventHandlerException | bUnit",
    "keywords": "Class MissingEventHandlerException Represents an exception that is thrown when triggering an event handler failed because it wasn't available on the targeted AngleSharp.Dom.IElement . Inheritance System.Object System.Exception MissingEventHandlerException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Bunit Assembly : Bunit.Web.dll Syntax public class MissingEventHandlerException : Exception, ISerializable Constructors | Improve this Doc View Source MissingEventHandlerException(IElement, String) Creates an instance of the MissingEventHandlerException type. Declaration public MissingEventHandlerException(IElement element, string missingEventName) Parameters Type Name Description AngleSharp.Dom.IElement element System.String missingEventName Implements System.Runtime.Serialization.ISerializable Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.MouseEventDispatchExtensions.html": {
    "href": "api/Bunit.MouseEventDispatchExtensions.html",
    "title": "Class MouseEventDispatchExtensions | bUnit",
    "keywords": "Class MouseEventDispatchExtensions Mouse event dispatch helper extension methods. Inheritance System.Object MouseEventDispatchExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Web.dll Syntax public static class MouseEventDispatchExtensions Methods | Improve this Doc View Source Click(IElement, MouseEventArgs) Raises the @onclick event on element , passing the provided eventArgs to the event handler. Declaration public static void Click(this IElement element, MouseEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.MouseEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source Click(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String) Raises the @onclick event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.MouseEventArgs object Declaration public static void Click(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. | Improve this Doc View Source ClickAsync(IElement, MouseEventArgs) Raises the @onclick event on element , passing the provided eventArgs to the event handler. Declaration public static Task ClickAsync(this IElement element, MouseEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.MouseEventArgs eventArgs The event arguments to pass to the event handler. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source ContextMenu(IElement, MouseEventArgs) Raises the @oncontextmenu event on element , passing the provided eventArgs to the event handler. Declaration public static void ContextMenu(this IElement element, MouseEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.MouseEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source ContextMenu(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String) Raises the @oncontextmenu event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.MouseEventArgs object Declaration public static void ContextMenu(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. | Improve this Doc View Source ContextMenuAsync(IElement, MouseEventArgs) Raises the @oncontextmenu event on element , passing the provided eventArgs to the event handler. Declaration public static Task ContextMenuAsync(this IElement element, MouseEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.MouseEventArgs eventArgs The event arguments to pass to the event handler. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source DoubleClick(IElement, MouseEventArgs) Raises the @ondblclick event on element , passing the provided eventArgs to the event handler. Declaration public static void DoubleClick(this IElement element, MouseEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.MouseEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source DoubleClick(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String) Raises the @ondblclick event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.MouseEventArgs object Declaration public static void DoubleClick(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. | Improve this Doc View Source DoubleClickAsync(IElement, MouseEventArgs) Raises the @ondblclick event on element , passing the provided eventArgs to the event handler. Declaration public static Task DoubleClickAsync(this IElement element, MouseEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.MouseEventArgs eventArgs The event arguments to pass to the event handler. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source MouseDown(IElement, MouseEventArgs) Raises the @onmousedown event on element , passing the provided eventArgs to the event handler. Declaration public static void MouseDown(this IElement element, MouseEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.MouseEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source MouseDown(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String) Raises the @onmousedown event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.MouseEventArgs object Declaration public static void MouseDown(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. | Improve this Doc View Source MouseDownAsync(IElement, MouseEventArgs) Raises the @onmousedown event on element , passing the provided eventArgs to the event handler. Declaration public static Task MouseDownAsync(this IElement element, MouseEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.MouseEventArgs eventArgs The event arguments to pass to the event handler. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source MouseMove(IElement, MouseEventArgs) Raises the @onmousemove event on element , passing the provided eventArgs to the event handler. Declaration public static void MouseMove(this IElement element, MouseEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.MouseEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source MouseMove(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String) Raises the @onmousemove event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.MouseEventArgs object Declaration public static void MouseMove(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. | Improve this Doc View Source MouseMoveAsync(IElement, MouseEventArgs) Raises the @onmousemove event on element , passing the provided eventArgs to the event handler. Declaration public static Task MouseMoveAsync(this IElement element, MouseEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.MouseEventArgs eventArgs The event arguments to pass to the event handler. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source MouseOut(IElement, MouseEventArgs) Raises the @onmouseout event on element , passing the provided eventArgs to the event handler. Declaration public static void MouseOut(this IElement element, MouseEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.MouseEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source MouseOut(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String) Raises the @onmouseout event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.MouseEventArgs object Declaration public static void MouseOut(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. | Improve this Doc View Source MouseOutAsync(IElement, MouseEventArgs) Raises the @onmouseout event on element , passing the provided eventArgs to the event handler. Declaration public static Task MouseOutAsync(this IElement element, MouseEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.MouseEventArgs eventArgs The event arguments to pass to the event handler. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source MouseOver(IElement, MouseEventArgs) Raises the @onmouseover event on element , passing the provided eventArgs to the event handler. Declaration public static void MouseOver(this IElement element, MouseEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.MouseEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source MouseOver(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String) Raises the @onmouseover event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.MouseEventArgs object Declaration public static void MouseOver(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. | Improve this Doc View Source MouseOverAsync(IElement, MouseEventArgs) Raises the @onmouseover event on element , passing the provided eventArgs to the event handler. Declaration public static Task MouseOverAsync(this IElement element, MouseEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.MouseEventArgs eventArgs The event arguments to pass to the event handler. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source MouseUp(IElement, MouseEventArgs) Raises the @onmouseup event on element , passing the provided eventArgs to the event handler. Declaration public static void MouseUp(this IElement element, MouseEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.MouseEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source MouseUp(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String) Raises the @onmouseup event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.MouseEventArgs object Declaration public static void MouseUp(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. | Improve this Doc View Source MouseUpAsync(IElement, MouseEventArgs) Raises the @onmouseup event on element , passing the provided eventArgs to the event handler. Declaration public static Task MouseUpAsync(this IElement element, MouseEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.MouseEventArgs eventArgs The event arguments to pass to the event handler. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source MouseWheel(IElement, WheelEventArgs) Raises the @onmousewheel event on element , passing the provided eventArgs to the event handler. Declaration public static void MouseWheel(this IElement element, WheelEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.WheelEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source MouseWheel(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String, Double, Double, Double, Int64) Raises the @onmousewheel event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.MouseEventArgs object Declaration public static void MouseWheel(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null, double deltaX = 0, double deltaY = 0, double deltaZ = 0, long deltaMode = 0L) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. System.Double deltaX The horizontal scroll amount. System.Double deltaY The vertical scroll amount. System.Double deltaZ The scroll amount for the z-axis. System.Int64 deltaMode The unit of the delta values scroll amount. | Improve this Doc View Source MouseWheelAsync(IElement, WheelEventArgs) Raises the @onmousewheel event on element , passing the provided eventArgs to the event handler. Declaration public static Task MouseWheelAsync(this IElement element, WheelEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.WheelEventArgs eventArgs The event arguments to pass to the event handler. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Wheel(IElement, WheelEventArgs) Raises the @onwheel event on element , passing the provided eventArgs to the event handler. Declaration public static void Wheel(this IElement element, WheelEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.WheelEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source Wheel(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String, Double, Double, Double, Int64) Raises the @onwheel event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.MouseEventArgs object Declaration public static void Wheel(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null, double deltaX = 0, double deltaY = 0, double deltaZ = 0, long deltaMode = 0L) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. System.Double deltaX The horizontal scroll amount. System.Double deltaY The vertical scroll amount. System.Double deltaZ The scroll amount for the z-axis. System.Int64 deltaMode The unit of the delta values scroll amount. | Improve this Doc View Source WheelAsync(IElement, WheelEventArgs) Raises the @onwheel event on element , passing the provided eventArgs to the event handler. Declaration public static Task WheelAsync(this IElement element, WheelEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.WheelEventArgs eventArgs The event arguments to pass to the event handler. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done."
  },
  "api/Bunit.NodePrintExtensions.html": {
    "href": "api/Bunit.NodePrintExtensions.html",
    "title": "Class NodePrintExtensions | bUnit",
    "keywords": "Class NodePrintExtensions Helper methods for pretty printing markup from AngleSharp.Dom.INode and AngleSharp.Dom.INodeList . Inheritance System.Object NodePrintExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Web.dll Syntax public static class NodePrintExtensions Methods | Improve this Doc View Source ToDiffMarkup(IMarkupFormattable) Uses the DiffMarkupFormatter to generate a HTML markup string from a AngleSharp.IMarkupFormattable markupFormattable . The generated HTML markup will NOT include the internal Blazor attributes added to elements. Declaration public static string ToDiffMarkup(this IMarkupFormattable markupFormattable) Parameters Type Name Description AngleSharp.IMarkupFormattable markupFormattable Returns Type Description System.String | Improve this Doc View Source ToDiffMarkup(IEnumerable<INode>) Uses the DiffMarkupFormatter to generate a HTML markup string from a System.Collections.Generic.IEnumerable<T> nodes . The generated HTML markup will NOT include the internal Blazor attributes added to elements. Declaration public static string ToDiffMarkup(this IEnumerable<INode> nodes) Parameters Type Name Description System.Collections.Generic.IEnumerable < AngleSharp.Dom.INode > nodes Returns Type Description System.String | Improve this Doc View Source ToHtml(IEnumerable<INode>, TextWriter, IMarkupFormatter) Writes the serialization of the node guided by the formatter. Declaration public static void ToHtml(this IEnumerable<INode> nodes, TextWriter writer, IMarkupFormatter formatter) Parameters Type Name Description System.Collections.Generic.IEnumerable < AngleSharp.Dom.INode > nodes The nodes to serialize. System.IO.TextWriter writer The output target of the serialization. AngleSharp.IMarkupFormatter formatter The formatter to use. | Improve this Doc View Source ToMarkup(IMarkupFormattable) Uses the AngleSharp.Html.PrettyMarkupFormatter to generate a HTML markup from a AngleSharp.IMarkupFormattable markupFormattable . Declaration public static string ToMarkup(this IMarkupFormattable markupFormattable) Parameters Type Name Description AngleSharp.IMarkupFormattable markupFormattable Returns Type Description System.String | Improve this Doc View Source ToMarkup(IEnumerable<INode>) Uses the AngleSharp.Html.PrettyMarkupFormatter to generate a HTML markup string from a System.Collections.Generic.IEnumerable<T> nodes . Declaration public static string ToMarkup(this IEnumerable<INode> nodes) Parameters Type Name Description System.Collections.Generic.IEnumerable < AngleSharp.Dom.INode > nodes Returns Type Description System.String | Improve this Doc View Source ToMarkupElementOnly(IElement) Converts an AngleSharp.Dom.IElement into a HTML markup string, with only its tag and attributes included in the output. All child nodes are skipped. Declaration public static string ToMarkupElementOnly(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element Returns Type Description System.String"
  },
  "api/Bunit.PointerEventDispatchExtensions.html": {
    "href": "api/Bunit.PointerEventDispatchExtensions.html",
    "title": "Class PointerEventDispatchExtensions | bUnit",
    "keywords": "Class PointerEventDispatchExtensions Pointer event dispatch helper extension methods. Inheritance System.Object PointerEventDispatchExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Web.dll Syntax public static class PointerEventDispatchExtensions Methods | Improve this Doc View Source GotPointerCapture(IElement, PointerEventArgs) Raises the @ongotpointercapture event on element , passing the provided eventArgs to the event handler. Declaration public static void GotPointerCapture(this IElement element, PointerEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.PointerEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source GotPointerCapture(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String, Int64, Single, Single, Single, Single, Single, String, Boolean) Raises the @ongotpointercapture event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.PointerEventArgs object. Declaration public static void GotPointerCapture(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null, long pointerId = 0L, float width = 0F, float height = 0F, float pressure = 0F, float tiltX = 0F, float tiltY = 0F, string pointerType = null, bool isPrimary = false) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. System.Int64 pointerId A unique identifier for the pointer causing the event. System.Single width The width (magnitude on the X axis), in CSS pixels, of the contact geometry of the pointer. System.Single height The height (magnitude on the Y axis), in CSS pixels, of the contact geometry of the pointer. System.Single pressure The normalized pressure of the pointer input in the range of 0 to 1, where 0 and 1 represent the minimum and maximum pressure the hardware is capable of detecting, respectively. System.Single tiltX The plane angle (in degrees, in the range of -90 to 90) between the Y-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the Y axis. System.Single tiltY The plane angle (in degrees, in the range of -90 to 90) between the X-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the X axis. System.String pointerType Indicates the device type that caused the event. Must be one of the strings mouse, pen or touch, or an empty string. System.Boolean isPrimary Indicates if the pointer represents the primary pointer of this pointer type. | Improve this Doc View Source GotPointerCaptureAsync(IElement, PointerEventArgs) Raises the @ongotpointercapture event on element , passing the provided eventArgs to the event handler. Declaration public static Task GotPointerCaptureAsync(this IElement element, PointerEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element Microsoft.AspNetCore.Components.Web.PointerEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source LostPointerCapture(IElement, PointerEventArgs) Raises the @onlostpointercapture event on element , passing the provided eventArgs to the event handler. Declaration public static void LostPointerCapture(this IElement element, PointerEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.PointerEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source LostPointerCapture(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String, Int64, Single, Single, Single, Single, Single, String, Boolean) Raises the @onlostpointercapture event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.PointerEventArgs object. Declaration public static void LostPointerCapture(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null, long pointerId = 0L, float width = 0F, float height = 0F, float pressure = 0F, float tiltX = 0F, float tiltY = 0F, string pointerType = null, bool isPrimary = false) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. System.Int64 pointerId A unique identifier for the pointer causing the event. System.Single width The width (magnitude on the X axis), in CSS pixels, of the contact geometry of the pointer. System.Single height The height (magnitude on the Y axis), in CSS pixels, of the contact geometry of the pointer. System.Single pressure The normalized pressure of the pointer input in the range of 0 to 1, where 0 and 1 represent the minimum and maximum pressure the hardware is capable of detecting, respectively. System.Single tiltX The plane angle (in degrees, in the range of -90 to 90) between the Y-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the Y axis. System.Single tiltY The plane angle (in degrees, in the range of -90 to 90) between the X-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the X axis. System.String pointerType Indicates the device type that caused the event. Must be one of the strings mouse, pen or touch, or an empty string. System.Boolean isPrimary Indicates if the pointer represents the primary pointer of this pointer type. | Improve this Doc View Source LostPointerCaptureAsync(IElement, PointerEventArgs) Raises the @onlostpointercapture event on element , passing the provided eventArgs to the event handler. Declaration public static Task LostPointerCaptureAsync(this IElement element, PointerEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element Microsoft.AspNetCore.Components.Web.PointerEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source PointerDown(IElement, PointerEventArgs) Raises the @onpointerdown event on element , passing the provided eventArgs to the event handler. Declaration public static void PointerDown(this IElement element, PointerEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.PointerEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source PointerDown(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String, Int64, Single, Single, Single, Single, Single, String, Boolean) Raises the @onpointerdown event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.PointerEventArgs object. Declaration public static void PointerDown(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null, long pointerId = 0L, float width = 0F, float height = 0F, float pressure = 0F, float tiltX = 0F, float tiltY = 0F, string pointerType = null, bool isPrimary = false) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. System.Int64 pointerId A unique identifier for the pointer causing the event. System.Single width The width (magnitude on the X axis), in CSS pixels, of the contact geometry of the pointer. System.Single height The height (magnitude on the Y axis), in CSS pixels, of the contact geometry of the pointer. System.Single pressure The normalized pressure of the pointer input in the range of 0 to 1, where 0 and 1 represent the minimum and maximum pressure the hardware is capable of detecting, respectively. System.Single tiltX The plane angle (in degrees, in the range of -90 to 90) between the Y-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the Y axis. System.Single tiltY The plane angle (in degrees, in the range of -90 to 90) between the X-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the X axis. System.String pointerType Indicates the device type that caused the event. Must be one of the strings mouse, pen or touch, or an empty string. System.Boolean isPrimary Indicates if the pointer represents the primary pointer of this pointer type. | Improve this Doc View Source PointerDownAsync(IElement, PointerEventArgs) Raises the @onpointerdown event on element , passing the provided eventArgs to the event handler. Declaration public static Task PointerDownAsync(this IElement element, PointerEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element Microsoft.AspNetCore.Components.Web.PointerEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source PointerEnter(IElement, PointerEventArgs) Raises the @onpointerenter event on element , passing the provided eventArgs to the event handler. Declaration public static void PointerEnter(this IElement element, PointerEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.PointerEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source PointerEnter(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String, Int64, Single, Single, Single, Single, Single, String, Boolean) Raises the @onpointerenter event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.PointerEventArgs object. Declaration public static void PointerEnter(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null, long pointerId = 0L, float width = 0F, float height = 0F, float pressure = 0F, float tiltX = 0F, float tiltY = 0F, string pointerType = null, bool isPrimary = false) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. System.Int64 pointerId A unique identifier for the pointer causing the event. System.Single width The width (magnitude on the X axis), in CSS pixels, of the contact geometry of the pointer. System.Single height The height (magnitude on the Y axis), in CSS pixels, of the contact geometry of the pointer. System.Single pressure The normalized pressure of the pointer input in the range of 0 to 1, where 0 and 1 represent the minimum and maximum pressure the hardware is capable of detecting, respectively. System.Single tiltX The plane angle (in degrees, in the range of -90 to 90) between the Y-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the Y axis. System.Single tiltY The plane angle (in degrees, in the range of -90 to 90) between the X-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the X axis. System.String pointerType Indicates the device type that caused the event. Must be one of the strings mouse, pen or touch, or an empty string. System.Boolean isPrimary Indicates if the pointer represents the primary pointer of this pointer type. | Improve this Doc View Source PointerEnterAsync(IElement, PointerEventArgs) Raises the @onpointerenter event on element , passing the provided eventArgs to the event handler. Declaration public static Task PointerEnterAsync(this IElement element, PointerEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element Microsoft.AspNetCore.Components.Web.PointerEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source PointerLeave(IElement, PointerEventArgs) Raises the @onpointerleave event on element , passing the provided eventArgs to the event handler. Declaration public static void PointerLeave(this IElement element, PointerEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.PointerEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source PointerLeave(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String, Int64, Single, Single, Single, Single, Single, String, Boolean) Raises the @onpointerleave event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.PointerEventArgs object. Declaration public static void PointerLeave(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null, long pointerId = 0L, float width = 0F, float height = 0F, float pressure = 0F, float tiltX = 0F, float tiltY = 0F, string pointerType = null, bool isPrimary = false) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. System.Int64 pointerId A unique identifier for the pointer causing the event. System.Single width The width (magnitude on the X axis), in CSS pixels, of the contact geometry of the pointer. System.Single height The height (magnitude on the Y axis), in CSS pixels, of the contact geometry of the pointer. System.Single pressure The normalized pressure of the pointer input in the range of 0 to 1, where 0 and 1 represent the minimum and maximum pressure the hardware is capable of detecting, respectively. System.Single tiltX The plane angle (in degrees, in the range of -90 to 90) between the Y-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the Y axis. System.Single tiltY The plane angle (in degrees, in the range of -90 to 90) between the X-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the X axis. System.String pointerType Indicates the device type that caused the event. Must be one of the strings mouse, pen or touch, or an empty string. System.Boolean isPrimary Indicates if the pointer represents the primary pointer of this pointer type. | Improve this Doc View Source PointerLeaveAsync(IElement, PointerEventArgs) Raises the @onpointerleave event on element , passing the provided eventArgs to the event handler. Declaration public static Task PointerLeaveAsync(this IElement element, PointerEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element Microsoft.AspNetCore.Components.Web.PointerEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source PointerMove(IElement, PointerEventArgs) Raises the @onpointermove event on element , passing the provided eventArgs to the event handler. Declaration public static void PointerMove(this IElement element, PointerEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.PointerEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source PointerMove(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String, Int64, Single, Single, Single, Single, Single, String, Boolean) Raises the @onpointermove event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.PointerEventArgs object. Declaration public static void PointerMove(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null, long pointerId = 0L, float width = 0F, float height = 0F, float pressure = 0F, float tiltX = 0F, float tiltY = 0F, string pointerType = null, bool isPrimary = false) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. System.Int64 pointerId A unique identifier for the pointer causing the event. System.Single width The width (magnitude on the X axis), in CSS pixels, of the contact geometry of the pointer. System.Single height The height (magnitude on the Y axis), in CSS pixels, of the contact geometry of the pointer. System.Single pressure The normalized pressure of the pointer input in the range of 0 to 1, where 0 and 1 represent the minimum and maximum pressure the hardware is capable of detecting, respectively. System.Single tiltX The plane angle (in degrees, in the range of -90 to 90) between the Y-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the Y axis. System.Single tiltY The plane angle (in degrees, in the range of -90 to 90) between the X-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the X axis. System.String pointerType Indicates the device type that caused the event. Must be one of the strings mouse, pen or touch, or an empty string. System.Boolean isPrimary Indicates if the pointer represents the primary pointer of this pointer type. | Improve this Doc View Source PointerMoveAsync(IElement, PointerEventArgs) Raises the @onpointermove event on element , passing the provided eventArgs to the event handler. Declaration public static Task PointerMoveAsync(this IElement element, PointerEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element Microsoft.AspNetCore.Components.Web.PointerEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source PointerOut(IElement, PointerEventArgs) Raises the @onpointerout event on element , passing the provided eventArgs to the event handler. Declaration public static void PointerOut(this IElement element, PointerEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.PointerEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source PointerOut(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String, Int64, Single, Single, Single, Single, Single, String, Boolean) Raises the @onpointerout event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.PointerEventArgs object. Declaration public static void PointerOut(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null, long pointerId = 0L, float width = 0F, float height = 0F, float pressure = 0F, float tiltX = 0F, float tiltY = 0F, string pointerType = null, bool isPrimary = false) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. System.Int64 pointerId A unique identifier for the pointer causing the event. System.Single width The width (magnitude on the X axis), in CSS pixels, of the contact geometry of the pointer. System.Single height The height (magnitude on the Y axis), in CSS pixels, of the contact geometry of the pointer. System.Single pressure The normalized pressure of the pointer input in the range of 0 to 1, where 0 and 1 represent the minimum and maximum pressure the hardware is capable of detecting, respectively. System.Single tiltX The plane angle (in degrees, in the range of -90 to 90) between the Y-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the Y axis. System.Single tiltY The plane angle (in degrees, in the range of -90 to 90) between the X-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the X axis. System.String pointerType Indicates the device type that caused the event. Must be one of the strings mouse, pen or touch, or an empty string. System.Boolean isPrimary Indicates if the pointer represents the primary pointer of this pointer type. | Improve this Doc View Source PointerOutAsync(IElement, PointerEventArgs) Raises the @onpointerout event on element , passing the provided eventArgs to the event handler. Declaration public static Task PointerOutAsync(this IElement element, PointerEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element Microsoft.AspNetCore.Components.Web.PointerEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source PointerOver(IElement, PointerEventArgs) Raises the @onpointerover event on element , passing the provided eventArgs to the event handler. Declaration public static void PointerOver(this IElement element, PointerEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.PointerEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source PointerOver(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String, Int64, Single, Single, Single, Single, Single, String, Boolean) Raises the @onpointerover event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.PointerEventArgs object. Declaration public static void PointerOver(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null, long pointerId = 0L, float width = 0F, float height = 0F, float pressure = 0F, float tiltX = 0F, float tiltY = 0F, string pointerType = null, bool isPrimary = false) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. System.Int64 pointerId A unique identifier for the pointer causing the event. System.Single width The width (magnitude on the X axis), in CSS pixels, of the contact geometry of the pointer. System.Single height The height (magnitude on the Y axis), in CSS pixels, of the contact geometry of the pointer. System.Single pressure The normalized pressure of the pointer input in the range of 0 to 1, where 0 and 1 represent the minimum and maximum pressure the hardware is capable of detecting, respectively. System.Single tiltX The plane angle (in degrees, in the range of -90 to 90) between the Y-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the Y axis. System.Single tiltY The plane angle (in degrees, in the range of -90 to 90) between the X-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the X axis. System.String pointerType Indicates the device type that caused the event. Must be one of the strings mouse, pen or touch, or an empty string. System.Boolean isPrimary Indicates if the pointer represents the primary pointer of this pointer type. | Improve this Doc View Source PointerOverAsync(IElement, PointerEventArgs) Raises the @onpointerover event on element , passing the provided eventArgs to the event handler. Declaration public static Task PointerOverAsync(this IElement element, PointerEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element Microsoft.AspNetCore.Components.Web.PointerEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source PointerUp(IElement, PointerEventArgs) Raises the @onpointerup event on element , passing the provided eventArgs to the event handler. Declaration public static void PointerUp(this IElement element, PointerEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.PointerEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source PointerUp(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String, Int64, Single, Single, Single, Single, Single, String, Boolean) Raises the @onpointerup event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.PointerEventArgs object. Declaration public static void PointerUp(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null, long pointerId = 0L, float width = 0F, float height = 0F, float pressure = 0F, float tiltX = 0F, float tiltY = 0F, string pointerType = null, bool isPrimary = false) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. System.Int64 pointerId A unique identifier for the pointer causing the event. System.Single width The width (magnitude on the X axis), in CSS pixels, of the contact geometry of the pointer. System.Single height The height (magnitude on the Y axis), in CSS pixels, of the contact geometry of the pointer. System.Single pressure The normalized pressure of the pointer input in the range of 0 to 1, where 0 and 1 represent the minimum and maximum pressure the hardware is capable of detecting, respectively. System.Single tiltX The plane angle (in degrees, in the range of -90 to 90) between the Y-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the Y axis. System.Single tiltY The plane angle (in degrees, in the range of -90 to 90) between the X-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the X axis. System.String pointerType Indicates the device type that caused the event. Must be one of the strings mouse, pen or touch, or an empty string. System.Boolean isPrimary Indicates if the pointer represents the primary pointer of this pointer type. | Improve this Doc View Source PointerUpAsync(IElement, PointerEventArgs) Raises the @onpointerup event on element , passing the provided eventArgs to the event handler. Declaration public static Task PointerUpAsync(this IElement element, PointerEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element Microsoft.AspNetCore.Components.Web.PointerEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done."
  },
  "api/Bunit.ProgressEventDispatchExtensions.html": {
    "href": "api/Bunit.ProgressEventDispatchExtensions.html",
    "title": "Class ProgressEventDispatchExtensions | bUnit",
    "keywords": "Class ProgressEventDispatchExtensions Pointer event dispatch helper extension methods. Inheritance System.Object ProgressEventDispatchExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Web.dll Syntax public static class ProgressEventDispatchExtensions Methods | Improve this Doc View Source Abort(IElement, ProgressEventArgs) Raises the @onabort event on element , passing the provided eventArgs to the event handler. Declaration public static void Abort(this IElement element, ProgressEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.ProgressEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source Abort(IElement, Boolean, Int64, Int64, String) Raises the @onabort event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.ProgressEventArgs object. Declaration public static void Abort(this IElement element, bool lengthComputable = false, long loaded = 0L, long total = 0L, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Boolean lengthComputable Whether or not the total size of the transfer is known. System.Int64 loaded The number of bytes transferred since the beginning of the operation. This doesn't include headers and other overhead, but only the content itself. System.Int64 total The total number of bytes of content that will be transferred during the operation. If the total size is unknown, this value is zero. System.String type Gets or sets the type of the event. | Improve this Doc View Source AbortAsync(IElement, ProgressEventArgs) Raises the @onabort event on element , passing the provided eventArgs to the event handler. Declaration public static Task AbortAsync(this IElement element, ProgressEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element Microsoft.AspNetCore.Components.Web.ProgressEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Error(IElement, ProgressEventArgs) Raises the @onerror event on element , passing the provided eventArgs to the event handler. Declaration public static void Error(this IElement element, ProgressEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.ProgressEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source Error(IElement, Boolean, Int64, Int64, String) Raises the @onerror event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.ProgressEventArgs object. Declaration public static void Error(this IElement element, bool lengthComputable = false, long loaded = 0L, long total = 0L, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Boolean lengthComputable Whether or not the total size of the transfer is known. System.Int64 loaded The number of bytes transferred since the beginning of the operation. This doesn't include headers and other overhead, but only the content itself. System.Int64 total The total number of bytes of content that will be transferred during the operation. If the total size is unknown, this value is zero. System.String type Gets or sets the type of the event. | Improve this Doc View Source ErrorAsync(IElement, ProgressEventArgs) Raises the @onerror event on element , passing the provided eventArgs to the event handler. Declaration public static Task ErrorAsync(this IElement element, ProgressEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element Microsoft.AspNetCore.Components.Web.ProgressEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Load(IElement, ProgressEventArgs) Raises the @onload event on element , passing the provided eventArgs to the event handler. Declaration public static void Load(this IElement element, ProgressEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.ProgressEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source Load(IElement, Boolean, Int64, Int64, String) Raises the @onload event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.ProgressEventArgs object. Declaration public static void Load(this IElement element, bool lengthComputable = false, long loaded = 0L, long total = 0L, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Boolean lengthComputable Whether or not the total size of the transfer is known. System.Int64 loaded The number of bytes transferred since the beginning of the operation. This doesn't include headers and other overhead, but only the content itself. System.Int64 total The total number of bytes of content that will be transferred during the operation. If the total size is unknown, this value is zero. System.String type Gets or sets the type of the event. | Improve this Doc View Source LoadAsync(IElement, ProgressEventArgs) Raises the @onload event on element , passing the provided eventArgs to the event handler. Declaration public static Task LoadAsync(this IElement element, ProgressEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element Microsoft.AspNetCore.Components.Web.ProgressEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source LoadEnd(IElement, ProgressEventArgs) Raises the @onloadend event on element , passing the provided eventArgs to the event handler. Declaration public static void LoadEnd(this IElement element, ProgressEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.ProgressEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source LoadEnd(IElement, Boolean, Int64, Int64, String) Raises the @onloadend event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.ProgressEventArgs object. Declaration public static void LoadEnd(this IElement element, bool lengthComputable = false, long loaded = 0L, long total = 0L, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Boolean lengthComputable Whether or not the total size of the transfer is known. System.Int64 loaded The number of bytes transferred since the beginning of the operation. This doesn't include headers and other overhead, but only the content itself. System.Int64 total The total number of bytes of content that will be transferred during the operation. If the total size is unknown, this value is zero. System.String type Gets or sets the type of the event. | Improve this Doc View Source LoadEndAsync(IElement, ProgressEventArgs) Raises the @onloadend event on element , passing the provided eventArgs to the event handler. Declaration public static Task LoadEndAsync(this IElement element, ProgressEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element Microsoft.AspNetCore.Components.Web.ProgressEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source LoadStart(IElement, ProgressEventArgs) Raises the @onloadstart event on element , passing the provided eventArgs to the event handler. Declaration public static void LoadStart(this IElement element, ProgressEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.ProgressEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source LoadStart(IElement, Boolean, Int64, Int64, String) Raises the @onloadstart event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.ProgressEventArgs object. Declaration public static void LoadStart(this IElement element, bool lengthComputable = false, long loaded = 0L, long total = 0L, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Boolean lengthComputable Whether or not the total size of the transfer is known. System.Int64 loaded The number of bytes transferred since the beginning of the operation. This doesn't include headers and other overhead, but only the content itself. System.Int64 total The total number of bytes of content that will be transferred during the operation. If the total size is unknown, this value is zero. System.String type Gets or sets the type of the event. | Improve this Doc View Source LoadStartAsync(IElement, ProgressEventArgs) Raises the @onloadstart event on element , passing the provided eventArgs to the event handler. Declaration public static Task LoadStartAsync(this IElement element, ProgressEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element Microsoft.AspNetCore.Components.Web.ProgressEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Progress(IElement, ProgressEventArgs) Raises the @onprogress event on element , passing the provided eventArgs to the event handler. Declaration public static void Progress(this IElement element, ProgressEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.ProgressEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source Progress(IElement, Boolean, Int64, Int64, String) Raises the @onprogress event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.ProgressEventArgs object. Declaration public static void Progress(this IElement element, bool lengthComputable = false, long loaded = 0L, long total = 0L, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Boolean lengthComputable Whether or not the total size of the transfer is known. System.Int64 loaded The number of bytes transferred since the beginning of the operation. This doesn't include headers and other overhead, but only the content itself. System.Int64 total The total number of bytes of content that will be transferred during the operation. If the total size is unknown, this value is zero. System.String type Gets or sets the type of the event. | Improve this Doc View Source ProgressAsync(IElement, ProgressEventArgs) Raises the @onprogress event on element , passing the provided eventArgs to the event handler. Declaration public static Task ProgressAsync(this IElement element, ProgressEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element Microsoft.AspNetCore.Components.Web.ProgressEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Timeout(IElement, ProgressEventArgs) Raises the @ontimeout event on element , passing the provided eventArgs to the event handler. Declaration public static void Timeout(this IElement element, ProgressEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.ProgressEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source Timeout(IElement, Boolean, Int64, Int64, String) Raises the @ontimeout event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.ProgressEventArgs object. Declaration public static void Timeout(this IElement element, bool lengthComputable = false, long loaded = 0L, long total = 0L, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Boolean lengthComputable Whether or not the total size of the transfer is known. System.Int64 loaded The number of bytes transferred since the beginning of the operation. This doesn't include headers and other overhead, but only the content itself. System.Int64 total The total number of bytes of content that will be transferred during the operation. If the total size is unknown, this value is zero. System.String type Gets or sets the type of the event. | Improve this Doc View Source TimeoutAsync(IElement, ProgressEventArgs) Raises the @ontimeout event on element , passing the provided eventArgs to the event handler. Declaration public static Task TimeoutAsync(this IElement element, ProgressEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element Microsoft.AspNetCore.Components.Web.ProgressEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done."
  },
  "api/Bunit.RazorTesting.FixtureBase-1.html": {
    "href": "api/Bunit.RazorTesting.FixtureBase-1.html",
    "title": "Class FixtureBase<TFixture> | bUnit",
    "keywords": "Class FixtureBase<TFixture> Represents a single fixture in a Razor based test. Used to define the ComponentUnderTest and any Fragment 's you might need during testing, and assert against them in the Test methods. Inheritance System.Object TestContextBase RazorTestBase FixtureBase<TFixture> Fixture Implements ITestContext System.IDisposable Microsoft.AspNetCore.Components.IComponent Inherited Members RazorTestBase.IsRunning RazorTestBase.Description RazorTestBase.Skip RazorTestBase.Timeout RazorTestBase.RunTest() RazorTestBase.IComponent.Attach(RenderHandle) RazorTestBase.Run() RazorTestBase.TryRun<T>(Action<T>, T) RazorTestBase.TryRunAsync<T>(Func<T, Task>, T) TestContextBase.Renderer TestContextBase.Services TestContextBase.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.RazorTesting Assembly : Bunit.Core.dll Syntax public abstract class FixtureBase<TFixture> : RazorTestBase, ITestContext, IDisposable, IComponent Type Parameters Name Description TFixture Properties | Improve this Doc View Source ChildContent Gets or sets the child content of the fragment. Declaration [Parameter] public RenderFragment ChildContent { get; set; } Property Value Type Description Microsoft.AspNetCore.Components.RenderFragment | Improve this Doc View Source DisplayName Declaration public override string DisplayName { get; } Property Value Type Description System.String Overrides RazorTestBase.DisplayName | Improve this Doc View Source Setup Gets or sets the setup action to perform before the Test action or TestAsync action are invoked. Declaration [Parameter] public Action<TFixture> Setup { get; set; } Property Value Type Description System.Action <TFixture> | Improve this Doc View Source SetupAsync Gets or sets the asynchronous setup action to perform before the Test action or TestAsync action are invoked. Declaration [Parameter] public Func<TFixture, Task> SetupAsync { get; set; } Property Value Type Description System.Func <TFixture, System.Threading.Tasks.Task > | Improve this Doc View Source Test Gets or sets the test action to invoke, after the Setup and SetupAsync actions has invoked (if provided). If this is set, then TestAsync cannot also be set. Declaration [Parameter] public Action<TFixture> Test { get; set; } Property Value Type Description System.Action <TFixture> | Improve this Doc View Source TestAsync Gets or sets the test action to invoke, after the Setup and SetupAsync actions has invoked (if provided). If this is set, then Test cannot also be set. Declaration [Parameter] public Func<TFixture, Task> TestAsync { get; set; } Property Value Type Description System.Func <TFixture, System.Threading.Tasks.Task > | Improve this Doc View Source Tests Obsolete. Methods assigned to this parameter will not be invoked. Declaration [Obsolete(\"This feature has been removed since it caused confusion about the state of the fixture being passed to the test methods. Methods assigned to this parameter will not be invoked.\")] [Parameter] public IReadOnlyCollection<Action<TFixture>> Tests { get; set; } Property Value Type Description System.Collections.Generic.IReadOnlyCollection < System.Action <TFixture>> | Improve this Doc View Source TestsAsync Obsolete. Methods assigned to this parameter will not be invoked. Declaration [Obsolete(\"This feature has been removed since it caused confusion about the state of the fixture being passed to the test methods. Methods assigned to this parameter will not be invoked.\")] [Parameter] public IReadOnlyCollection<Func<TFixture, Task>> TestsAsync { get; set; } Property Value Type Description System.Collections.Generic.IReadOnlyCollection < System.Func <TFixture, System.Threading.Tasks.Task >> Methods | Improve this Doc View Source Run(TFixture) Declaration protected virtual Task Run(TFixture self) Parameters Type Name Description TFixture self Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source SetParametersAsync(ParameterView) Declaration public override Task SetParametersAsync(ParameterView parameters) Parameters Type Name Description Microsoft.AspNetCore.Components.ParameterView parameters Returns Type Description System.Threading.Tasks.Task Overrides RazorTestBase.SetParametersAsync(ParameterView) | Improve this Doc View Source Validate() Declaration public override void Validate() Overrides RazorTestBase.Validate() Implements ITestContext System.IDisposable Microsoft.AspNetCore.Components.IComponent Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.RazorTesting.FragmentBase.html": {
    "href": "api/Bunit.RazorTesting.FragmentBase.html",
    "title": "Class FragmentBase | bUnit",
    "keywords": "Class FragmentBase Represents a component that can be used to capture a render fragment. Inheritance System.Object FragmentBase ComponentUnderTest Fragment Implements Microsoft.AspNetCore.Components.IComponent Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.RazorTesting Assembly : Bunit.Core.dll Syntax public abstract class FragmentBase : IComponent Properties | Improve this Doc View Source ChildContent Gets or sets the child content of the fragment. Declaration [Parameter] public RenderFragment ChildContent { get; set; } Property Value Type Description Microsoft.AspNetCore.Components.RenderFragment Methods | Improve this Doc View Source Attach(RenderHandle) Declaration public void Attach(RenderHandle renderHandle) Parameters Type Name Description Microsoft.AspNetCore.Components.RenderHandle renderHandle | Improve this Doc View Source SetParametersAsync(ParameterView) Declaration public virtual Task SetParametersAsync(ParameterView parameters) Parameters Type Name Description Microsoft.AspNetCore.Components.ParameterView parameters Returns Type Description System.Threading.Tasks.Task Implements Microsoft.AspNetCore.Components.IComponent Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.RazorTesting.html": {
    "href": "api/Bunit.RazorTesting.html",
    "title": "Namespace Bunit.RazorTesting | bUnit",
    "keywords": "Namespace Bunit.RazorTesting Classes FixtureBase<TFixture> Represents a single fixture in a Razor based test. Used to define the ComponentUnderTest and any Fragment 's you might need during testing, and assert against them in the Test methods. FragmentBase Represents a component that can be used to capture a render fragment. RazorTestBase Represents a component used to define tests in Razor files."
  },
  "api/Bunit.RazorTesting.RazorTestBase.html": {
    "href": "api/Bunit.RazorTesting.RazorTestBase.html",
    "title": "Class RazorTestBase | bUnit",
    "keywords": "Class RazorTestBase Represents a component used to define tests in Razor files. Inheritance System.Object TestContextBase RazorTestBase FixtureBase<TFixture> SnapshotTest Implements ITestContext System.IDisposable Microsoft.AspNetCore.Components.IComponent Inherited Members TestContextBase.Renderer TestContextBase.Services TestContextBase.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.RazorTesting Assembly : Bunit.Core.dll Syntax public abstract class RazorTestBase : TestContextBase, ITestContext, IDisposable, IComponent Properties | Improve this Doc View Source Description A description or name for the test that will be displayed if the test fails. Declaration [Parameter] public virtual string Description { get; set; } Property Value Type Description System.String | Improve this Doc View Source DisplayName Gets the name of the test, which is displayed by the test runner/explorer. Declaration public abstract string DisplayName { get; } Property Value Type Description System.String | Improve this Doc View Source IsRunning Gets whether the tests is running or not. Declaration public bool IsRunning { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Skip Gets or sets a reason for skipping the test. If not set (null), the test will not be skipped. Declaration [Parameter] public virtual string Skip { get; set; } Property Value Type Description System.String | Improve this Doc View Source Timeout Gets or sets the timeout of the test, in milliseconds; if zero or negative, means the test case has no timeout. Declaration [Parameter] public virtual TimeSpan? Timeout { get; set; } Property Value Type Description System.Nullable < System.TimeSpan > Methods | Improve this Doc View Source Run() Implements the logic for running the test. Declaration protected abstract Task Run() Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source RunTest() Run the test logic of the RazorTestBase . Declaration public Task RunTest() Returns Type Description System.Threading.Tasks.Task Exceptions Type Condition System.InvalidOperationException Thrown when called and IsRunning is true. | Improve this Doc View Source SetParametersAsync(ParameterView) Declaration public virtual Task SetParametersAsync(ParameterView parameters) Parameters Type Name Description Microsoft.AspNetCore.Components.ParameterView parameters Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source TryRun<T>(Action<T>, T) Try to run the System.Action<T> . Declaration protected static void TryRun<T>(Action<T> action, T input) Parameters Type Name Description System.Action <T> action T input Type Parameters Name Description T | Improve this Doc View Source TryRunAsync<T>(Func<T, Task>, T) Try to run the System.Func<T, TResult> . Declaration protected static Task TryRunAsync<T>(Func<T, Task> action, T input) Parameters Type Name Description System.Func <T, System.Threading.Tasks.Task > action T input Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source Validate() Validates the test and throws an exception if the test does not have received all input it needs to run. Declaration public virtual void Validate() Explicit Interface Implementations | Improve this Doc View Source IComponent.Attach(RenderHandle) Declaration void IComponent.Attach(RenderHandle renderHandle) Parameters Type Name Description Microsoft.AspNetCore.Components.RenderHandle renderHandle Implements ITestContext System.IDisposable Microsoft.AspNetCore.Components.IComponent Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.RenderedFragmentExtensions.html": {
    "href": "api/Bunit.RenderedFragmentExtensions.html",
    "title": "Class RenderedFragmentExtensions | bUnit",
    "keywords": "Class RenderedFragmentExtensions Helper methods for querying IRenderedFragment . Inheritance System.Object RenderedFragmentExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Web.dll Syntax public static class RenderedFragmentExtensions Methods | Improve this Doc View Source Find(IRenderedFragment, String) Returns the first element from the rendered fragment or component under test, using the provided cssSelector , in a depth-first pre-order traversal of the rendered nodes. Declaration public static IElement Find(this IRenderedFragment renderedFragment, string cssSelector) Parameters Type Name Description IRenderedFragment renderedFragment The rendered fragment to search. System.String cssSelector The group of selectors to use. Returns Type Description AngleSharp.Dom.IElement | Improve this Doc View Source FindAll(IRenderedFragment, String, Boolean) Returns a refreshable collection of AngleSharp.Dom.IElement s from the rendered fragment or component under test, using the provided cssSelector , in a depth-first pre-order traversal of the rendered nodes. Declaration public static IRefreshableElementCollection<IElement> FindAll(this IRenderedFragment renderedFragment, string cssSelector, bool enableAutoRefresh = false) Parameters Type Name Description IRenderedFragment renderedFragment The rendered fragment to search. System.String cssSelector The group of selectors to use. System.Boolean enableAutoRefresh If true, the returned IRefreshableElementCollection<T> will automatically refresh its AngleSharp.Dom.IElement s whenever the renderedFragment changes. Returns Type Description IRefreshableElementCollection < AngleSharp.Dom.IElement > An IRefreshableElementCollection<T> , that can be refreshed to execute the search again. | Improve this Doc View Source FindComponent<TComponent>(IRenderedFragment) Finds the first component of type TComponent in the render tree of this IRenderedFragment . Declaration public static IRenderedComponent<TComponent> FindComponent<TComponent>(this IRenderedFragment renderedFragment) where TComponent : IComponent Parameters Type Name Description IRenderedFragment renderedFragment Returns Type Description IRenderedComponent <TComponent> The IRenderedComponent<TComponent> . Type Parameters Name Description TComponent Type of component to find. Exceptions Type Condition ComponentNotFoundException Thrown if a component of type TComponent was not found in the render tree. | Improve this Doc View Source FindComponents<TComponent>(IRenderedFragment) Finds all components of type TComponent in the render tree of this IRenderedFragment , in depth-first order. Declaration public static IReadOnlyList<IRenderedComponent<TComponent>> FindComponents<TComponent>(this IRenderedFragment renderedFragment) where TComponent : IComponent Parameters Type Name Description IRenderedFragment renderedFragment Returns Type Description System.Collections.Generic.IReadOnlyList < IRenderedComponent <TComponent>> The IRenderedComponent<TComponent> s Type Parameters Name Description TComponent Type of components to find."
  },
  "api/Bunit.RenderedFragmentWaitForHelperExtensions.html": {
    "href": "api/Bunit.RenderedFragmentWaitForHelperExtensions.html",
    "title": "Class RenderedFragmentWaitForHelperExtensions | bUnit",
    "keywords": "Class RenderedFragmentWaitForHelperExtensions Helper methods dealing with async rendering during testing. Inheritance System.Object RenderedFragmentWaitForHelperExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Core.dll Syntax public static class RenderedFragmentWaitForHelperExtensions Methods | Improve this Doc View Source WaitForAssertion(IRenderedFragmentBase, Action, Nullable<TimeSpan>) Wait until the provided assertion passes (i.e. does not throw an exception), or the timeout is reached (default is one second). The assertion is attempted initially, and then each time the renderedFragment renders. Declaration public static void WaitForAssertion(this IRenderedFragmentBase renderedFragment, Action assertion, TimeSpan? timeout = default(TimeSpan? )) Parameters Type Name Description IRenderedFragmentBase renderedFragment The rendered fragment to wait for renders from and assert against. System.Action assertion The verification or assertion to perform. System.Nullable < System.TimeSpan > timeout The maximum time to attempt the verification. Exceptions Type Condition WaitForFailedException Thrown if the timeout has been reached. See the inner exception to see the captured assertion exception. | Improve this Doc View Source WaitForState(IRenderedFragmentBase, Func<Boolean>, Nullable<TimeSpan>) Wait until the provided statePredicate action returns true, or the timeout is reached (default is one second). The statePredicate is evaluated initially, and then each time the renderedFragment renders. Declaration public static void WaitForState(this IRenderedFragmentBase renderedFragment, Func<bool> statePredicate, TimeSpan? timeout = default(TimeSpan? )) Parameters Type Name Description IRenderedFragmentBase renderedFragment The render fragment or component to attempt to verify state against. System.Func < System.Boolean > statePredicate The predicate to invoke after each render, which must returns true when the desired state has been reached. System.Nullable < System.TimeSpan > timeout The maximum time to wait for the desired state. Exceptions Type Condition WaitForFailedException Thrown if the statePredicate throw an exception during invocation, or if the timeout has been reached. See the inner exception for details."
  },
  "api/Bunit.Rendering.ComponentNotFoundException.html": {
    "href": "api/Bunit.Rendering.ComponentNotFoundException.html",
    "title": "Class ComponentNotFoundException | bUnit",
    "keywords": "Class ComponentNotFoundException Represents an exception that is thrown when a search for a component did not succeed. Inheritance System.Object System.Exception ComponentNotFoundException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Bunit.Rendering Assembly : Bunit.Core.dll Syntax public class ComponentNotFoundException : Exception, ISerializable Constructors | Improve this Doc View Source ComponentNotFoundException(Type) Creates an instance of the ComponentNotFoundException type. Declaration public ComponentNotFoundException(Type componentType) Parameters Type Name Description System.Type componentType The type of component that was not found. Implements System.Runtime.Serialization.ISerializable Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.Rendering.ComponentParameter.html": {
    "href": "api/Bunit.Rendering.ComponentParameter.html",
    "title": "Struct ComponentParameter | bUnit",
    "keywords": "Struct ComponentParameter Represents a single parameter supplied to an Microsoft.AspNetCore.Components.IComponent component under test. Implements System.IEquatable < ComponentParameter > Inherited Members System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Bunit.Rendering Assembly : Bunit.Core.dll Syntax public struct ComponentParameter : IEquatable<ComponentParameter> Properties | Improve this Doc View Source IsCascadingValue Gets a value to indicate whether the parameter is for use by a Microsoft.AspNetCore.Components.CascadingValue`1 . Declaration public bool IsCascadingValue { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Name Gets the name of the parameter. Can be null if the parameter is for an unnamed cascading value. Declaration public string Name { get; } Property Value Type Description System.String | Improve this Doc View Source Value Gets the value being supplied to the component. Declaration public object Value { get; } Property Value Type Description System.Object Methods | Improve this Doc View Source CreateCascadingValue(String, Object) Create a Cascading Value parameter for a component under test. Declaration public static ComponentParameter CreateCascadingValue(string name, object value) Parameters Type Name Description System.String name A optional name for the cascading value System.Object value The cascading value Returns Type Description ComponentParameter | Improve this Doc View Source CreateParameter(String, Object) Create a parameter for a component under test. Declaration public static ComponentParameter CreateParameter(string name, object value) Parameters Type Name Description System.String name Name of the parameter to pass to the component System.Object value Value or null to pass the component Returns Type Description ComponentParameter | Improve this Doc View Source Equals(ComponentParameter) Declaration public bool Equals(ComponentParameter other) Parameters Type Name Description ComponentParameter other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(ComponentParameter, ComponentParameter) Declaration public static bool operator ==(ComponentParameter left, ComponentParameter right) Parameters Type Name Description ComponentParameter left ComponentParameter right Returns Type Description System.Boolean | Improve this Doc View Source Implicit((String name, Object value, Boolean isCascadingValue) to ComponentParameter) Create a parameter or cascading value for a component under test. Declaration public static implicit operator ComponentParameter((string name, object value, bool isCascadingValue) input) Parameters Type Name Description System.ValueTuple < System.String , System.Object , System.Boolean > input A name/value/isCascadingValue triple for the parameter Returns Type Description ComponentParameter | Improve this Doc View Source Implicit((String name, Object value) to ComponentParameter) Create a parameter for a component under test. Declaration public static implicit operator ComponentParameter((string name, object value) input) Parameters Type Name Description System.ValueTuple < System.String , System.Object > input A name/value pair for the parameter Returns Type Description ComponentParameter | Improve this Doc View Source Inequality(ComponentParameter, ComponentParameter) Declaration public static bool operator !=(ComponentParameter left, ComponentParameter right) Parameters Type Name Description ComponentParameter left ComponentParameter right Returns Type Description System.Boolean Implements System.IEquatable<T> Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.Rendering.html": {
    "href": "api/Bunit.Rendering.html",
    "title": "Namespace Bunit.Rendering | bUnit",
    "keywords": "Namespace Bunit.Rendering Classes ComponentNotFoundException Represents an exception that is thrown when a search for a component did not succeed. RenderedFragment Represents an abstract IRenderedFragment with base functionality. RenderEvent Represents a render event from a ITestRenderer . TestComponentRenderer Represents a renderer specifically for rendering Razor-based test files (but not the actual tests inside). TestRenderer Generalized Blazor renderer for testing purposes. Structs ComponentParameter Represents a single parameter supplied to an Microsoft.AspNetCore.Components.IComponent component under test. Interfaces IRenderEventHandler Represents a type that handle RenderEvent from a TestRenderer or one of the components it has rendered. IRenderEventProducer Represents a producer of RenderEvent s. ITestRenderer Represents a generalized Blazor renderer for testing purposes."
  },
  "api/Bunit.Rendering.IRenderEventHandler.html": {
    "href": "api/Bunit.Rendering.IRenderEventHandler.html",
    "title": "Interface IRenderEventHandler | bUnit",
    "keywords": "Interface IRenderEventHandler Represents a type that handle RenderEvent from a TestRenderer or one of the components it has rendered. Namespace : Bunit.Rendering Assembly : Bunit.Core.dll Syntax public interface IRenderEventHandler Methods | Improve this Doc View Source Handle(RenderEvent) A handler for RenderEvent s. Must return a completed task when it is done processing the render event. Declaration Task Handle(RenderEvent renderEvent) Parameters Type Name Description RenderEvent renderEvent The render event to process Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that completes when the render event has been processed. Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.Rendering.IRenderEventProducer.html": {
    "href": "api/Bunit.Rendering.IRenderEventProducer.html",
    "title": "Interface IRenderEventProducer | bUnit",
    "keywords": "Interface IRenderEventProducer Represents a producer of RenderEvent s. Namespace : Bunit.Rendering Assembly : Bunit.Core.dll Syntax public interface IRenderEventProducer Methods | Improve this Doc View Source AddRenderEventHandler(IRenderEventHandler) Adds a IRenderEventHandler to this renderer, which will be triggered when the renderer has finished rendering a render cycle. Declaration void AddRenderEventHandler(IRenderEventHandler handler) Parameters Type Name Description IRenderEventHandler handler The handler to add. | Improve this Doc View Source RemoveRenderEventHandler(IRenderEventHandler) Removes a IRenderEventHandler from this renderer. Declaration void RemoveRenderEventHandler(IRenderEventHandler handler) Parameters Type Name Description IRenderEventHandler handler The handler to remove. Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.Rendering.ITestRenderer.html": {
    "href": "api/Bunit.Rendering.ITestRenderer.html",
    "title": "Interface ITestRenderer | bUnit",
    "keywords": "Interface ITestRenderer Represents a generalized Blazor renderer for testing purposes. Inherited Members IRenderEventProducer.AddRenderEventHandler(IRenderEventHandler) IRenderEventProducer.RemoveRenderEventHandler(IRenderEventHandler) Namespace : Bunit.Rendering Assembly : Bunit.Core.dll Syntax public interface ITestRenderer : IRenderEventProducer Properties | Improve this Doc View Source Dispatcher Gets the Dispatcher associated with this ITestRenderer . Declaration Dispatcher Dispatcher { get; } Property Value Type Description Microsoft.AspNetCore.Components.Dispatcher Methods | Improve this Doc View Source DispatchEventAsync(UInt64, EventFieldInfo, EventArgs) Notifies the renderer that an event has occurred. Declaration Task DispatchEventAsync(ulong eventHandlerId, EventFieldInfo fieldInfo, EventArgs eventArgs) Parameters Type Name Description System.UInt64 eventHandlerId The Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.AttributeEventHandlerId value from the original event attribute. Microsoft.AspNetCore.Components.RenderTree.EventFieldInfo fieldInfo Information that the renderer can use to update the state of the existing render tree to match the UI. System.EventArgs eventArgs Arguments to be passed to the event handler. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task which will complete once all asynchronous processing related to the event has completed. | Improve this Doc View Source FindComponent<TComponent>(Int32) Performs a depth-first search for a TComponent child component of the component with the parentComponentId . Declaration (int ComponentId, TComponent Component) FindComponent<TComponent>(int parentComponentId) Parameters Type Name Description System.Int32 parentComponentId The id of the parent component. Returns Type Description System.ValueTuple < System.Int32 , TComponent> The first matching child component. Type Parameters Name Description TComponent Type of component to look for. | Improve this Doc View Source FindComponents<TComponent>(Int32) Performs a depth-first search for all TComponent child components of the component with the parentComponentId . Declaration IReadOnlyList<(int ComponentId, TComponent Component)> FindComponents<TComponent>(int parentComponentId) Parameters Type Name Description System.Int32 parentComponentId The id of the parent component. Returns Type Description System.Collections.Generic.IReadOnlyList < System.ValueTuple < System.Int32 , TComponent>> The matching child components. Type Parameters Name Description TComponent Type of components to look for. | Improve this Doc View Source GetCurrentRenderTreeFrames(Int32) Gets the current render tree for a given component. Declaration ArrayRange<RenderTreeFrame> GetCurrentRenderTreeFrames(int componentId) Parameters Type Name Description System.Int32 componentId The id for the component. Returns Type Description Microsoft.AspNetCore.Components.RenderTree.ArrayRange < Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame > The Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder representing the current render tree. | Improve this Doc View Source RenderComponent<TComponent>(IEnumerable<ComponentParameter>) Instantiates and renders the component of type TComponent . Declaration (int ComponentId, TComponent Component) RenderComponent<TComponent>(IEnumerable<ComponentParameter> parameters) where TComponent : IComponent Parameters Type Name Description System.Collections.Generic.IEnumerable < ComponentParameter > parameters Parameters to pass to the component during first render. Returns Type Description System.ValueTuple < System.Int32 , TComponent> The component and its assigned id. Type Parameters Name Description TComponent Type of component to render. | Improve this Doc View Source RenderFragment(RenderFragment) Renders the provided renderFragment inside a wrapper and returns the wrappers component id. Declaration int RenderFragment(RenderFragment renderFragment) Parameters Type Name Description Microsoft.AspNetCore.Components.RenderFragment renderFragment Microsoft.AspNetCore.Components.RenderFragment to render. Returns Type Description System.Int32 The id of the wrapper component which the renderFragment is rendered inside. Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.Rendering.RenderedFragment.html": {
    "href": "api/Bunit.Rendering.RenderedFragment.html",
    "title": "Class RenderedFragment | bUnit",
    "keywords": "Class RenderedFragment Represents an abstract IRenderedFragment with base functionality. Inheritance System.Object RenderedFragment Implements IRenderedFragment IRenderedFragmentBase IRenderEventHandler Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.Rendering Assembly : Bunit.Web.dll Syntax public class RenderedFragment : IRenderedFragment, IRenderedFragmentBase, IRenderEventHandler Constructors | Improve this Doc View Source RenderedFragment(IServiceProvider, Int32) Creates an instance of the RenderedFragment class. Declaration public RenderedFragment(IServiceProvider services, int componentId) Parameters Type Name Description System.IServiceProvider services System.Int32 componentId Properties | Improve this Doc View Source ComponentId Declaration public int ComponentId { get; } Property Value Type Description System.Int32 | Improve this Doc View Source FirstRenderMarkup Gets the first rendered markup. Declaration protected string FirstRenderMarkup { get; } Property Value Type Description System.String | Improve this Doc View Source Markup Declaration public string Markup { get; } Property Value Type Description System.String | Improve this Doc View Source Nodes Declaration public INodeList Nodes { get; } Property Value Type Description AngleSharp.Dom.INodeList | Improve this Doc View Source RenderCount Declaration public int RenderCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Renderer Gets the renderer used to render the IRenderedFragmentBase . Declaration protected ITestRenderer Renderer { get; } Property Value Type Description ITestRenderer | Improve this Doc View Source Services Declaration public IServiceProvider Services { get; } Property Value Type Description System.IServiceProvider Methods | Improve this Doc View Source GetChangesSinceFirstRender() Declaration public IReadOnlyList<IDiff> GetChangesSinceFirstRender() Returns Type Description System.Collections.Generic.IReadOnlyList < AngleSharp.Diffing.Core.IDiff > | Improve this Doc View Source GetChangesSinceSnapshot() Declaration public IReadOnlyList<IDiff> GetChangesSinceSnapshot() Returns Type Description System.Collections.Generic.IReadOnlyList < AngleSharp.Diffing.Core.IDiff > | Improve this Doc View Source SaveSnapshot() Declaration public void SaveSnapshot() Events | Improve this Doc View Source OnAfterRender Declaration public event Action OnAfterRender Event Type Type Description System.Action | Improve this Doc View Source OnMarkupUpdated Declaration public event Action OnMarkupUpdated Event Type Type Description System.Action Explicit Interface Implementations | Improve this Doc View Source IRenderEventHandler.Handle(RenderEvent) Declaration Task IRenderEventHandler.Handle(RenderEvent renderEvent) Parameters Type Name Description RenderEvent renderEvent Returns Type Description System.Threading.Tasks.Task Implements IRenderedFragment IRenderedFragmentBase IRenderEventHandler Extension Methods CompareToExtensions.CompareTo(IRenderedFragment, String) CompareToExtensions.CompareTo(IRenderedFragment, IRenderedFragment) MarkupMatchesAssertExtensions.MarkupMatches(IRenderedFragment, String, String) MarkupMatchesAssertExtensions.MarkupMatches(IRenderedFragment, IRenderedFragment, String) RenderedFragmentExtensions.Find(IRenderedFragment, String) RenderedFragmentExtensions.FindAll(IRenderedFragment, String, Boolean) RenderedFragmentExtensions.FindComponent<TComponent>(IRenderedFragment) RenderedFragmentExtensions.FindComponents<TComponent>(IRenderedFragment) JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.Rendering.RenderEvent.html": {
    "href": "api/Bunit.Rendering.RenderEvent.html",
    "title": "Class RenderEvent | bUnit",
    "keywords": "Class RenderEvent Represents a render event from a ITestRenderer . Inheritance System.Object RenderEvent Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.Rendering Assembly : Bunit.Core.dll Syntax public sealed class RenderEvent Constructors | Improve this Doc View Source RenderEvent(RenderBatch, ITestRenderer) Creates an instance of the RenderEvent type. Declaration public RenderEvent(in RenderBatch renderBatch, ITestRenderer renderer) Parameters Type Name Description Microsoft.AspNetCore.Components.RenderTree.RenderBatch renderBatch ITestRenderer renderer Properties | Improve this Doc View Source RenderBatch Gets the related RenderBatch from the render. Declaration public RenderBatch RenderBatch { get; } Property Value Type Description Microsoft.AspNetCore.Components.RenderTree.RenderBatch Methods | Improve this Doc View Source DidComponentDispose(Int32) Checks whether the a component with componentId was disposed. Declaration public bool DidComponentDispose(int componentId) Parameters Type Name Description System.Int32 componentId Id of component to check. Returns Type Description System.Boolean True if component was disposed, false otherwise. | Improve this Doc View Source DidComponentRender(Int32) Checks whether the a component with componentId or one or more of its sub components was rendered during the RenderEvent . Declaration public bool DidComponentRender(int componentId) Parameters Type Name Description System.Int32 componentId Id of component to check if rendered. Returns Type Description System.Boolean True if the component or a sub component rendered, false otherwise. | Improve this Doc View Source HasMarkupChanges(Int32) Checks whether the a component with componentId or one or more of its sub components was changed during the RenderEvent . Declaration public bool HasMarkupChanges(int componentId) Parameters Type Name Description System.Int32 componentId Id of component to check for updates to. Returns Type Description System.Boolean True if RenderEvent contains updates to component, false otherwise. Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.Rendering.TestComponentRenderer.html": {
    "href": "api/Bunit.Rendering.TestComponentRenderer.html",
    "title": "Class TestComponentRenderer | bUnit",
    "keywords": "Class TestComponentRenderer Represents a renderer specifically for rendering Razor-based test files (but not the actual tests inside). Inheritance System.Object Microsoft.AspNetCore.Components.RenderTree.Renderer TestComponentRenderer Implements System.IDisposable Inherited Members Microsoft.AspNetCore.Components.RenderTree.Renderer.InstantiateComponent(System.Type) Microsoft.AspNetCore.Components.RenderTree.Renderer.AssignRootComponentId(Microsoft.AspNetCore.Components.IComponent) Microsoft.AspNetCore.Components.RenderTree.Renderer.GetCurrentRenderTreeFrames(System.Int32) Microsoft.AspNetCore.Components.RenderTree.Renderer.RenderRootComponentAsync(System.Int32) Microsoft.AspNetCore.Components.RenderTree.Renderer.RenderRootComponentAsync(System.Int32, Microsoft.AspNetCore.Components.ParameterView) Microsoft.AspNetCore.Components.RenderTree.Renderer.DispatchEventAsync(System.UInt64, Microsoft.AspNetCore.Components.RenderTree.EventFieldInfo, System.EventArgs) Microsoft.AspNetCore.Components.RenderTree.Renderer.ProcessPendingRender() Microsoft.AspNetCore.Components.RenderTree.Renderer.Dispose(System.Boolean) Microsoft.AspNetCore.Components.RenderTree.Renderer.Dispose() Microsoft.AspNetCore.Components.RenderTree.Renderer.UnhandledSynchronizationException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.Rendering Assembly : Bunit.Core.dll Syntax public class TestComponentRenderer : Renderer, IDisposable Constructors | Improve this Doc View Source TestComponentRenderer() Creates an instance of the TestComponentRenderer . Declaration public TestComponentRenderer() | Improve this Doc View Source TestComponentRenderer(IServiceProvider, ILoggerFactory) Creates an instance of the TestComponentRenderer . Declaration public TestComponentRenderer(IServiceProvider serviceProvider, ILoggerFactory loggerFactory) Parameters Type Name Description System.IServiceProvider serviceProvider Microsoft.Extensions.Logging.ILoggerFactory loggerFactory Properties | Improve this Doc View Source Dispatcher Declaration public override Dispatcher Dispatcher { get; } Property Value Type Description Microsoft.AspNetCore.Components.Dispatcher Overrides Microsoft.AspNetCore.Components.RenderTree.Renderer.Dispatcher Methods | Improve this Doc View Source GetRazorTestsFromComponent(Type) Renders an instance of the specified Razor-based test. Declaration public IReadOnlyList<RazorTestBase> GetRazorTestsFromComponent(Type componentType) Parameters Type Name Description System.Type componentType Razor-based test to render. Returns Type Description System.Collections.Generic.IReadOnlyList < RazorTestBase > A list of FragmentBase test definitions found in the test file. | Improve this Doc View Source HandleException(Exception) Declaration protected override void HandleException(Exception exception) Parameters Type Name Description System.Exception exception Overrides Microsoft.AspNetCore.Components.RenderTree.Renderer.HandleException(System.Exception) | Improve this Doc View Source UpdateDisplayAsync(RenderBatch) Declaration protected override Task UpdateDisplayAsync(in RenderBatch renderBatch) Parameters Type Name Description Microsoft.AspNetCore.Components.RenderTree.RenderBatch renderBatch Returns Type Description System.Threading.Tasks.Task Overrides Microsoft.AspNetCore.Components.RenderTree.Renderer.UpdateDisplayAsync(Microsoft.AspNetCore.Components.RenderTree.RenderBatch) Implements System.IDisposable Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.Rendering.TestRenderer.html": {
    "href": "api/Bunit.Rendering.TestRenderer.html",
    "title": "Class TestRenderer | bUnit",
    "keywords": "Class TestRenderer Generalized Blazor renderer for testing purposes. Inheritance System.Object Microsoft.AspNetCore.Components.RenderTree.Renderer TestRenderer Implements System.IDisposable ITestRenderer IRenderEventProducer Inherited Members Microsoft.AspNetCore.Components.RenderTree.Renderer.InstantiateComponent(System.Type) Microsoft.AspNetCore.Components.RenderTree.Renderer.AssignRootComponentId(Microsoft.AspNetCore.Components.IComponent) Microsoft.AspNetCore.Components.RenderTree.Renderer.RenderRootComponentAsync(System.Int32) Microsoft.AspNetCore.Components.RenderTree.Renderer.RenderRootComponentAsync(System.Int32, Microsoft.AspNetCore.Components.ParameterView) Microsoft.AspNetCore.Components.RenderTree.Renderer.ProcessPendingRender() Microsoft.AspNetCore.Components.RenderTree.Renderer.Dispose(System.Boolean) Microsoft.AspNetCore.Components.RenderTree.Renderer.Dispose() Microsoft.AspNetCore.Components.RenderTree.Renderer.UnhandledSynchronizationException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.Rendering Assembly : Bunit.Core.dll Syntax public class TestRenderer : Renderer, IDisposable, ITestRenderer, IRenderEventProducer Constructors | Improve this Doc View Source TestRenderer(IServiceProvider, ILoggerFactory) Creates an instance of the TestRenderer class. Declaration public TestRenderer(IServiceProvider services, ILoggerFactory loggerFactory) Parameters Type Name Description System.IServiceProvider services Microsoft.Extensions.Logging.ILoggerFactory loggerFactory Properties | Improve this Doc View Source Dispatcher Declaration public override Dispatcher Dispatcher { get; } Property Value Type Description Microsoft.AspNetCore.Components.Dispatcher Overrides Microsoft.AspNetCore.Components.RenderTree.Renderer.Dispatcher Methods | Improve this Doc View Source AddRenderEventHandler(IRenderEventHandler) Adds a IRenderEventHandler to this renderer, which will be triggered when the renderer has finished rendering a render cycle. Declaration public void AddRenderEventHandler(IRenderEventHandler handler) Parameters Type Name Description IRenderEventHandler handler The handler to add. | Improve this Doc View Source DispatchEventAsync(UInt64, EventFieldInfo, EventArgs) Declaration public Task DispatchEventAsync(ulong eventHandlerId, EventFieldInfo fieldInfo, EventArgs eventArgs) Parameters Type Name Description System.UInt64 eventHandlerId Microsoft.AspNetCore.Components.RenderTree.EventFieldInfo fieldInfo System.EventArgs eventArgs Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source FindComponent<TComponent>(Int32) Declaration public (int ComponentId, TComponent Component) FindComponent<TComponent>(int parentComponentId) Parameters Type Name Description System.Int32 parentComponentId Returns Type Description System.ValueTuple < System.Int32 , TComponent> Type Parameters Name Description TComponent | Improve this Doc View Source FindComponents<TComponent>(Int32) Declaration public IReadOnlyList<(int ComponentId, TComponent Component)> FindComponents<TComponent>(int parentComponentId) Parameters Type Name Description System.Int32 parentComponentId Returns Type Description System.Collections.Generic.IReadOnlyList < System.ValueTuple < System.Int32 , TComponent>> Type Parameters Name Description TComponent | Improve this Doc View Source GetCurrentRenderTreeFrames(Int32) Declaration public ArrayRange<RenderTreeFrame> GetCurrentRenderTreeFrames(int componentId) Parameters Type Name Description System.Int32 componentId Returns Type Description Microsoft.AspNetCore.Components.RenderTree.ArrayRange < Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame > | Improve this Doc View Source HandleException(Exception) Declaration protected override void HandleException(Exception exception) Parameters Type Name Description System.Exception exception Overrides Microsoft.AspNetCore.Components.RenderTree.Renderer.HandleException(System.Exception) | Improve this Doc View Source RemoveRenderEventHandler(IRenderEventHandler) Removes a IRenderEventHandler from this renderer. Declaration public void RemoveRenderEventHandler(IRenderEventHandler handler) Parameters Type Name Description IRenderEventHandler handler The handler to remove. | Improve this Doc View Source RenderComponent<TComponent>(IEnumerable<ComponentParameter>) Declaration public (int ComponentId, TComponent Component) RenderComponent<TComponent>(IEnumerable<ComponentParameter> parameters) where TComponent : IComponent Parameters Type Name Description System.Collections.Generic.IEnumerable < ComponentParameter > parameters Returns Type Description System.ValueTuple < System.Int32 , TComponent> Type Parameters Name Description TComponent | Improve this Doc View Source RenderFragment(RenderFragment) Declaration public int RenderFragment(RenderFragment renderFragment) Parameters Type Name Description Microsoft.AspNetCore.Components.RenderFragment renderFragment Returns Type Description System.Int32 | Improve this Doc View Source UpdateDisplayAsync(RenderBatch) Declaration protected override Task UpdateDisplayAsync(in RenderBatch renderBatch) Parameters Type Name Description Microsoft.AspNetCore.Components.RenderTree.RenderBatch renderBatch Returns Type Description System.Threading.Tasks.Task Overrides Microsoft.AspNetCore.Components.RenderTree.Renderer.UpdateDisplayAsync(Microsoft.AspNetCore.Components.RenderTree.RenderBatch) Implements System.IDisposable ITestRenderer IRenderEventProducer Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.ShouldBeAdditionAssertExtensions.html": {
    "href": "api/Bunit.ShouldBeAdditionAssertExtensions.html",
    "title": "Class ShouldBeAdditionAssertExtensions | bUnit",
    "keywords": "Class ShouldBeAdditionAssertExtensions A set of addition diff assert extensions Inheritance System.Object ShouldBeAdditionAssertExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Web.dll Syntax public static class ShouldBeAdditionAssertExtensions Methods | Improve this Doc View Source ShouldBeAddition(IDiff, INodeList, String) Verifies that the actualChange AngleSharp.Diffing.Core.IDiff is an addition, i.e. that one or more nodes have been added, and verifies that the additions are equal to the expectedChange nodes. Declaration public static void ShouldBeAddition(this IDiff actualChange, INodeList expectedChange, string userMessage = null) Parameters Type Name Description AngleSharp.Diffing.Core.IDiff actualChange The change to verify AngleSharp.Dom.INodeList expectedChange The expected additions to verify against System.String userMessage A custom user message to display in case the verification fails. | Improve this Doc View Source ShouldBeAddition(IDiff, IRenderedFragment, String) Verifies that the actualChange AngleSharp.Diffing.Core.IDiff is an addition, i.e. that one or more nodes have been added, and verifies that the additions are equal to the rendered markup from the expectedChange IRenderedFragmentBase . Declaration public static void ShouldBeAddition(this IDiff actualChange, IRenderedFragment expectedChange, string userMessage = null) Parameters Type Name Description AngleSharp.Diffing.Core.IDiff actualChange The change to verify IRenderedFragment expectedChange The expected additions to verify against System.String userMessage A custom user message to display in case the verification fails. | Improve this Doc View Source ShouldBeAddition(IDiff, String, String) Verifies that the actualChange AngleSharp.Diffing.Core.IDiff is an addition, i.e. that one or more nodes have been added, and verifies that the additions are equal to the markup specified in the expectedChange input. Declaration public static void ShouldBeAddition(this IDiff actualChange, string expectedChange, string userMessage = null) Parameters Type Name Description AngleSharp.Diffing.Core.IDiff actualChange The change to verify System.String expectedChange The expected additions to verify against System.String userMessage A custom user message to display in case the verification fails."
  },
  "api/Bunit.ShouldBeRemovalAssertExtensions.html": {
    "href": "api/Bunit.ShouldBeRemovalAssertExtensions.html",
    "title": "Class ShouldBeRemovalAssertExtensions | bUnit",
    "keywords": "Class ShouldBeRemovalAssertExtensions A set of removal diff assert extensions Inheritance System.Object ShouldBeRemovalAssertExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Web.dll Syntax public static class ShouldBeRemovalAssertExtensions Methods | Improve this Doc View Source ShouldBeRemoval(IDiff, INodeList, String) Verifies that the actualChange AngleSharp.Diffing.Core.IDiff is an removal, i.e. that one or more nodes have been removed, and verifies that the removed nodes are equal to the expectedChange nodes. Declaration public static void ShouldBeRemoval(this IDiff actualChange, INodeList expectedChange, string userMessage = null) Parameters Type Name Description AngleSharp.Diffing.Core.IDiff actualChange The change to verify AngleSharp.Dom.INodeList expectedChange The expected removal to verify against System.String userMessage A custom user message to display in case the verification fails. | Improve this Doc View Source ShouldBeRemoval(IDiff, IRenderedFragment, String) Verifies that the actualChange AngleSharp.Diffing.Core.IDiff is an removal, i.e. that one or more nodes have been removed, and verifies that the removed nodes are equal to the rendered markup from the expectedChange IRenderedFragmentBase . Declaration public static void ShouldBeRemoval(this IDiff actualChange, IRenderedFragment expectedChange, string userMessage = null) Parameters Type Name Description AngleSharp.Diffing.Core.IDiff actualChange The change to verify IRenderedFragment expectedChange The expected removal to verify against System.String userMessage A custom user message to display in case the verification fails. | Improve this Doc View Source ShouldBeRemoval(IDiff, String, String) Verifies that the actualChange AngleSharp.Diffing.Core.IDiff is an removal, i.e. that one or more nodes have been removed, and verifies that the removed nodes are equal to the markup specified in the expectedChange input. Declaration public static void ShouldBeRemoval(this IDiff actualChange, string expectedChange, string userMessage = null) Parameters Type Name Description AngleSharp.Diffing.Core.IDiff actualChange The change to verify System.String expectedChange The expected removal to verify against System.String userMessage A custom user message to display in case the verification fails."
  },
  "api/Bunit.ShouldBeTextChangeAssertExtensions.html": {
    "href": "api/Bunit.ShouldBeTextChangeAssertExtensions.html",
    "title": "Class ShouldBeTextChangeAssertExtensions | bUnit",
    "keywords": "Class ShouldBeTextChangeAssertExtensions Verification helpers for text Inheritance System.Object ShouldBeTextChangeAssertExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Web.dll Syntax public static class ShouldBeTextChangeAssertExtensions Methods | Improve this Doc View Source ShouldBeAttributeChange(IDiff, String, String, String) Verifies that the actualChange diff is a change to the value of the specific attribute ( expectedAttrName ). Declaration public static void ShouldBeAttributeChange(this IDiff actualChange, string expectedAttrName, string expectedAttrValue, string userMessage = null) Parameters Type Name Description AngleSharp.Diffing.Core.IDiff actualChange The actual change that has happened. System.String expectedAttrName The expected name of the changed attribute. System.String expectedAttrValue The expected value of the changed attribute. System.String userMessage A custom user message to show when the verification fails. | Improve this Doc View Source ShouldBeTextChange(IDiff, INodeList, String) Verifies that a diff is a change to a text node. Declaration public static void ShouldBeTextChange(this IDiff actualChange, INodeList expectedChange, string userMessage = null) Parameters Type Name Description AngleSharp.Diffing.Core.IDiff actualChange The diff to verify. AngleSharp.Dom.INodeList expectedChange The node list containing the expected text change. System.String userMessage A custom error message to show if the verification fails. | Improve this Doc View Source ShouldBeTextChange(IDiff, IRenderedFragment, String) Verifies that a diff is a change to a text node. Declaration public static void ShouldBeTextChange(this IDiff actualChange, IRenderedFragment expectedChange, string userMessage = null) Parameters Type Name Description AngleSharp.Diffing.Core.IDiff actualChange The diff to verify. IRenderedFragment expectedChange The rendered fragment containing the expected text change. System.String userMessage A custom error message to show if the verification fails. | Improve this Doc View Source ShouldBeTextChange(IDiff, String, String) Verifies that a diff is a change to a text node. Declaration public static void ShouldBeTextChange(this IDiff actualChange, string expectedChange, string userMessage = null) Parameters Type Name Description AngleSharp.Diffing.Core.IDiff actualChange The diff to verify. System.String expectedChange The expected text change. System.String userMessage A custom error message to show if the verification fails. | Improve this Doc View Source ShouldHaveSingleTextChange(IEnumerable<IDiff>, String, String) Verifies that a list of diffs contains only a single change, and that change is a change to a text node. Declaration public static void ShouldHaveSingleTextChange(this IEnumerable<IDiff> diffs, string expectedChange, string userMessage = null) Parameters Type Name Description System.Collections.Generic.IEnumerable < AngleSharp.Diffing.Core.IDiff > diffs The list of diffs to verify against. System.String expectedChange The expected text change. System.String userMessage A custom error message to show if the verification fails."
  },
  "api/Bunit.SnapshotTest.html": {
    "href": "api/Bunit.SnapshotTest.html",
    "title": "Class SnapshotTest | bUnit",
    "keywords": "Class SnapshotTest A component used to create snapshot tests. Snapshot tests takes two child inputs, a TestInput section and a ExpectedOutput section. It then compares the result of rendering both using semantic HTML comparison. Inheritance System.Object TestContextBase RazorTestBase SnapshotTest Implements ITestContext System.IDisposable Microsoft.AspNetCore.Components.IComponent Inherited Members RazorTestBase.IsRunning RazorTestBase.Description RazorTestBase.Skip RazorTestBase.Timeout RazorTestBase.RunTest() RazorTestBase.IComponent.Attach(RenderHandle) RazorTestBase.TryRun<T>(Action<T>, T) RazorTestBase.TryRunAsync<T>(Func<T, Task>, T) TestContextBase.Renderer TestContextBase.Services TestContextBase.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Web.dll Syntax public class SnapshotTest : RazorTestBase, ITestContext, IDisposable, IComponent Properties | Improve this Doc View Source DisplayName Declaration public override string DisplayName { get; } Property Value Type Description System.String Overrides RazorTestBase.DisplayName | Improve this Doc View Source ExpectedOutput Gets or sets the expected output of the snapshot test. Declaration [Parameter] public RenderFragment ExpectedOutput { get; set; } Property Value Type Description Microsoft.AspNetCore.Components.RenderFragment | Improve this Doc View Source Setup Sets the setup action to perform before the TestInput and ExpectedOutput is rendered and compared. Declaration [Parameter] public Action<SnapshotTest> Setup { get; set; } Property Value Type Description System.Action < SnapshotTest > | Improve this Doc View Source SetupAsync Sets the setup action to perform before the TestInput and ExpectedOutput is rendered and compared. Declaration [Parameter] public Func<SnapshotTest, Task> SetupAsync { get; set; } Property Value Type Description System.Func < SnapshotTest , System.Threading.Tasks.Task > | Improve this Doc View Source TestInput Gets or sets the input to the snapshot test. Declaration [Parameter] public RenderFragment TestInput { get; set; } Property Value Type Description Microsoft.AspNetCore.Components.RenderFragment Methods | Improve this Doc View Source Run() Declaration protected override Task Run() Returns Type Description System.Threading.Tasks.Task Overrides RazorTestBase.Run() | Improve this Doc View Source SetParametersAsync(ParameterView) Declaration public override Task SetParametersAsync(ParameterView parameters) Parameters Type Name Description Microsoft.AspNetCore.Components.ParameterView parameters Returns Type Description System.Threading.Tasks.Task Overrides RazorTestBase.SetParametersAsync(ParameterView) | Improve this Doc View Source Validate() Declaration public override void Validate() Overrides RazorTestBase.Validate() Implements ITestContext System.IDisposable Microsoft.AspNetCore.Components.IComponent Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.TestComponentBase.html": {
    "href": "api/Bunit.TestComponentBase.html",
    "title": "Class TestComponentBase | bUnit",
    "keywords": "Class TestComponentBase Base test class/test runner, that runs Fixtures defined in razor files. Inheritance System.Object TestComponentBase Implements Microsoft.AspNetCore.Components.IComponent Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Xunit.dll Syntax public abstract class TestComponentBase : IComponent Methods | Improve this Doc View Source BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder . Declaration protected virtual void BuildRenderTree(RenderTreeBuilder builder) Parameters Type Name Description Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder builder The builder to use for rendering. | Improve this Doc View Source RazorTests() Called by the XUnit test runner. Finds all Fixture components in the file and runs their associated tests. Declaration public virtual void RazorTests() Explicit Interface Implementations | Improve this Doc View Source IComponent.Attach(RenderHandle) Declaration void IComponent.Attach(RenderHandle renderHandle) Parameters Type Name Description Microsoft.AspNetCore.Components.RenderHandle renderHandle | Improve this Doc View Source IComponent.SetParametersAsync(ParameterView) Declaration Task IComponent.SetParametersAsync(ParameterView parameters) Parameters Type Name Description Microsoft.AspNetCore.Components.ParameterView parameters Returns Type Description System.Threading.Tasks.Task Implements Microsoft.AspNetCore.Components.IComponent Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.TestContext.html": {
    "href": "api/Bunit.TestContext.html",
    "title": "Class TestContext | bUnit",
    "keywords": "Class TestContext A test context is a factory that makes it possible to create components under tests. Inheritance System.Object TestContextBase TestContext ComponentTestFixture Implements ITestContext System.IDisposable Inherited Members TestContextBase.Renderer TestContextBase.Services TestContextBase.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Web.dll Syntax public class TestContext : TestContextBase, ITestContext, IDisposable Constructors | Improve this Doc View Source TestContext() Creates a new instance of the TestContext class. Declaration public TestContext() Methods | Improve this Doc View Source RenderComponent<TComponent>(ComponentParameter[]) Instantiates and performs a first render of a component of type TComponent . Declaration public IRenderedComponent<TComponent> RenderComponent<TComponent>(params ComponentParameter[] parameters) where TComponent : IComponent Parameters Type Name Description ComponentParameter [] parameters Parameters to pass to the component when it is rendered Returns Type Description IRenderedComponent <TComponent> The rendered TComponent Type Parameters Name Description TComponent Type of the component to render | Improve this Doc View Source RenderComponent<TComponent>(Action<ComponentParameterBuilder<TComponent>>) Instantiates and performs a first render of a component of type TComponent . Declaration public virtual IRenderedComponent<TComponent> RenderComponent<TComponent>(Action<ComponentParameterBuilder<TComponent>> parameterBuilder) where TComponent : IComponent Parameters Type Name Description System.Action < ComponentParameterBuilder <TComponent>> parameterBuilder The ComponentParameterBuilder action to add type safe parameters to pass to the component when it is rendered Returns Type Description IRenderedComponent <TComponent> The rendered TComponent Type Parameters Name Description TComponent Type of the component to render Implements ITestContext System.IDisposable Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.TestContextBase.html": {
    "href": "api/Bunit.TestContextBase.html",
    "title": "Class TestContextBase | bUnit",
    "keywords": "Class TestContextBase A test context is a factory that makes it possible to create components under tests. Inheritance System.Object TestContextBase RazorTestBase TestContext Implements ITestContext System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Core.dll Syntax public class TestContextBase : ITestContext, IDisposable Constructors | Improve this Doc View Source TestContextBase() Creates a new instance of the ITestContext class. Declaration public TestContextBase() Properties | Improve this Doc View Source Renderer Declaration public ITestRenderer Renderer { get; } Property Value Type Description ITestRenderer | Improve this Doc View Source Services Declaration public virtual TestServiceProvider Services { get; } Property Value Type Description TestServiceProvider Methods | Improve this Doc View Source Dispose() Declaration public virtual void Dispose() Implements ITestContext System.IDisposable Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.TestDoubles.Authorization.AuthorizationState.html": {
    "href": "api/Bunit.TestDoubles.Authorization.AuthorizationState.html",
    "title": "Enum AuthorizationState | bUnit",
    "keywords": "Enum AuthorizationState Enumeration that represents the user's authorization state. Namespace : Bunit.TestDoubles.Authorization Assembly : Bunit.Web.dll Syntax public enum AuthorizationState Fields Name Description Authorized Represents authorized user state. Authorizing Represents authorizing user state. Unauthorized Represents unauthorized user state. Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(IElement)"
  },
  "api/Bunit.TestDoubles.Authorization.FakeAuthenticationStateProvider.html": {
    "href": "api/Bunit.TestDoubles.Authorization.FakeAuthenticationStateProvider.html",
    "title": "Class FakeAuthenticationStateProvider | bUnit",
    "keywords": "Class FakeAuthenticationStateProvider Represents a fake implementation of AuthenticationStateProvider for testing purposes that allows user to test components that use authentication and authorization. Inheritance System.Object Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider FakeAuthenticationStateProvider Inherited Members Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider.NotifyAuthenticationStateChanged(System.Threading.Tasks.Task<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>) Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider.AuthenticationStateChanged System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.TestDoubles.Authorization Assembly : Bunit.Web.dll Syntax public class FakeAuthenticationStateProvider : AuthenticationStateProvider Constructors | Improve this Doc View Source FakeAuthenticationStateProvider() Default constructor that creates an unauthenticated state. Declaration public FakeAuthenticationStateProvider() | Improve this Doc View Source FakeAuthenticationStateProvider(String, IEnumerable<String>, IEnumerable<Claim>) Constructor to initialize this state provider with an initial AuthenticationState. Declaration public FakeAuthenticationStateProvider(string userName, IEnumerable<string> roles = null, IEnumerable<Claim> claims = null) Parameters Type Name Description System.String userName Identity's user name. System.Collections.Generic.IEnumerable < System.String > roles Roles that this user principal has. System.Collections.Generic.IEnumerable < System.Security.Claims.Claim > claims Claims to add to user principal. Methods | Improve this Doc View Source GetAuthenticationStateAsync() Overridden method to get the current authentication state. Declaration public override Task<AuthenticationState> GetAuthenticationStateAsync() Returns Type Description System.Threading.Tasks.Task < Microsoft.AspNetCore.Components.Authorization.AuthenticationState > Current authentication state. Overrides Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider.GetAuthenticationStateAsync() | Improve this Doc View Source TriggerAuthenticationStateChanged(String, IEnumerable<String>, IEnumerable<Claim>) Method to sets the authentication state and authenticated user. Declaration public void TriggerAuthenticationStateChanged(string userName, IEnumerable<string> roles = null, IEnumerable<Claim> claims = null) Parameters Type Name Description System.String userName Identity's user name. System.Collections.Generic.IEnumerable < System.String > roles Roles that this user principal has. System.Collections.Generic.IEnumerable < System.Security.Claims.Claim > claims Claims to add to user principal. | Improve this Doc View Source TriggerAuthorizingStateChanged() Method to sets the authentication state to authorizing state. Declaration public void TriggerAuthorizingStateChanged() | Improve this Doc View Source TriggerUnauthenticationStateChanged() Method to sets the authentication state to unauthenticated. Declaration public void TriggerUnauthenticationStateChanged() Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.TestDoubles.Authorization.FakeAuthorizationExtensions.html": {
    "href": "api/Bunit.TestDoubles.Authorization.FakeAuthorizationExtensions.html",
    "title": "Class FakeAuthorizationExtensions | bUnit",
    "keywords": "Class FakeAuthorizationExtensions Helper methods for registering the Authentication/Authorization services with a TestServiceProvider . Inheritance System.Object FakeAuthorizationExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.TestDoubles.Authorization Assembly : Bunit.Web.dll Syntax public static class FakeAuthorizationExtensions Methods | Improve this Doc View Source AddTestAuthorization(TestServiceProvider) Adds the appropriate auth services to the TestServiceProvider to enable an authenticated user. Declaration public static TestAuthorizationContext AddTestAuthorization(this TestServiceProvider serviceProvider) Parameters Type Name Description TestServiceProvider serviceProvider Returns Type Description TestAuthorizationContext"
  },
  "api/Bunit.TestDoubles.Authorization.FakeAuthorizationPolicyProvider.html": {
    "href": "api/Bunit.TestDoubles.Authorization.FakeAuthorizationPolicyProvider.html",
    "title": "Class FakeAuthorizationPolicyProvider | bUnit",
    "keywords": "Class FakeAuthorizationPolicyProvider Test class that provides an implementation of IAuthorizationPolicyProvider that assists user in testing components that use authentication and authorization Inheritance System.Object FakeAuthorizationPolicyProvider Implements Microsoft.AspNetCore.Authorization.IAuthorizationPolicyProvider Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.TestDoubles.Authorization Assembly : Bunit.Web.dll Syntax public class FakeAuthorizationPolicyProvider : IAuthorizationPolicyProvider Methods | Improve this Doc View Source GetDefaultPolicyAsync() Gets the default authorization policy. Declaration public Task<AuthorizationPolicy> GetDefaultPolicyAsync() Returns Type Description System.Threading.Tasks.Task < Microsoft.AspNetCore.Authorization.AuthorizationPolicy > Default policy. | Improve this Doc View Source GetFallbackPolicyAsync() Gets the fallback authorization policy. Declaration public Task<AuthorizationPolicy> GetFallbackPolicyAsync() Returns Type Description System.Threading.Tasks.Task < Microsoft.AspNetCore.Authorization.AuthorizationPolicy > Fallback policy. | Improve this Doc View Source GetPolicyAsync(String) Get the current policy, which in this implementation just returns a test policy. Declaration public Task<AuthorizationPolicy> GetPolicyAsync(string policyName) Parameters Type Name Description System.String policyName Policy name. Returns Type Description System.Threading.Tasks.Task < Microsoft.AspNetCore.Authorization.AuthorizationPolicy > Test policy for the specified name. | Improve this Doc View Source SetPolicyScheme(String) Sets the currently supported policies for this provider. Declaration public void SetPolicyScheme(string policySchemeName) Parameters Type Name Description System.String policySchemeName Policy scheme name to use. Implements Microsoft.AspNetCore.Authorization.IAuthorizationPolicyProvider Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.TestDoubles.Authorization.FakeAuthorizationService.html": {
    "href": "api/Bunit.TestDoubles.Authorization.FakeAuthorizationService.html",
    "title": "Class FakeAuthorizationService | bUnit",
    "keywords": "Class FakeAuthorizationService Test class that provides an implementation of IAuthorizationService that assists user in testing components by allowing them to set the authorization expected authorization response. Inheritance System.Object FakeAuthorizationService Implements Microsoft.AspNetCore.Authorization.IAuthorizationService Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.TestDoubles.Authorization Assembly : Bunit.Web.dll Syntax public class FakeAuthorizationService : IAuthorizationService Constructors | Improve this Doc View Source FakeAuthorizationService(AuthorizationState) Constructor that initializes the authorization state of the service. Declaration public FakeAuthorizationService(AuthorizationState state = AuthorizationState.Authorized) Parameters Type Name Description AuthorizationState state Initial authorization state. Methods | Improve this Doc View Source AuthorizeAsync(ClaimsPrincipal, Object, IEnumerable<IAuthorizationRequirement>) Authorizes the Principal user based solely on the current authorization state. Declaration public Task<AuthorizationResult> AuthorizeAsync(ClaimsPrincipal user, object resource, IEnumerable<IAuthorizationRequirement> requirements) Parameters Type Name Description System.Security.Claims.ClaimsPrincipal user Principal user to authorize. System.Object resource Resource being authorized. System.Collections.Generic.IEnumerable < Microsoft.AspNetCore.Authorization.IAuthorizationRequirement > requirements Authorization requirements. Returns Type Description System.Threading.Tasks.Task < Microsoft.AspNetCore.Authorization.AuthorizationResult > Result of authorize request. | Improve this Doc View Source AuthorizeAsync(ClaimsPrincipal, Object, String) Authorizes the Principal user based solely on the current authorization state. Declaration public Task<AuthorizationResult> AuthorizeAsync(ClaimsPrincipal user, object resource, string policyName) Parameters Type Name Description System.Security.Claims.ClaimsPrincipal user Principal user to authorize. System.Object resource Resource being authorized. System.String policyName Policy to use for authorization. Returns Type Description System.Threading.Tasks.Task < Microsoft.AspNetCore.Authorization.AuthorizationResult > Result of authorize request. | Improve this Doc View Source SetAuthorizationState(AuthorizationState) Method to explicitly set the authorization state. Declaration public void SetAuthorizationState(AuthorizationState state) Parameters Type Name Description AuthorizationState state New state to set. | Improve this Doc View Source SetPolicies(IEnumerable<String>) Sets the supported policies in the Authorization service for current user. Declaration public void SetPolicies(IEnumerable<string> policies) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > policies List of supported policies. | Improve this Doc View Source SetRoles(IEnumerable<String>) Sets the supported roles in the Authorization service for current user. Declaration public void SetRoles(IEnumerable<string> roles) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > roles List of supported roles. Implements Microsoft.AspNetCore.Authorization.IAuthorizationService Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.TestDoubles.Authorization.html": {
    "href": "api/Bunit.TestDoubles.Authorization.html",
    "title": "Namespace Bunit.TestDoubles.Authorization | bUnit",
    "keywords": "Namespace Bunit.TestDoubles.Authorization Classes FakeAuthenticationStateProvider Represents a fake implementation of AuthenticationStateProvider for testing purposes that allows user to test components that use authentication and authorization. FakeAuthorizationExtensions Helper methods for registering the Authentication/Authorization services with a TestServiceProvider . FakeAuthorizationPolicyProvider Test class that provides an implementation of IAuthorizationPolicyProvider that assists user in testing components that use authentication and authorization FakeAuthorizationService Test class that provides an implementation of IAuthorizationService that assists user in testing components by allowing them to set the authorization expected authorization response. MissingFakeAuthorizationException Exception used to indicate that the fake authorization services are required by a test but provided in TestContext.Services. TestAuthorizationContext Root authorization service that manages different authentication/authorization state in the system. TestPolicyRequirement Test requirement that supports the minimum requirement - just a policy name. Enums AuthorizationState Enumeration that represents the user's authorization state."
  },
  "api/Bunit.TestDoubles.Authorization.MissingFakeAuthorizationException.html": {
    "href": "api/Bunit.TestDoubles.Authorization.MissingFakeAuthorizationException.html",
    "title": "Class MissingFakeAuthorizationException | bUnit",
    "keywords": "Class MissingFakeAuthorizationException Exception used to indicate that the fake authorization services are required by a test but provided in TestContext.Services. Inheritance System.Object System.Exception MissingFakeAuthorizationException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Bunit.TestDoubles.Authorization Assembly : Bunit.Web.dll Syntax public class MissingFakeAuthorizationException : Exception, ISerializable Constructors | Improve this Doc View Source MissingFakeAuthorizationException(String) Creates a new instance of the MissingFakeAuthorizationException with the arguments used in the invocation. Declaration public MissingFakeAuthorizationException(string serviceName) Parameters Type Name Description System.String serviceName The service being used. Properties | Improve this Doc View Source ServiceName Gets the invoking service name. Declaration public string ServiceName { get; } Property Value Type Description System.String Implements System.Runtime.Serialization.ISerializable Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.TestDoubles.Authorization.TestAuthorizationContext.html": {
    "href": "api/Bunit.TestDoubles.Authorization.TestAuthorizationContext.html",
    "title": "Class TestAuthorizationContext | bUnit",
    "keywords": "Class TestAuthorizationContext Root authorization service that manages different authentication/authorization state in the system. Inheritance System.Object TestAuthorizationContext Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.TestDoubles.Authorization Assembly : Bunit.Web.dll Syntax public class TestAuthorizationContext Properties | Improve this Doc View Source Claims Gets the set of principal claims for the current user. Declaration public IEnumerable<Claim> Claims { get; } Property Value Type Description System.Collections.Generic.IEnumerable < System.Security.Claims.Claim > | Improve this Doc View Source IsAuthenticated Gets whether user is authenticated. Declaration public bool IsAuthenticated { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Policies Gets the set of authentication policies for the current user. Declaration public IEnumerable<string> Policies { get; } Property Value Type Description System.Collections.Generic.IEnumerable < System.String > | Improve this Doc View Source PolicySchemeName Gets or sets the policy schemeName. Defaults to TestScheme and usually doesn't need to be changed by user. Declaration public string PolicySchemeName { get; set; } Property Value Type Description System.String | Improve this Doc View Source Roles Gets the set of roles for the current user. Declaration public IEnumerable<string> Roles { get; } Property Value Type Description System.Collections.Generic.IEnumerable < System.String > | Improve this Doc View Source State Gets the authorization state for the user. Declaration public AuthorizationState State { get; } Property Value Type Description AuthorizationState | Improve this Doc View Source UserName Gets the authorization context user name. Declaration public string UserName { get; } Property Value Type Description System.String Methods | Improve this Doc View Source RegisterAuthorizationServices(IServiceCollection) Registers authorization services with the specified service provider. Declaration public void RegisterAuthorizationServices(IServiceCollection services) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services Service provider to use. | Improve this Doc View Source SetAuthorized(String, AuthorizationState) Authenticates the user with specified name and authorization state. Declaration public TestAuthorizationContext SetAuthorized(string userName, AuthorizationState state = AuthorizationState.Authorized) Parameters Type Name Description System.String userName User name for the principal identity. AuthorizationState state Authorization state. Returns Type Description TestAuthorizationContext | Improve this Doc View Source SetAuthorizing() Puts the authorization services into the authorizing state. Declaration public TestAuthorizationContext SetAuthorizing() Returns Type Description TestAuthorizationContext | Improve this Doc View Source SetClaims(Claim[]) Sets the claims on the curren user/principal. Declaration public TestAuthorizationContext SetClaims(params Claim[] claims) Parameters Type Name Description System.Security.Claims.Claim [] claims Claims to set. Returns Type Description TestAuthorizationContext | Improve this Doc View Source SetNotAuthorized() Puts the authorization services into an unauthenticated and unauthorized state. Declaration public TestAuthorizationContext SetNotAuthorized() Returns Type Description TestAuthorizationContext | Improve this Doc View Source SetPolicies(String[]) Sets the authorization policies supported for the current user. Declaration public TestAuthorizationContext SetPolicies(params string[] policies) Parameters Type Name Description System.String [] policies Supported authorization policies. Returns Type Description TestAuthorizationContext | Improve this Doc View Source SetRoles(String[]) Sets the user roles in this context.. Declaration public TestAuthorizationContext SetRoles(params string[] roles) Parameters Type Name Description System.String [] roles Roles for the claims principal. Returns Type Description TestAuthorizationContext Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.TestDoubles.Authorization.TestPolicyRequirement.html": {
    "href": "api/Bunit.TestDoubles.Authorization.TestPolicyRequirement.html",
    "title": "Class TestPolicyRequirement | bUnit",
    "keywords": "Class TestPolicyRequirement Test requirement that supports the minimum requirement - just a policy name. Inheritance System.Object TestPolicyRequirement Implements Microsoft.AspNetCore.Authorization.IAuthorizationRequirement Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.TestDoubles.Authorization Assembly : Bunit.Web.dll Syntax public class TestPolicyRequirement : IAuthorizationRequirement Properties | Improve this Doc View Source PolicyName Gets or sets the policy name for this requirement. Declaration public string PolicyName { get; set; } Property Value Type Description System.String Implements Microsoft.AspNetCore.Authorization.IAuthorizationRequirement Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.TestDoubles.JSInterop.html": {
    "href": "api/Bunit.TestDoubles.JSInterop.html",
    "title": "Namespace Bunit.TestDoubles.JSInterop | bUnit",
    "keywords": "Namespace Bunit.TestDoubles.JSInterop Classes JSRuntimeAssertExtensions Assert extensions for JSRuntimeMock JSRuntimePlannedInvocation Represents a planned invocation of a JavaScript function which returns nothing, with specific arguments. JSRuntimePlannedInvocation<TResult> Represents a planned invocation of a JavaScript function with specific arguments. JSRuntimePlannedInvocationBase<TResult> Represents a planned invocation of a JavaScript function with specific arguments. MissingMockJSRuntimeException Exception use to indicate that a MockJSRuntime is required by a test but was not provided. MockJSRuntimeExtensions Helper methods for registering the MockJSRuntime with a TestServiceProvider . MockJSRuntimeInvokeHandler Represents an invoke handler for a mock of a Microsoft.JSInterop.IJSRuntime . UnplannedJSInvocationException Exception use to indicate that an unplanned invocation was received by the MockJSRuntimeInvokeHandler running in Strict . Structs JSRuntimeInvocation Represents an invocation of JavaScript via the JSRuntime Mock Enums JSRuntimeMockMode The execution mode of the MockJSRuntimeExtensions ."
  },
  "api/Bunit.TestDoubles.JSInterop.JSRuntimeAssertExtensions.html": {
    "href": "api/Bunit.TestDoubles.JSInterop.JSRuntimeAssertExtensions.html",
    "title": "Class JSRuntimeAssertExtensions | bUnit",
    "keywords": "Class JSRuntimeAssertExtensions Assert extensions for JSRuntimeMock Inheritance System.Object JSRuntimeAssertExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.TestDoubles.JSInterop Assembly : Bunit.Web.dll Syntax public static class JSRuntimeAssertExtensions Methods | Improve this Doc View Source ShouldBeElementReferenceTo(Object, IElement) Verifies that an argument actualArgument passed to an JSRuntime invocation is an Microsoft.AspNetCore.Components.ElementReference to the expectedTargetElement . Declaration public static void ShouldBeElementReferenceTo(this object actualArgument, IElement expectedTargetElement) Parameters Type Name Description System.Object actualArgument object to verify. AngleSharp.Dom.IElement expectedTargetElement expected targeted element. | Improve this Doc View Source VerifyInvoke(MockJSRuntimeInvokeHandler, String, Int32, String) Verifies that the identifier has been invoked calledTimes times. Declaration public static IReadOnlyList<JSRuntimeInvocation> VerifyInvoke(this MockJSRuntimeInvokeHandler handler, string identifier, int calledTimes, string userMessage = null) Parameters Type Name Description MockJSRuntimeInvokeHandler handler Handler to verify against. System.String identifier Identifier of invocation that should have been invoked. System.Int32 calledTimes The number of times the invocation is expected to have been called. System.String userMessage A custom user message to display if the assertion fails. Returns Type Description System.Collections.Generic.IReadOnlyList < JSRuntimeInvocation > The JSRuntimeInvocation . | Improve this Doc View Source VerifyInvoke(MockJSRuntimeInvokeHandler, String, String) Verifies that the identifier has been invoked one time. Declaration public static JSRuntimeInvocation VerifyInvoke(this MockJSRuntimeInvokeHandler handler, string identifier, string userMessage = null) Parameters Type Name Description MockJSRuntimeInvokeHandler handler Handler to verify against. System.String identifier Identifier of invocation that should have been invoked. System.String userMessage A custom user message to display if the assertion fails. Returns Type Description JSRuntimeInvocation The JSRuntimeInvocation . | Improve this Doc View Source VerifyNotInvoke(MockJSRuntimeInvokeHandler, String, String) Verifies that the identifier was never invoked on the handler . Declaration public static void VerifyNotInvoke(this MockJSRuntimeInvokeHandler handler, string identifier, string userMessage = null) Parameters Type Name Description MockJSRuntimeInvokeHandler handler Handler to verify against. System.String identifier Identifier of invocation that should not have happened. System.String userMessage A custom user message to display if the assertion fails."
  },
  "api/Bunit.TestDoubles.JSInterop.JSRuntimeInvocation.html": {
    "href": "api/Bunit.TestDoubles.JSInterop.JSRuntimeInvocation.html",
    "title": "Struct JSRuntimeInvocation | bUnit",
    "keywords": "Struct JSRuntimeInvocation Represents an invocation of JavaScript via the JSRuntime Mock Implements System.IEquatable < JSRuntimeInvocation > Inherited Members System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Bunit.TestDoubles.JSInterop Assembly : Bunit.Web.dll Syntax public struct JSRuntimeInvocation : IEquatable<JSRuntimeInvocation> Constructors | Improve this Doc View Source JSRuntimeInvocation(String, CancellationToken, Object[]) Creates an instance of the JSRuntimeInvocation . Declaration public JSRuntimeInvocation(string identifier, CancellationToken cancellationToken, object[] args) Parameters Type Name Description System.String identifier System.Threading.CancellationToken cancellationToken System.Object [] args Properties | Improve this Doc View Source Arguments Gets the arguments used in the invocation. Declaration public IReadOnlyList<object> Arguments { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < System.Object > | Improve this Doc View Source CancellationToken Gets the cancellation token used in the invocation. Declaration public CancellationToken CancellationToken { get; } Property Value Type Description System.Threading.CancellationToken | Improve this Doc View Source Identifier Gets the identifier used in the invocation. Declaration public string Identifier { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Equals(JSRuntimeInvocation) Declaration public bool Equals(JSRuntimeInvocation other) Parameters Type Name Description JSRuntimeInvocation other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(JSRuntimeInvocation, JSRuntimeInvocation) Declaration public static bool operator ==(JSRuntimeInvocation left, JSRuntimeInvocation right) Parameters Type Name Description JSRuntimeInvocation left JSRuntimeInvocation right Returns Type Description System.Boolean | Improve this Doc View Source Inequality(JSRuntimeInvocation, JSRuntimeInvocation) Declaration public static bool operator !=(JSRuntimeInvocation left, JSRuntimeInvocation right) Parameters Type Name Description JSRuntimeInvocation left JSRuntimeInvocation right Returns Type Description System.Boolean Implements System.IEquatable<T> Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.TestDoubles.JSInterop.JSRuntimeMockMode.html": {
    "href": "api/Bunit.TestDoubles.JSInterop.JSRuntimeMockMode.html",
    "title": "Enum JSRuntimeMockMode | bUnit",
    "keywords": "Enum JSRuntimeMockMode The execution mode of the MockJSRuntimeExtensions . Namespace : Bunit.TestDoubles.JSInterop Assembly : Bunit.Web.dll Syntax public enum JSRuntimeMockMode Fields Name Description Loose Loose configures the MockJSRuntimeExtensions to return default TValue for Microsoft.JSInterop.IJSRuntime.InvokeAsync``1(System.String,System.Object[]) calls to the mock. Strict Strict configures the MockJSRuntimeExtensions to throw an UnplannedJSInvocationException exception when a call to for Microsoft.JSInterop.IJSRuntime.InvokeAsync``1(System.String,System.Object[]) has not been setup in the mock. Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(IElement)"
  },
  "api/Bunit.TestDoubles.JSInterop.JSRuntimePlannedInvocation.html": {
    "href": "api/Bunit.TestDoubles.JSInterop.JSRuntimePlannedInvocation.html",
    "title": "Class JSRuntimePlannedInvocation | bUnit",
    "keywords": "Class JSRuntimePlannedInvocation Represents a planned invocation of a JavaScript function which returns nothing, with specific arguments. Inheritance System.Object JSRuntimePlannedInvocationBase < System.Object > JSRuntimePlannedInvocation Inherited Members JSRuntimePlannedInvocationBase<Object>.Identifier JSRuntimePlannedInvocationBase<Object>.Invocations JSRuntimePlannedInvocationBase<Object>.SetResultBase(Object) JSRuntimePlannedInvocationBase<Object>.SetException<TException>(TException) JSRuntimePlannedInvocationBase<Object>.SetCanceled() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.TestDoubles.JSInterop Assembly : Bunit.Web.dll Syntax public class JSRuntimePlannedInvocation : JSRuntimePlannedInvocationBase<object> Methods | Improve this Doc View Source SetVoidResult() Completes the current awaiting void invocation requests. Declaration public void SetVoidResult() Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.TestDoubles.JSInterop.JSRuntimePlannedInvocation-1.html": {
    "href": "api/Bunit.TestDoubles.JSInterop.JSRuntimePlannedInvocation-1.html",
    "title": "Class JSRuntimePlannedInvocation<TResult> | bUnit",
    "keywords": "Class JSRuntimePlannedInvocation<TResult> Represents a planned invocation of a JavaScript function with specific arguments. Inheritance System.Object JSRuntimePlannedInvocationBase <TResult> JSRuntimePlannedInvocation<TResult> Inherited Members JSRuntimePlannedInvocationBase<TResult>.Identifier JSRuntimePlannedInvocationBase<TResult>.Invocations JSRuntimePlannedInvocationBase<TResult>.SetResultBase(TResult) JSRuntimePlannedInvocationBase<TResult>.SetException<TException>(TException) JSRuntimePlannedInvocationBase<TResult>.SetCanceled() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.TestDoubles.JSInterop Assembly : Bunit.Web.dll Syntax public class JSRuntimePlannedInvocation<TResult> : JSRuntimePlannedInvocationBase<TResult> Type Parameters Name Description TResult Methods | Improve this Doc View Source SetResult(TResult) Sets the TResult result that invocations will receive. Declaration public void SetResult(TResult result) Parameters Type Name Description TResult result Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.TestDoubles.JSInterop.JSRuntimePlannedInvocationBase-1.html": {
    "href": "api/Bunit.TestDoubles.JSInterop.JSRuntimePlannedInvocationBase-1.html",
    "title": "Class JSRuntimePlannedInvocationBase<TResult> | bUnit",
    "keywords": "Class JSRuntimePlannedInvocationBase<TResult> Represents a planned invocation of a JavaScript function with specific arguments. Inheritance System.Object JSRuntimePlannedInvocationBase<TResult> JSRuntimePlannedInvocation JSRuntimePlannedInvocation <TResult> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.TestDoubles.JSInterop Assembly : Bunit.Web.dll Syntax public abstract class JSRuntimePlannedInvocationBase<TResult> Type Parameters Name Description TResult Constructors | Improve this Doc View Source JSRuntimePlannedInvocationBase(String, Func<IReadOnlyList<Object>, Boolean>) Creates an instance of a JSRuntimePlannedInvocationBase<TResult> . Declaration protected JSRuntimePlannedInvocationBase(string identifier, Func<IReadOnlyList<object>, bool> matcher) Parameters Type Name Description System.String identifier System.Func < System.Collections.Generic.IReadOnlyList < System.Object >, System.Boolean > matcher Properties | Improve this Doc View Source Identifier The expected identifier for the function to invoke. Declaration public string Identifier { get; } Property Value Type Description System.String | Improve this Doc View Source Invocations Gets the invocations that this JSRuntimePlannedInvocation<TResult> has matched with. Declaration public IReadOnlyList<JSRuntimeInvocation> Invocations { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < JSRuntimeInvocation > Methods | Improve this Doc View Source SetCanceled() Marks the System.Threading.Tasks.Task<TResult> that invocations will receive as canceled. Declaration public void SetCanceled() | Improve this Doc View Source SetException<TException>(TException) Sets the TException exception that invocations will receive. Declaration public void SetException<TException>(TException exception) where TException : Exception Parameters Type Name Description TException exception Type Parameters Name Description TException | Improve this Doc View Source SetResultBase(TResult) Sets the TResult result that invocations will receive. Declaration protected void SetResultBase(TResult result) Parameters Type Name Description TResult result Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.TestDoubles.JSInterop.MissingMockJSRuntimeException.html": {
    "href": "api/Bunit.TestDoubles.JSInterop.MissingMockJSRuntimeException.html",
    "title": "Class MissingMockJSRuntimeException | bUnit",
    "keywords": "Class MissingMockJSRuntimeException Exception use to indicate that a MockJSRuntime is required by a test but was not provided. Inheritance System.Object System.Exception MissingMockJSRuntimeException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Bunit.TestDoubles.JSInterop Assembly : Bunit.Web.dll Syntax public class MissingMockJSRuntimeException : Exception, ISerializable Constructors | Improve this Doc View Source MissingMockJSRuntimeException(String, Object[]) Creates a new instance of the MissingMockJSRuntimeException with the arguments used in the invocation. Declaration public MissingMockJSRuntimeException(string identifier, object[] arguments) Parameters Type Name Description System.String identifier The identifer used in the invocation. System.Object [] arguments The args used in the invocation, if any Properties | Improve this Doc View Source Arguments Arguments passed to the JSInvoke method. Declaration public IReadOnlyList<object> Arguments { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < System.Object > | Improve this Doc View Source Identifier Identifier string used in the JSInvoke method. Declaration public string Identifier { get; } Property Value Type Description System.String Implements System.Runtime.Serialization.ISerializable Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.TestDoubles.JSInterop.MockJSRuntimeExtensions.html": {
    "href": "api/Bunit.TestDoubles.JSInterop.MockJSRuntimeExtensions.html",
    "title": "Class MockJSRuntimeExtensions | bUnit",
    "keywords": "Class MockJSRuntimeExtensions Helper methods for registering the MockJSRuntime with a TestServiceProvider . Inheritance System.Object MockJSRuntimeExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.TestDoubles.JSInterop Assembly : Bunit.Web.dll Syntax public static class MockJSRuntimeExtensions Methods | Improve this Doc View Source AddMockJSRuntime(TestServiceProvider, JSRuntimeMockMode) Adds the MockJSRuntimeInvokeHandler to the TestServiceProvider . Declaration public static MockJSRuntimeInvokeHandler AddMockJSRuntime(this TestServiceProvider serviceProvider, JSRuntimeMockMode mode = JSRuntimeMockMode.Loose) Parameters Type Name Description TestServiceProvider serviceProvider JSRuntimeMockMode mode Returns Type Description MockJSRuntimeInvokeHandler The added MockJSRuntimeInvokeHandler ."
  },
  "api/Bunit.TestDoubles.JSInterop.MockJSRuntimeInvokeHandler.html": {
    "href": "api/Bunit.TestDoubles.JSInterop.MockJSRuntimeInvokeHandler.html",
    "title": "Class MockJSRuntimeInvokeHandler | bUnit",
    "keywords": "Class MockJSRuntimeInvokeHandler Represents an invoke handler for a mock of a Microsoft.JSInterop.IJSRuntime . Inheritance System.Object MockJSRuntimeInvokeHandler Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.TestDoubles.JSInterop Assembly : Bunit.Web.dll Syntax public class MockJSRuntimeInvokeHandler Constructors | Improve this Doc View Source MockJSRuntimeInvokeHandler(JSRuntimeMockMode) Creates a MockJSRuntimeInvokeHandler . Declaration public MockJSRuntimeInvokeHandler(JSRuntimeMockMode mode = JSRuntimeMockMode.Loose) Parameters Type Name Description JSRuntimeMockMode mode The JSRuntimeMockMode the handler should use. Properties | Improve this Doc View Source Invocations Gets a dictionary of all System.Collections.Generic.List`1 this mock has observed. Declaration public IReadOnlyDictionary<string, List<JSRuntimeInvocation>> Invocations { get; } Property Value Type Description System.Collections.Generic.IReadOnlyDictionary < System.String , System.Collections.Generic.List < JSRuntimeInvocation >> | Improve this Doc View Source Mode Gets whether the mock is running in Loose or Strict . Declaration public JSRuntimeMockMode Mode { get; } Property Value Type Description JSRuntimeMockMode Methods | Improve this Doc View Source Setup<TResult>(String, Func<IReadOnlyList<Object>, Boolean>) Configure a planned JSInterop invocation with the identifier and arguments passing the argumentsMatcher test. Declaration public JSRuntimePlannedInvocation<TResult> Setup<TResult>(string identifier, Func<IReadOnlyList<object>, bool> argumentsMatcher) Parameters Type Name Description System.String identifier The identifier to setup a response for System.Func < System.Collections.Generic.IReadOnlyList < System.Object >, System.Boolean > argumentsMatcher A matcher that is passed arguments received in invocations to identifier . If it returns true the invocation is matched. Returns Type Description JSRuntimePlannedInvocation <TResult> A JSRuntimePlannedInvocation<TResult> . Type Parameters Name Description TResult The result type of the invocation | Improve this Doc View Source Setup<TResult>(String, Object[]) Configure a planned JSInterop invocation with the identifier and arguments . Declaration public JSRuntimePlannedInvocation<TResult> Setup<TResult>(string identifier, params object[] arguments) Parameters Type Name Description System.String identifier The identifier to setup a response for System.Object [] arguments The arguments that an invocation to identifier should match. Returns Type Description JSRuntimePlannedInvocation <TResult> A JSRuntimePlannedInvocation<TResult> . Type Parameters Name Description TResult | Improve this Doc View Source SetupVoid(String, Func<IReadOnlyList<Object>, Boolean>) Configure a planned JSInterop invocation with the identifier and arguments passing the argumentsMatcher test, that should not receive any result. Declaration public JSRuntimePlannedInvocation SetupVoid(string identifier, Func<IReadOnlyList<object>, bool> argumentsMatcher) Parameters Type Name Description System.String identifier The identifier to setup a response for System.Func < System.Collections.Generic.IReadOnlyList < System.Object >, System.Boolean > argumentsMatcher A matcher that is passed arguments received in invocations to identifier . If it returns true the invocation is matched. Returns Type Description JSRuntimePlannedInvocation A JSRuntimePlannedInvocation . | Improve this Doc View Source SetupVoid(String, Object[]) Configure a planned JSInterop invocation with the identifier and arguments , that should not receive any result. Declaration public JSRuntimePlannedInvocation SetupVoid(string identifier, params object[] arguments) Parameters Type Name Description System.String identifier The identifier to setup a response for System.Object [] arguments The arguments that an invocation to identifier should match. Returns Type Description JSRuntimePlannedInvocation A JSRuntimePlannedInvocation . | Improve this Doc View Source ToJSRuntime() Gets the mocked Microsoft.JSInterop.IJSRuntime instance. Declaration public IJSRuntime ToJSRuntime() Returns Type Description Microsoft.JSInterop.IJSRuntime Extension Methods JSRuntimeAssertExtensions.VerifyNotInvoke(MockJSRuntimeInvokeHandler, String, String) JSRuntimeAssertExtensions.VerifyInvoke(MockJSRuntimeInvokeHandler, String, String) JSRuntimeAssertExtensions.VerifyInvoke(MockJSRuntimeInvokeHandler, String, Int32, String) JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.TestDoubles.JSInterop.UnplannedJSInvocationException.html": {
    "href": "api/Bunit.TestDoubles.JSInterop.UnplannedJSInvocationException.html",
    "title": "Class UnplannedJSInvocationException | bUnit",
    "keywords": "Class UnplannedJSInvocationException Exception use to indicate that an unplanned invocation was received by the MockJSRuntimeInvokeHandler running in Strict . Inheritance System.Object System.Exception UnplannedJSInvocationException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Bunit.TestDoubles.JSInterop Assembly : Bunit.Web.dll Syntax public class UnplannedJSInvocationException : Exception, ISerializable Constructors | Improve this Doc View Source UnplannedJSInvocationException(JSRuntimeInvocation) Creates a new instance of the UnplannedJSInvocationException with the provided Invocation attached. Declaration public UnplannedJSInvocationException(JSRuntimeInvocation invocation) Parameters Type Name Description JSRuntimeInvocation invocation The unplanned invocation. Properties | Improve this Doc View Source Invocation Gets the unplanned invocation. Declaration public JSRuntimeInvocation Invocation { get; } Property Value Type Description JSRuntimeInvocation Implements System.Runtime.Serialization.ISerializable Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.TestServiceProvider.html": {
    "href": "api/Bunit.TestServiceProvider.html",
    "title": "Class TestServiceProvider | bUnit",
    "keywords": "Class TestServiceProvider Represents a System.IServiceProvider and Microsoft.Extensions.DependencyInjection.IServiceCollection as a single type used for test purposes. Inheritance System.Object TestServiceProvider Implements System.IServiceProvider Microsoft.Extensions.DependencyInjection.IServiceCollection System.Collections.Generic.IList < Microsoft.Extensions.DependencyInjection.ServiceDescriptor > System.Collections.Generic.ICollection < Microsoft.Extensions.DependencyInjection.ServiceDescriptor > System.Collections.Generic.IEnumerable < Microsoft.Extensions.DependencyInjection.ServiceDescriptor > System.Collections.IEnumerable System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Core.dll Syntax public sealed class TestServiceProvider : IServiceProvider, IServiceCollection, IList<ServiceDescriptor>, ICollection<ServiceDescriptor>, IEnumerable<ServiceDescriptor>, IEnumerable, IDisposable Constructors | Improve this Doc View Source TestServiceProvider(IServiceCollection) Creates an instance of the TestServiceProvider and sets its service collection to the provided initialServiceCollection , if any. Declaration public TestServiceProvider(IServiceCollection initialServiceCollection = null) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection initialServiceCollection Fields | Improve this Doc View Source Default Gets a reusable default test service provider. Declaration public static readonly IServiceProvider Default Field Value Type Description System.IServiceProvider Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source IsProviderInitialized Gets whether this TestServiceProvider has been initialized, and no longer will accept calls to the AddService 's methods. Declaration public bool IsProviderInitialized { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Item[Int32] Declaration public ServiceDescriptor this[int index] { get; set; } Parameters Type Name Description System.Int32 index Property Value Type Description Microsoft.Extensions.DependencyInjection.ServiceDescriptor Methods | Improve this Doc View Source Add(ServiceDescriptor) Declaration public void Add(ServiceDescriptor item) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.ServiceDescriptor item | Improve this Doc View Source Clear() Declaration public void Clear() | Improve this Doc View Source Contains(ServiceDescriptor) Declaration public bool Contains(ServiceDescriptor item) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.ServiceDescriptor item Returns Type Description System.Boolean | Improve this Doc View Source CopyTo(ServiceDescriptor[], Int32) Declaration public void CopyTo(ServiceDescriptor[] array, int arrayIndex) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.ServiceDescriptor [] array System.Int32 arrayIndex | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<ServiceDescriptor> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < Microsoft.Extensions.DependencyInjection.ServiceDescriptor > | Improve this Doc View Source GetService(Type) Declaration public object GetService(Type serviceType) Parameters Type Name Description System.Type serviceType Returns Type Description System.Object | Improve this Doc View Source GetService<TService>() Get service of type T from the test provider. Declaration public TService GetService<TService>() Returns Type Description TService A service object of type T or null if there is no such service. Type Parameters Name Description TService The type of service object to get. | Improve this Doc View Source IndexOf(ServiceDescriptor) Declaration public int IndexOf(ServiceDescriptor item) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.ServiceDescriptor item Returns Type Description System.Int32 | Improve this Doc View Source Insert(Int32, ServiceDescriptor) Declaration public void Insert(int index, ServiceDescriptor item) Parameters Type Name Description System.Int32 index Microsoft.Extensions.DependencyInjection.ServiceDescriptor item | Improve this Doc View Source Remove(ServiceDescriptor) Declaration public bool Remove(ServiceDescriptor item) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.ServiceDescriptor item Returns Type Description System.Boolean | Improve this Doc View Source RemoveAt(Int32) Declaration public void RemoveAt(int index) Parameters Type Name Description System.Int32 index Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.IServiceProvider Microsoft.Extensions.DependencyInjection.IServiceCollection System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable System.IDisposable Extension Methods LoggerHelperExtensions.CreateLogger<TCategoryName>(IServiceProvider) TestServiceProviderExtensions.AddDefaultTestContextServices(IServiceCollection) FakeAuthorizationExtensions.AddTestAuthorization(TestServiceProvider) JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement) MockJSRuntimeExtensions.AddMockJSRuntime(TestServiceProvider, JSRuntimeMockMode) CollectionAssertExtensions.ShouldAllBe<T>(IEnumerable<T>, Action<T>[]) CollectionAssertExtensions.ShouldAllBe<T>(IEnumerable<T>, Action<T, Int32>[]) XunitLoggerExtensions.AddXunitLogger(IServiceCollection, LogLevel) XunitLoggerExtensions.AddXunitLogger(IServiceCollection, ITestOutputHelper, LogLevel)"
  },
  "api/Bunit.TouchEventDispatchExtensions.html": {
    "href": "api/Bunit.TouchEventDispatchExtensions.html",
    "title": "Class TouchEventDispatchExtensions | bUnit",
    "keywords": "Class TouchEventDispatchExtensions Pointer event dispatch helper extension methods. Inheritance System.Object TouchEventDispatchExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Web.dll Syntax public static class TouchEventDispatchExtensions Methods | Improve this Doc View Source TouchCancel(IElement, TouchEventArgs) Raises the @ontouchcancel event on element , passing the provided eventArgs to the event handler. Declaration public static void TouchCancel(this IElement element, TouchEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.TouchEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source TouchCancel(IElement, Int64, TouchPoint[], TouchPoint[], TouchPoint[], Boolean, Boolean, Boolean, Boolean, String) Raises the @ontouchcancel event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.TouchEventArgs object. Declaration public static void TouchCancel(this IElement element, long detail = 0L, TouchPoint[] touches = null, TouchPoint[] targetTouches = null, TouchPoint[] changedTouches = null, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. Microsoft.AspNetCore.Components.Web.TouchPoint [] touches A list of Microsoft.AspNetCore.Components.Web.TouchPoint for every point of contact currently touching the surface. Microsoft.AspNetCore.Components.Web.TouchPoint [] targetTouches A list of Microsoft.AspNetCore.Components.Web.TouchPoint for every point of contact that is touching the surface and started on the element that is the target of the current event. Microsoft.AspNetCore.Components.Web.TouchPoint [] changedTouches A list of Touches for every point of contact which contributed to the event. For the touchstart event this must be a list of the touch points that just became active with the current event. For the touchmove event this must be a list of the touch points that have moved since the last event. For the touchend and touchcancel events this must be a list of the touch points that have just been removed from the surface. System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. | Improve this Doc View Source TouchCancelAsync(IElement, TouchEventArgs) Raises the @ontouchcancel event on element , passing the provided eventArgs to the event handler. Declaration public static Task TouchCancelAsync(this IElement element, TouchEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element Microsoft.AspNetCore.Components.Web.TouchEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source TouchEnd(IElement, TouchEventArgs) Raises the @ontouchend event on element , passing the provided eventArgs to the event handler. Declaration public static void TouchEnd(this IElement element, TouchEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.TouchEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source TouchEnd(IElement, Int64, TouchPoint[], TouchPoint[], TouchPoint[], Boolean, Boolean, Boolean, Boolean, String) Raises the @ontouchend event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.TouchEventArgs object. Declaration public static void TouchEnd(this IElement element, long detail = 0L, TouchPoint[] touches = null, TouchPoint[] targetTouches = null, TouchPoint[] changedTouches = null, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. Microsoft.AspNetCore.Components.Web.TouchPoint [] touches A list of Microsoft.AspNetCore.Components.Web.TouchPoint for every point of contact currently touching the surface. Microsoft.AspNetCore.Components.Web.TouchPoint [] targetTouches A list of Microsoft.AspNetCore.Components.Web.TouchPoint for every point of contact that is touching the surface and started on the element that is the target of the current event. Microsoft.AspNetCore.Components.Web.TouchPoint [] changedTouches A list of Touches for every point of contact which contributed to the event. For the touchstart event this must be a list of the touch points that just became active with the current event. For the touchmove event this must be a list of the touch points that have moved since the last event. For the touchend and touchcancel events this must be a list of the touch points that have just been removed from the surface. System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. | Improve this Doc View Source TouchEndAsync(IElement, TouchEventArgs) Raises the @ontouchend event on element , passing the provided eventArgs to the event handler. Declaration public static Task TouchEndAsync(this IElement element, TouchEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element Microsoft.AspNetCore.Components.Web.TouchEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source TouchEnter(IElement, TouchEventArgs) Raises the @ontouchenter event on element , passing the provided eventArgs to the event handler. Declaration public static void TouchEnter(this IElement element, TouchEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.TouchEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source TouchEnter(IElement, Int64, TouchPoint[], TouchPoint[], TouchPoint[], Boolean, Boolean, Boolean, Boolean, String) Raises the @ontouchenter event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.TouchEventArgs object. Declaration public static void TouchEnter(this IElement element, long detail = 0L, TouchPoint[] touches = null, TouchPoint[] targetTouches = null, TouchPoint[] changedTouches = null, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. Microsoft.AspNetCore.Components.Web.TouchPoint [] touches A list of Microsoft.AspNetCore.Components.Web.TouchPoint for every point of contact currently touching the surface. Microsoft.AspNetCore.Components.Web.TouchPoint [] targetTouches A list of Microsoft.AspNetCore.Components.Web.TouchPoint for every point of contact that is touching the surface and started on the element that is the target of the current event. Microsoft.AspNetCore.Components.Web.TouchPoint [] changedTouches A list of Touches for every point of contact which contributed to the event. For the touchstart event this must be a list of the touch points that just became active with the current event. For the touchmove event this must be a list of the touch points that have moved since the last event. For the touchend and touchcancel events this must be a list of the touch points that have just been removed from the surface. System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. | Improve this Doc View Source TouchEnterAsync(IElement, TouchEventArgs) Raises the @ontouchenter event on element , passing the provided eventArgs to the event handler. Declaration public static Task TouchEnterAsync(this IElement element, TouchEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element Microsoft.AspNetCore.Components.Web.TouchEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source TouchLeave(IElement, TouchEventArgs) Raises the @ontouchleave event on element , passing the provided eventArgs to the event handler. Declaration public static void TouchLeave(this IElement element, TouchEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.TouchEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source TouchLeave(IElement, Int64, TouchPoint[], TouchPoint[], TouchPoint[], Boolean, Boolean, Boolean, Boolean, String) Raises the @ontouchleave event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.TouchEventArgs object. Declaration public static void TouchLeave(this IElement element, long detail = 0L, TouchPoint[] touches = null, TouchPoint[] targetTouches = null, TouchPoint[] changedTouches = null, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. Microsoft.AspNetCore.Components.Web.TouchPoint [] touches A list of Microsoft.AspNetCore.Components.Web.TouchPoint for every point of contact currently touching the surface. Microsoft.AspNetCore.Components.Web.TouchPoint [] targetTouches A list of Microsoft.AspNetCore.Components.Web.TouchPoint for every point of contact that is touching the surface and started on the element that is the target of the current event. Microsoft.AspNetCore.Components.Web.TouchPoint [] changedTouches A list of Touches for every point of contact which contributed to the event. For the touchstart event this must be a list of the touch points that just became active with the current event. For the touchmove event this must be a list of the touch points that have moved since the last event. For the touchend and touchcancel events this must be a list of the touch points that have just been removed from the surface. System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. | Improve this Doc View Source TouchLeaveAsync(IElement, TouchEventArgs) Raises the @ontouchleave event on element , passing the provided eventArgs to the event handler. Declaration public static Task TouchLeaveAsync(this IElement element, TouchEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element Microsoft.AspNetCore.Components.Web.TouchEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source TouchMove(IElement, TouchEventArgs) Raises the @ontouchmove event on element , passing the provided eventArgs to the event handler. Declaration public static void TouchMove(this IElement element, TouchEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.TouchEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source TouchMove(IElement, Int64, TouchPoint[], TouchPoint[], TouchPoint[], Boolean, Boolean, Boolean, Boolean, String) Raises the @ontouchmove event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.TouchEventArgs object. Declaration public static void TouchMove(this IElement element, long detail = 0L, TouchPoint[] touches = null, TouchPoint[] targetTouches = null, TouchPoint[] changedTouches = null, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. Microsoft.AspNetCore.Components.Web.TouchPoint [] touches A list of Microsoft.AspNetCore.Components.Web.TouchPoint for every point of contact currently touching the surface. Microsoft.AspNetCore.Components.Web.TouchPoint [] targetTouches A list of Microsoft.AspNetCore.Components.Web.TouchPoint for every point of contact that is touching the surface and started on the element that is the target of the current event. Microsoft.AspNetCore.Components.Web.TouchPoint [] changedTouches A list of Touches for every point of contact which contributed to the event. For the touchstart event this must be a list of the touch points that just became active with the current event. For the touchmove event this must be a list of the touch points that have moved since the last event. For the touchend and touchcancel events this must be a list of the touch points that have just been removed from the surface. System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. | Improve this Doc View Source TouchMoveAsync(IElement, TouchEventArgs) Raises the @ontouchmove event on element , passing the provided eventArgs to the event handler. Declaration public static Task TouchMoveAsync(this IElement element, TouchEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element Microsoft.AspNetCore.Components.Web.TouchEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source TouchStart(IElement, TouchEventArgs) Raises the @ontouchstart event on element , passing the provided eventArgs to the event handler. Declaration public static void TouchStart(this IElement element, TouchEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.TouchEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source TouchStart(IElement, Int64, TouchPoint[], TouchPoint[], TouchPoint[], Boolean, Boolean, Boolean, Boolean, String) Raises the @ontouchstart event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.TouchEventArgs object. Declaration public static void TouchStart(this IElement element, long detail = 0L, TouchPoint[] touches = null, TouchPoint[] targetTouches = null, TouchPoint[] changedTouches = null, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. Microsoft.AspNetCore.Components.Web.TouchPoint [] touches A list of Microsoft.AspNetCore.Components.Web.TouchPoint for every point of contact currently touching the surface. Microsoft.AspNetCore.Components.Web.TouchPoint [] targetTouches A list of Microsoft.AspNetCore.Components.Web.TouchPoint for every point of contact that is touching the surface and started on the element that is the target of the current event. Microsoft.AspNetCore.Components.Web.TouchPoint [] changedTouches A list of Touches for every point of contact which contributed to the event. For the touchstart event this must be a list of the touch points that just became active with the current event. For the touchmove event this must be a list of the touch points that have moved since the last event. For the touchend and touchcancel events this must be a list of the touch points that have just been removed from the surface. System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. | Improve this Doc View Source TouchStartAsync(IElement, TouchEventArgs) Raises the @ontouchstart event on element , passing the provided eventArgs to the event handler. Declaration public static Task TouchStartAsync(this IElement element, TouchEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element Microsoft.AspNetCore.Components.Web.TouchEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done."
  },
  "api/Bunit.Xunit.Logging.html": {
    "href": "api/Bunit.Xunit.Logging.html",
    "title": "Namespace Bunit.Xunit.Logging | bUnit",
    "keywords": "Namespace Bunit.Xunit.Logging Classes XunitLogger Represents a Microsoft.Extensions.Logging.ILogger that will write logs to the provided Xunit.Abstractions.ITestOutputHelper . XunitLoggerFactory Represents a xUnit logger factory XunitLoggerProvider Represents an Microsoft.Extensions.Logging.ILoggerProvider for logging to XunitLogger ."
  },
  "api/Bunit.Xunit.Logging.XunitLogger.html": {
    "href": "api/Bunit.Xunit.Logging.XunitLogger.html",
    "title": "Class XunitLogger | bUnit",
    "keywords": "Class XunitLogger Represents a Microsoft.Extensions.Logging.ILogger that will write logs to the provided Xunit.Abstractions.ITestOutputHelper . Inheritance System.Object XunitLogger Implements Microsoft.Extensions.Logging.ILogger Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.Xunit.Logging Assembly : Bunit.Xunit.dll Syntax public class XunitLogger : ILogger Constructors | Improve this Doc View Source XunitLogger(ITestOutputHelper, String, LogLevel) Declaration public XunitLogger(ITestOutputHelper output, string name, LogLevel minimumLogLevel) Parameters Type Name Description Xunit.Abstractions.ITestOutputHelper output System.String name Microsoft.Extensions.Logging.LogLevel minimumLogLevel Methods | Improve this Doc View Source BeginScope<TState>(TState) Declaration public IDisposable BeginScope<TState>(TState state) Parameters Type Name Description TState state Returns Type Description System.IDisposable Type Parameters Name Description TState | Improve this Doc View Source IsEnabled(LogLevel) Declaration public bool IsEnabled(LogLevel logLevel) Parameters Type Name Description Microsoft.Extensions.Logging.LogLevel logLevel Returns Type Description System.Boolean | Improve this Doc View Source Log<TState>(LogLevel, EventId, TState, Exception, Func<TState, Exception, String>) Declaration public void Log<TState>(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func<TState, Exception, string> formatter) Parameters Type Name Description Microsoft.Extensions.Logging.LogLevel logLevel Microsoft.Extensions.Logging.EventId eventId TState state System.Exception exception System.Func <TState, System.Exception , System.String > formatter Type Parameters Name Description TState Implements Microsoft.Extensions.Logging.ILogger Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.Xunit.Logging.XunitLoggerFactory.html": {
    "href": "api/Bunit.Xunit.Logging.XunitLoggerFactory.html",
    "title": "Class XunitLoggerFactory | bUnit",
    "keywords": "Class XunitLoggerFactory Represents a xUnit logger factory Inheritance System.Object Microsoft.Extensions.Logging.LoggerFactory XunitLoggerFactory Implements Microsoft.Extensions.Logging.ILoggerFactory System.IDisposable Inherited Members Microsoft.Extensions.Logging.LoggerFactory.Create(System.Action<Microsoft.Extensions.Logging.ILoggingBuilder>) Microsoft.Extensions.Logging.LoggerFactory.CreateLogger(System.String) Microsoft.Extensions.Logging.LoggerFactory.AddProvider(Microsoft.Extensions.Logging.ILoggerProvider) Microsoft.Extensions.Logging.LoggerFactory.CheckDisposed() Microsoft.Extensions.Logging.LoggerFactory.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.Xunit.Logging Assembly : Bunit.Xunit.dll Syntax public class XunitLoggerFactory : LoggerFactory, ILoggerFactory, IDisposable Constructors | Improve this Doc View Source XunitLoggerFactory(XunitLoggerProvider) Declaration public XunitLoggerFactory(XunitLoggerProvider xunitLoggerProvider) Parameters Type Name Description XunitLoggerProvider xunitLoggerProvider Implements Microsoft.Extensions.Logging.ILoggerFactory System.IDisposable Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.Xunit.Logging.XunitLoggerProvider.html": {
    "href": "api/Bunit.Xunit.Logging.XunitLoggerProvider.html",
    "title": "Class XunitLoggerProvider | bUnit",
    "keywords": "Class XunitLoggerProvider Represents an Microsoft.Extensions.Logging.ILoggerProvider for logging to XunitLogger . Inheritance System.Object XunitLoggerProvider Implements Microsoft.Extensions.Logging.ILoggerProvider System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.Xunit.Logging Assembly : Bunit.Xunit.dll Syntax public sealed class XunitLoggerProvider : ILoggerProvider, IDisposable Constructors | Improve this Doc View Source XunitLoggerProvider(ITestOutputHelper, LogLevel) Creates an instance of the XunitLoggerProvider . Declaration public XunitLoggerProvider(ITestOutputHelper output, LogLevel minimumLogLevel = LogLevel.Debug) Parameters Type Name Description Xunit.Abstractions.ITestOutputHelper output Microsoft.Extensions.Logging.LogLevel minimumLogLevel Methods | Improve this Doc View Source CreateLogger(String) Declaration public ILogger CreateLogger(string categoryName) Parameters Type Name Description System.String categoryName Returns Type Description Microsoft.Extensions.Logging.ILogger | Improve this Doc View Source Dispose() Declaration public void Dispose() Implements Microsoft.Extensions.Logging.ILoggerProvider System.IDisposable Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.XunitLoggerExtensions.html": {
    "href": "api/Bunit.XunitLoggerExtensions.html",
    "title": "Class XunitLoggerExtensions | bUnit",
    "keywords": "Class XunitLoggerExtensions Helper method for registering the xUnit test logger. Inheritance System.Object XunitLoggerExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Xunit.dll Syntax public static class XunitLoggerExtensions Methods | Improve this Doc View Source AddXunitLogger(IServiceCollection, LogLevel) Adds the xUnit Logger to the service collection. All log statements logged during a test, matching the specified Microsoft.Extensions.Logging.LogLevel (default Microsoft.Extensions.Logging.LogLevel.Debug ), will be available in the output from each unit tests. Declaration public static IServiceCollection AddXunitLogger(this IServiceCollection services, LogLevel minimumLogLevel = LogLevel.Debug) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services Microsoft.Extensions.Logging.LogLevel minimumLogLevel Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection | Improve this Doc View Source AddXunitLogger(IServiceCollection, ITestOutputHelper, LogLevel) Adds the xUnit Logger to the service collection. All log statements logged during a test, matching the specified Microsoft.Extensions.Logging.LogLevel (default Microsoft.Extensions.Logging.LogLevel.Debug ), will be available in the output from each unit tests. Declaration public static IServiceCollection AddXunitLogger(this IServiceCollection services, ITestOutputHelper outputHelper, LogLevel minimumLogLevel = LogLevel.Debug) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services Xunit.Abstractions.ITestOutputHelper outputHelper Microsoft.Extensions.Logging.LogLevel minimumLogLevel Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "bUnit References | bUnit",
    "keywords": "bUnit References TODO: write intro"
  },
  "api/Xunit.html": {
    "href": "api/Xunit.html",
    "title": "Namespace Xunit | bUnit",
    "keywords": "Namespace Xunit Classes RazorTestAttribute Add this attribute to an stub method in a razor test component to make it discoverable by the xUnit test framework. See TestComponentBase for an example of its usage."
  },
  "api/Xunit.RazorTestAttribute.html": {
    "href": "api/Xunit.RazorTestAttribute.html",
    "title": "Class RazorTestAttribute | bUnit",
    "keywords": "Class RazorTestAttribute Add this attribute to an stub method in a razor test component to make it discoverable by the xUnit test framework. See TestComponentBase for an example of its usage. Inheritance System.Object System.Attribute Xunit.FactAttribute RazorTestAttribute Inherited Members Xunit.FactAttribute.DisplayName Xunit.FactAttribute.Skip Xunit.FactAttribute.Timeout System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Xunit Assembly : Bunit.Xunit.dll Syntax [XunitTestCaseDiscoverer(\"Xunit.Sdk.RazorTestDiscoverer\", \"Bunit.Xunit\")] [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)] public class RazorTestAttribute : FactAttribute Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "docs/contribute.html": {
    "href": "docs/contribute.html",
    "title": "Contribute | bUnit",
    "keywords": "Contribute To get in touch, ask questions or provide feedback, you can: Create a new issue . Join the library's Gitter channel Ping me on Twitter: @egilhansen There are a few ways you can help improve this library. Tell me if a certain type of component/scenario is hard to test. Create an issue with a minimal example of the component and the kind of assertions you would like to perform. Suggest tweaks to the library's API or assertion helpers (create issue). Find a bug or mistake in the library, create an issue, or even better, send in a pull request. Help with documentation and/or good examples. If you figured out a elegant way to test a scenario, share it through an issue, or add it to the samples project (pull request), or add it to the documentation (pull request)."
  },
  "docs/external-resources.html": {
    "href": "docs/external-resources.html",
    "title": "External Resources | bUnit",
    "keywords": "Presentations, guides, articles, tutorials, and blog posts Here is a list of some of the content out on the web that covers bUnit. If you produce something you think can be useful to bUnit's users, feel free to add the content to this page and send a pull request. Presentations Testing Blazor Components - session from .NET Conf - Focus on Blazor Content is based on beta-5.1 of bUnit. PodCasts/Twitch/YouTube/Live coding .NET Rocks! - Testing Blazor Apps with Egil Hansen Content is based on beta-7 of bUnit. CSharpFritz's Twitch Show: Egil Hansen joins us for Blazor Testing and Component Design Content is based on beta-6 of bUnit. Blazor StateHasChanged: Blazor Component Unit Testing with Egil Hansen Content is based on beta-5.1 of bUnit. Articles and blog posts bUnit for Blazor and How to Integrate it in Azure Pipeline by Ramkumar Shanmugam Content is based on beta-8 of bUnit. Unit Testing Blazor Components with bUnit and JustMock by Mihail Vladov Content is based on beta-6 of bUnit."
  },
  "docs/getting-started/create-test-project.html": {
    "href": "docs/getting-started/create-test-project.html",
    "title": "Creating a new bUnit Test Project | bUnit",
    "keywords": "Creating a new bUnit Test Project To write tests, you need a place to put them - a test project. bUnit is not a unit test runner, so a general-purpose test framework, like xUnit, NUnit, or MSTest, is needed in addition to bUnit, to write and run tests. To use bUnit with xUnit, the easiest approached is to use the bUnit project template described in the Create a test project with bUnit template section further down the page. To create a test project manually, in a general-purpose testing frameworks agnostic way, read the following section. Create a Test Project Manually This section will take you through the steps required to create a project for testing Blazor components using bUnit. Any of the three general purpose test frameworks shown in step 1 below can be used. Create a new xUnit/NUnit/MSTest testing project Add bUnit to the test project Configure project settings Add the test project to your existing solution These steps look like this from the dotnet CLI: 1. Create a new test project Use the following command ( click on the tab that for the test framework of choice ): xUnit NUnit MSTest dotnet new xunit -o <NAME OF TEST PROJECT> dotnet new nunit -o <NAME OF TEST PROJECT> dotnet new mstest -o <NAME OF TEST PROJECT> where -o <NAME OF PROJECT> refers to the name of the test project. 2. Add bUnit to the test project To add bUnit to the test project, change to the newly created test projects folder and use the following command: xUnit NUnit MSTest cd <NAME OF PROJECT> dotnet add package bunit.web --version 1.0.0-beta-8 dotnet add package bunit.xunit --version 1.0.0-beta-8 cd <NAME OF PROJECT> dotnet add package bunit.web --version 1.0.0-beta-8 cd <NAME OF PROJECT> dotnet add package bunit.web --version 1.0.0-beta-8 3. Configure project settings The test projects setting needs to be set to the following: the project's SDK to Microsoft.NET.Sdk.Razor set RazorLangVersion to 3.0 set the <TargetFramework> to netcoreapp3.1 (bUnit builds on .netstandard 2.1 ) To do so, change the first part of the test projects .csproj file to look like this.: <Project Sdk=\"Microsoft.NET.Sdk.Razor\"> <PropertyGroup> <TargetFramework>netcoreapp3.1</TargetFramework> <RazorLangVersion>3.0</RazorLangVersion> </PropertyGroup> ... </Project> 4. Add the test project to your solution If using Visual Studio, add the test project to your solution ( .sln ), and add a reference between the test project and project containing the components that are to be tested: dotnet sln <NAME OF PROJECT>.sln add <NAME OF TEST PROJECT> dotnet add <NAME OF COMPONENT PROJECT>.csproj reference <NAME OF TEST PROJECT>.csproj The result should be a test project with a .csproj that looks like this (non bUnit packages may have different version numbers): xUnit NUnit MSTest <Project Sdk=\"Microsoft.NET.Sdk.Razor\"> <PropertyGroup> <TargetFramework>netcoreapp3.1</TargetFramework> <RazorLangVersion>3.0</RazorLangVersion> </PropertyGroup> <ItemGroup> <PackageReference Include=\"bunit.web\" Version=\"1.0.0-beta-8\" /> <PackageReference Include=\"bunit.xunit\" Version=\"1.0.0-beta-8\" /> <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"16.4.0\" /> <PackageReference Include=\"xunit\" Version=\"2.4.1\" /> <PackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.4.1\"> <PrivateAssets>all</PrivateAssets> <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets> </PackageReference> </ItemGroup> </Project> <Project Sdk=\"Microsoft.NET.Sdk.Razor\"> <PropertyGroup> <TargetFramework>netcoreapp3.1</TargetFramework> <IsPackable>false</IsPackable> </PropertyGroup> <ItemGroup> <PackageReference Include=\"bunit.web\" Version=\"1.0.0-beta-8\" /> <PackageReference Include=\"nunit\" Version=\"3.12.0\" /> <PackageReference Include=\"NUnit3TestAdapter\" Version=\"3.16.1\"> <PrivateAssets>all</PrivateAssets> <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets> </PackageReference> <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"16.6.1\" /> </ItemGroup> <ItemGroup> <ProjectReference Include=\"<PATH TO COMPONENT LIB>.csproj\" /> </ItemGroup> </Project> <Project Sdk=\"Microsoft.NET.Sdk.Razor\"> <PropertyGroup> <TargetFramework>netcoreapp3.1</TargetFramework> <IsPackable>false</IsPackable> </PropertyGroup> <ItemGroup> <PackageReference Include=\"bunit.web\" Version=\"1.0.0-beta-8\" /> <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"16.5.0\" /> <PackageReference Include=\"MSTest.TestAdapter\" Version=\"2.1.0\" /> <PackageReference Include=\"MSTest.TestFramework\" Version=\"2.1.0\" /> <PackageReference Include=\"coverlet.collector\" Version=\"1.2.0\" /> </ItemGroup> <ItemGroup> <ProjectReference Include=\"<PATH TO COMPONENT LIB>.csproj\" /> </ItemGroup> </Project> Create a Test Project with bUnit Template To skip a few steps in the guide above, use the bUnit test project template . The bUnit project template currently only works with the xUnit general-purpose testing framework, others framework will be supported in the future. The steps are as follows: Install the template (only needed the first time) Create a new test project Add the test project to your solution These steps look like this from the dotnet CLI: 1. Install the template Install the template from NuGet using this command: dotnet new --install bunit.template::1.0.0-beta-8 2. Create a new test project Use the following command to create a bUnit with xUnit test project: dotnet new bunit -o <NAME OF TEST PROJECT> where -o <NAME OF PROJECT> is used to name the test project. 3. Add the test project to your solution If using Visual Studio, add the test project to your solution ( .sln ), and add a reference between the test project and project containing the components that should be tested: dotnet sln <NAME OF PROJECT>.sln add <NAME OF TEST PROJECT> dotnet add <NAME OF COMPONENT PROJECT>.csproj reference <NAME OF TEST PROJECT>.csproj Further Reading To start creating tests, continue reading the Writing Tests in C# for Blazor Components and Writing Tests in Razor Syntax for Blazor Components pages. For addition tips and tricks that will make writing tests easier, see the Miscellaneous Testing Tips page."
  },
  "docs/getting-started/fixture-details.html": {
    "href": "docs/getting-started/fixture-details.html",
    "title": "Fixture Test Details | bUnit",
    "keywords": "<Fixture> Test Details bUnit's Fixture component provides different parameters you can set on it, that changes the behavior of the test. It also allows you to both set up a component under test, and additional fragments, that can be used in the test. Warning Razor tests, where Fixture components are used, are currently only compatible with using xUnit as the general purpose testing framework. Parameters All the parameters the Fixture component support is shown in the listing below: @inherits TestComponentBase <Fixture Setup=@Setup SetupAsync=@SetupAsync Test=@Test TestAsync=@TestAsync Description=\"Description of test\" Timeout=\"TimeSpan.FromSeconds(2)\" Skip=\"Reason to skip the test\"> @code { void Setup(Fixture fixture) { } Task SetupAsync(Fixture fixture) => Task.CompletedTask; // NOTE: Only one of Test/TestAsync can be used at the same time. // Both are included here for illustration purposes only. void Test(Fixture fixture) { } Task TestAsync(Fixture fixture) => Task.CompletedTask; } </Fixture> Setup and Test methods: Let us start by looking at the parameters that takes a method as input first. The methods are called in the order they are listed in below, if provided, and should be used to the following: Setup and SetupAsync : The Setup and SetupAsync methods are called first, and you can provide both if needed. If both are provided, Setup is called first. They are usually used to configure the Services collection of the Fixture component before the component under test or any fragments are rendered. Test or TestAsync : The Test or TestAsync method is called after the setup methods. One, and only one of the test methods can be specified per fixture. Use the test method to access the component under test and any fragments defined in the fixture and interact and assert against them. In the example above, the setup and test methods are declared in a @code { } block nested inside the Fixture component. This visually groups the methods nicely to the Fixture component, but it's not a requirement. You can have the methods anywhere inside the test component you want, which can be useful, if you for example have a common setup method that multiple Razor tests in the same test component shares. The methods can also be declared in the parameter directly, e.g.: <Fixture Setup=\"f => f.Services.AddMockJsRuntime()\" ...> . Tip Learn more about mocking and AddMockJsRuntime() on the Mocking Blazor's IJSRuntime page. Other parameters The other parameters affect how the test runs, and how it is displayed in e.g. Visual Studio's Test Explorer: Description : If a description is provided, it will be displayed by the test runner when the test runs, and in Visual Studio's Test Explorer. If no description is provided, the name of the provided test method is used. Skip : If the skip parameter is provided, the test is skipped, and the text entered in the skip parameter is passed to the test runner as the reason to skip the test. Timeout : If provided, the test runner will terminate the test after the specified amount of time, if it has not completed already. <ComponentUnderTest> and <Fragment> The Fixture component only accepts the ComponentUnderTest and Fragment components as its child content. All other components and markup are ignored. E.g.: @inherits TestComponentBase <Fixture Test=\"...\"> <ComponentUnderTest> <!-- Razor or HTML markup goes here --> </ComponentUnderTest> <Fragment> <!-- Razor or HTML markup goes here --> </Fragment> <Fragment Id=\"some id\"> <!-- Razor or HTML markup goes here --> </Fragment> </Fixture> Here are the rules for the Fixture components child content: One ComponentUnderTest component must be added, and it should not be empty. Zero or more Fragment components can be added. The order the ComponentUnderTest and Fragment components are added in does not matter. The ComponentUnderTest and Fragment components can contain both Razor markup and regular HTML markup. If more than one Fragment component is added, give each fragment an Id to be able to identify them when retrieving them in the test method. The first Fragment component is added can always be retrieved without an id. Getting <ComponentUnderTest> and <Fragment> in the Test Methods The Fixture 's setup and test methods receives the Fixture instance as input when they are called. It is through it, the Fixture instance, we can get the component under test and any fragments declared inside it. The relevant methods comes in both a generic and non-generic variants: GetComponentUnderTest() : Use this to return an IRenderedFragment , which represents the content declared inside the ComponentUnderTest component. A IRenderedFragment does not give you access to the instance of the component under test, but it does give you access to the rendered markup. GetComponentUnderTest<TComponent>() : Use this to return an IRenderedComponent<TComponent> , which represents a component of type TComponent declared inside the ComponentUnderTest component. The IRenderedComponent<TComponent> does give you access to the TComponent instance, as well as the rendered markup of it. GetFragment(String) : Use this to get a IRenderedFragment , which represents the content declared inside the Fragment component. GetFragment<TComponent>(String) Use this to return an IRenderedComponent<TComponent> , which represents a component of type TComponent declared inside the Fragment component. For both the GetFragment methods the id string parameter is optional. If it is not provided, the first Fragment is used to return a IRenderedFragment or IRenderedComponent<TComponent> . Otherwise, the Fragment with an Id parameter that matches the id specified in the GetFragment method call will be used. The generic versions of GetComponentUnderTest<TComponent>() and GetFragment<TComponent>(String) can specify a component of type TComponent that is not the first child of ComponentUnderTest or Fragment . This is useful if e.g. the component under test is wrapped inside a <CascadingValue> . The methods will return the first component it finds that matches the requested type, through a depth-first search of the render tree. Note You can call the GetComponentUnderTest or GetFragment methods multiple times on the same Fixture instance. Each time will return the same instance for the same input. However, you cannot mix the generic and non-generic versions. Example Let's look at a complete example, where we have a simple task list component, <SimpleTodo> , listed below, that have a service injected, receive a cascading value, and changes between renders: @inject List<string> Tasks <form> <input @bind-value=@newTaskValue placeholder=\"Add todo here . . .\" type=\"text\" /> <button type=\"submit\" @onclick=@HandleTaskAdded>Add task</button> </form> <ul id=\"tasks\" class=@ThemeClass> @foreach (var task in Tasks) { <li>@task</li> } </ul> @code { [CascadingParameter(Name = \"Theme\")] public string ThemeClass { get; set; } = string.Empty; private string newTaskValue = string.Empty; private void HandleTaskAdded() { if (!string.IsNullOrWhiteSpace(newTaskValue)) Tasks.Add(newTaskValue); newTaskValue = string.Empty; } } In the test, we want to verify that: The <form> resets itself correctly after a task has been added That the task was added correctly to the task list That the \"Theme\" cascading value was correctly assigned to the task list The test looks like this: @inherits TestComponentBase <Fixture Description=\"When a task is added, then the input field gets reset\" Setup=\"RegisterTasksService\" Test=\"WhenTaskIsAddedInputGetsReset\"> <ComponentUnderTest> <CascadingValue Name=\"Theme\" Value=@(\"dark-theme\")> <SimpleTodo></SimpleTodo> </CascadingValue> </ComponentUnderTest> <Fragment> <form> <input placeholder=\"Add todo here . . .\" type=\"text\" value=\"\" /> <button type=\"submit\">Add task</button> </form> </Fragment> <Fragment Id=\"expected tasks\"> <ul class=\"dark-theme\" id=\"tasks\"> <li>Existing task</li> <li>FOO BAR BAZ</li> </ul> </Fragment> @code { void RegisterTasksService(Fixture fixture) => fixture.Services.AddSingleton(new List<string>{ \"Existing task\" }); void WhenTaskIsAddedInputGetsReset(Fixture fixture) { // Arrange - get the component under test and fragments IRenderedComponent<SimpleTodo> cut = fixture.GetComponentUnderTest<SimpleTodo>(); IRenderedFragment expectedFormAfterClick = fixture.GetFragment(); IRenderedFragment expectedTasks = fixture.GetFragment(\"expected tasks\"); // Act - change the value of the input element and click the submit button cut.Find(\"input\").Change(\"FOO BAR BAZ\"); cut.Find(\"button\").Click(); // Assert - verify cascading value was received Assert.Equal(\"dark-theme\", cut.Instance.ThemeClass); // Assert - verify that tasks had the correct theme applied // and the task added. IElement actualTasks = cut.Find(\"#tasks\"); actualTasks.MarkupMatches(expectedTasks); // Assert - verify that the input form was reset after task was added IElement actualForm = cut.Find(\"form\"); actualForm.MarkupMatches(expectedFormAfterClick); } } </Fixture> Let's look at what's going on in this test: The fixture has both a setup and test method specified. The setup methods is used to register an empty list of tasks, that the <SimpleTodo> component requires. The <SimpleTodo> component is wrapped in a <CascadingValue> component that passes down the \"Theme\" cascading value. The first <Fragment> does not have an Id , since the GetFragment() method will pick the first fragment, if no id is provided to it. The second <Fragment Id=\"expected tasks\"> does have an Id to make it possible to get it, through a call to the GetFragment(\"expected tasks\") method. The test uses the generic version of GetComponentUnderTest<SimpleTodo>() , which gives us access to the instance of SimpleTodo , and allows us to inspect its properties, e.g. ThemeClass . We will cover the details of the \"act\" and \"assertion\" step in the Interacting with a Component Under Test and Verifying Output from a Component Under Test pages. Learn more about injecting services into components under test on the Injecting Services into Components Under Test page."
  },
  "docs/getting-started/index.html": {
    "href": "docs/getting-started/index.html",
    "title": "Getting Started with bUnit | bUnit",
    "keywords": "Getting Started with bUnit To start writing tests for Blazor components, first set up a test project and then you can start adding tests, using either using C# or Razor syntax. The basic getting started topics are: Creating a new bUnit Test Project covers setting up a bUnit test project. Writing Tests in C# for Blazor Components covers the basics of writing tests in C#, i.e. like regular unit tests. Writing Tests in Razor Syntax for Blazor Components covers the basics of writing tests in .razor files using Razor and C# syntax. The next level topics are: Providing different types of input to a component under test in C# based tests, e.g. passing parameters or injecting services. Verifying output in various ways from a component under test, e.g. inspecting the rendered markup. Mocking dependencies a component under test has, e.g. the IJsRuntime or HttpClient . Getting Help If you cannot figure out how to write a test for a testing scenario? If you have a testing scenario that is hard to write or it cannot be written elegantly with bUnit? If you found a bug in bUnit? Head over to GitHub issues list to ask a question, suggest a new feature, or join bUnits Gitter channel and let us know. There are no stupid questions, all questions are welcome!"
  },
  "docs/getting-started/snapshottest-details.html": {
    "href": "docs/getting-started/snapshottest-details.html",
    "title": "SnapshotTest Details | bUnit",
    "keywords": "<SnapshotTest> Details bUnit's support for snapshot testing comes with the SnapshotTest component. In snapshot testing, you declare your input (e.g. one or more component under test) and the expected output, and the library will automatically tell you if they do not match. Note One notable snapshot testing feature is missing now; the ability to auto-generate the expected output initially, when it is not specified. If you want to contribute to this, take a look at issue #3 on GitHub . Warning Razor tests, where SnapshotTest components are used, are currently only compatible with using xUnit as the general purpose testing framework. Parameters All the parameters the SnapshotTest component support is shown in the listing below: @inherits TestComponentBase <SnapshotTest Setup=@Setup SetupAsync=@SetupAsync Description=\"Description of test\" Timeout=\"TimeSpan.FromSeconds(2)\" Skip=\"Reason to skip the test\"> <TestInput>...</TestInput> <ExpectedOutput>...</ExpectedOutput> @code { void Setup(SnapshotTest test) { } Task SetupAsync(SnapshotTest test) => Task.CompletedTask; } </SnapshotTest> Let us go over each of these: Setup and SetupAsync : The Setup and SetupAsync methods can be used to register any services that should be injected into the components declared inside the <TestInput> and <ExpectedOutput> , and you can use both Setup and SetupAsync , if needed. If both are provided, Setup is called first. Description : If a description is provided, it will be displayed by the test runner when the test runs, and in Visual Studio's Test Explorer. If no description is provided, \"SnapshotTest #NUM\" is used, where NUM is the position the test has in the file it is declared in. Skip : If the skip parameter is provided, the test is skipped, and the text entered in the skip parameter is passed to the test runner as the reason to skip the test. Timeout : If provided, the test runner will terminate the test after the specified amount of time, if it has not completed already. TestInput child component: Inside the <TestInput> child component is where you put all Razor and HTML markup, that constitute the test input or component under test. ExpectedOutput child component: Inside the <ExpectedOutput> child component is where you put all Razor and HTML markup that represents what the rendered result of <TestInput> of should be. What Happens When The Test Runs? When a SnapshotTest runs, this happens: It will first call the setup methods. Then it will render the <TestInput> and <ExpectedOutput> child components. Finally, it will compare the rendered markup from the <TestInput> and <ExpectedOutput> child components, using the semantic HTML comparer built into bUnit. The semantic comparison in bUnit allows you to customize the it through \"comparison modifiers\" in the <ExpectedOutput> markup. For example, if you want to tell the semantic comparer to ignore the case of the text content inside an element, you can add the diff:ignoreCase attribute to the element inside <ExpectedOutput> . To learn more about semantic comparison modifiers, go to the Customizing the Semantic HTML Comparison page."
  },
  "docs/getting-started/writing-csharp-tests.html": {
    "href": "docs/getting-started/writing-csharp-tests.html",
    "title": "Writing Tests in C# for Blazor Components | bUnit",
    "keywords": "Writing Tests in C# for Blazor Components Testing Blazor components is a little different from testing regular C# classes: Blazor components are rendered , they have the Blazor component life cycle , during which we can provide input to them and where they produce output . Use bUnit to render the component under test, pass in it's parameters, inject required services, and access the rendered component instance and the markup it has produced. Rendering a component happens through bUnit's TestContext , and the result of the rendering, a IRenderedComponent<TComponent> , provides access to the component instance, and the markup produced by the component. Creating a Basic Test This is a simple example, that tests the following <HelloWorld> component: <h1>Hello world from Blazor</h1> xUnit NUnit MSTest using Xunit; using Bunit; namespace Bunit.Docs.Samples { public class HelloWorldTest { [Fact] public void HelloWorldComponentRendersCorrectly() { // Arrange using var ctx = new TestContext(); // Act var cut = ctx.RenderComponent<HelloWorld>(); // Assert cut.MarkupMatches(\"<h1>Hello world from Blazor</h1>\"); } } } using Bunit; using NUnit.Framework; namespace Bunit.Docs.Samples { public class HelloWorldTest { [Test] public void HelloWorldComponentRendersCorrectly() { // Arrange using var ctx = new Bunit.TestContext(); // Act var cut = ctx.RenderComponent<HelloWorld>(); // Assert cut.MarkupMatches(\"<h1>Hello world from Blazor</h1>\"); } } } Note TestContext is an ambiguous reference between TestContext and NUnit.Framework.TestContext , so you have to specify the Bunit namespace when referencing TestContext to resolve the ambiguity for the compiler. Alternatively, you can give bUnit's TestContext a different name during import, e.g.: using BunitTestContext = Bunit.TestContext; using Bunit; using Microsoft.VisualStudio.TestTools.UnitTesting; namespace Bunit.Docs.Samples { [TestClass] public class HelloWorldTest { [TestMethod] public void HelloWorldComponentRendersCorrectly() { // Arrange using var ctx = new Bunit.TestContext(); // Act var cut = ctx.RenderComponent<HelloWorld>(); // Assert cut.MarkupMatches(\"<h1>Hello world from Blazor</h1>\"); } } } Note TestContext is an ambiguous reference between TestContext and Microsoft.VisualStudio.TestTools.UnitTesting.TestContext , so you have to specify the Bunit namespace when referencing TestContext to resolve the ambiguity for the compiler. Alternatively, you can give bUnit's TestContext a different name during import, e.g.: using BunitTestContext = Bunit.TestContext; The following happens in the test above: Create a new instance of the disposable bUnit TestContext , and assign it to ctx using the using var syntax, to avoid unnecessary source code indention. Render the <HelloWorld> component using TestContext , which is done through the RenderComponent<TComponent>(ComponentParameter[]) method. We cover passing parameters to components elsewhere. Verify the rendered markup from the <HelloWorld> component, using the MarkupMatches method. The MarkupMatches method performs a semantic comparison of the expected markup with the rendered markup. Tip Learn more about how the semantic HTML/markup comparison in bUnit works, and how to customize it on the Customizing the Semantic HTML Comparison page. Tip In bUnit tests, we like to use the abbreviation CUT , short for \"component under test\", to indicate the component that is being tested. This is inspired by the common testing abbreviation SUT , short for \"system under test\". Remove Boilerplate Code from Tests We can remove some boilerplate code from each test by making the TestContext implicitly available to the test class, so we do not have to have using var ctx = new Bunit.TestContext(); in every test. This can be done like this: xUnit NUnit MSTest using Xunit; using Bunit; namespace Bunit.Docs.Samples { public class HelloWorldImplicitContextTest : TestContext { [Fact] public void HelloWorldComponentRendersCorrectly() { // Act var cut = RenderComponent<HelloWorld>(); // Assert cut.MarkupMatches(\"<h1>Hello world from Blazor</h1>\"); } } } Since xUnit instantiates test classes for each execution of test methods inside them and disposes of them after each test method has run, we simply inherit from TestContext , and methods like RenderComponent<TComponent>(ComponentParameter[]) can now be called directly from each test, as seen in the listing above. using Bunit; using NUnit.Framework; namespace Bunit.Docs.Samples { public class HelloHelloWorldImplicitContextTest : BunitTestContext { [Test] public void HelloWorldComponentRendersCorrectly() { // Act var cut = RenderComponent<HelloWorld>(); // Assert cut.MarkupMatches(\"<h1>Hello world from Blazor</h1>\"); } } } using System; using Bunit; using Bunit.Rendering; using Microsoft.AspNetCore.Components; using NUnit.Framework; namespace Bunit.Docs.Samples { public abstract class BunitTestContext : ITestContext, IDisposable { private Bunit.TestContext _context; public ITestRenderer Renderer => _context?.Renderer ?? throw new InvalidOperationException(\"NUnit has not started executing tests yet\"); public TestServiceProvider Services => _context?.Services ?? throw new InvalidOperationException(\"NUnit has not started executing tests yet\"); public void Dispose() { _context?.Dispose(); _context = null; } [SetUp] public void Setup() => _context = new Bunit.TestContext(); [TearDown] public void TearDown() => Dispose(); public IRenderedComponent<TComponent> RenderComponent<TComponent>(params ComponentParameter[] parameters) where TComponent : IComponent => _context?.RenderComponent<TComponent>(parameters) ?? throw new InvalidOperationException(\"NUnit has not started executing tests yet\"); public IRenderedComponent<TComponent> RenderComponent<TComponent>(Action<ComponentParameterBuilder<TComponent>> parameterBuilder) where TComponent : IComponent => _context?.RenderComponent<TComponent>(parameterBuilder) ?? throw new InvalidOperationException(\"NUnit has not started executing tests yet\"); } } Since NUnit instantiates the test class is once, we cannot simply inherit directly from TestContext , as we want a fresh instance of TestContext for each test. Instead, we create a helper class, BunitTestContext , which is listed above, and use that to hook into NUnit's [SetUp] and [TearDown] methods, which runs before and after each test. Then methods like RenderComponent<TComponent>(ComponentParameter[]) can now be called directly from each test, as seen in the listing above. using Bunit; using Microsoft.VisualStudio.TestTools.UnitTesting; namespace Bunit.Docs.Samples { [TestClass] public class HelloHelloWorldImplicitContextTest : BunitTestContext { [TestMethod] public void HelloWorldComponentRendersCorrectly() { // Act var cut = RenderComponent<HelloWorld>(); // Assert cut.MarkupMatches(\"<h1>Hello world from Blazor</h1>\"); } } } using System; using Bunit; using Bunit.Rendering; using Microsoft.AspNetCore.Components; using Microsoft.VisualStudio.TestTools.UnitTesting; namespace Bunit.Docs.Samples { public abstract class BunitTestContext : ITestContext, IDisposable { private Bunit.TestContext _context; public ITestRenderer Renderer => _context?.Renderer ?? throw new InvalidOperationException(\"MSTest has not started executing tests yet\"); public TestServiceProvider Services => _context?.Services ?? throw new InvalidOperationException(\"MSTest has not started executing tests yet\"); public void Dispose() { _context?.Dispose(); _context = null; } [TestInitialize] public void Setup() => _context = new Bunit.TestContext(); [TestCleanup] public void TearDown() => Dispose(); public IRenderedComponent<TComponent> RenderComponent<TComponent>(params ComponentParameter[] parameters) where TComponent : IComponent => _context?.RenderComponent<TComponent>(parameters) ?? throw new InvalidOperationException(\"MSTest has not started executing tests yet\"); public IRenderedComponent<TComponent> RenderComponent<TComponent>(Action<ComponentParameterBuilder<TComponent>> parameterBuilder) where TComponent : IComponent => _context?.RenderComponent<TComponent>(parameterBuilder) ?? throw new InvalidOperationException(\"MSTest has not started executing tests yet\"); } } Since MSTest instantiates the test class once, we cannot simply inherit directly from TestContext , as we want a fresh instance of TestContext for each test. Instead, we create a helper class, BunitTestContext , which is listed above, and use that to hook into MSTest's [TestInitialize] and [TestCleanup] methods, which runs before and after each test. Then methods like RenderComponent<TComponent>(ComponentParameter[]) can now be called directly from each test, as seen in the listing above. Further Reading With the basics out of the way, we will next look at how to pass parameters and inject services into our component under test, and after that, cover in more detail ways we can verify the outcome of a rendering. Passing Parameters to Components Injecting Services into Components Under Test Verifying Markup from a Component Verifying the State of a Component Under Test Triggering Event Handlers in Components"
  },
  "docs/getting-started/writing-razor-tests.html": {
    "href": "docs/getting-started/writing-razor-tests.html",
    "title": "Writing Tests in Razor Syntax for Blazor Components | bUnit",
    "keywords": "Writing Tests in Razor Syntax for Blazor Components Warning Razor tests are currently only compatible with using xUnit as the general purpose testing framework. A test for a Blazor component can be written in a Blazor component, using a mix of Razor and C# syntax. The advantage of this is the familiarity in declaring the component under test, and other HTML or Razor fragments that will be used in the test, in Razor and HTML markup . This is especially useful when testing components that takes a lot of parameters and child content as input. Note Tests declared inside Blazor test components can be discovered and invoked individually, and will show up in e.g. Visual Studio's Test Explorer. However, they will not show up before the Blazor test component has been compiled into C# by the Blazor compiler, and if there are compile-errors from the Blazor compiler, they might appear to come and go in the Test Explorer. Create a Test Specific _Imports.razor File Razor tests are written in Blazor test components. To make our life's a little easier, let us first set up a _Imports.razor file, with the using statements we are going to be using throughout our tests. Simply add the following _Imports.razor to the root folder where you will be placing your Blazor test components: @using Microsoft.AspNetCore.Components.Forms @using Microsoft.AspNetCore.Components.Routing @using Microsoft.AspNetCore.Components.Web @using Microsoft.JSInterop @using Microsoft.Extensions.DependencyInjection @using AngleSharp.Dom @using Bunit @using Bunit.Mocking.JSInterop @using Xunit With that created, we are ready to create our first Razor test. Creating a Blazor Test Component A Blazor test component is conceptually very similar to a regular test class in e.g. xUnit or NUnit. You can define multiple tests inside a single test component, as long as they are based on the special bUnit test components, currently either Fixture or SnapshotTest . Besides that, Blazor test components has to inherit from TestComponentBase , e.g.: @inherits TestComponentBase The following two sections will show how to create tests using bUnit's Fixture and SnapshotTest components. Creating a Test using the <Fixture> Component Let's see a simple example, where we test the following <HelloWorld> component using the bUnit Fixture component: <h1>Hello world from Blazor</h1> Here is the Razor code that tests the <HelloWorld> component: @inherits TestComponentBase <Fixture Test=\"HelloWorldComponentRendersCorrectly\"> <ComponentUnderTest> <HelloWorld /> </ComponentUnderTest> @code { void HelloWorldComponentRendersCorrectly(Fixture fixture) { // Act var cut = fixture.GetComponentUnderTest<HelloWorld>(); // Assert cut.MarkupMatches(\"<h1>Hello world from Blazor</h1>\"); } } </Fixture> Let's break down what is going on in this test: The test component inherits from TestComponentBase . This is done in line 1 with @inherits Bunit.TestComponentBase . The test is defined using the Fixture component. It orchestrates the test. Inside the Fixture component, we add a ComponentUnderTest component, where the component under test is declared using regular Razor syntax. In this case, it is a very simple <HelloWorld /> declaration. The Fixture component's Test parameter takes a method, which is called when the test runs, and is passed the Fixture component. In the test method, we: Use the GetComponentUnderTest<TComponent>() to get the HelloWorld declared in the Fixture . Verify the rendered markup from the HelloWorld component using the MarkupMatches method, which performs a semantic comparison of the expected markup with the rendered markup. Tip Learn more about how the semantic HTML/markup comparison in bUnit work, and how to customize it on the Customizing the Semantic HTML Comparison page. Tip In bUnit tests, we like to use the abbreviation CUT , short for \"component under test\", to indicate the component that is being tested. This is inspired by the common testing abbreviation SUT , short for \"system under test\". Creating a Test using the <SnapshotTest> Component In snapshot testing, you declare your input (e.g. one or more component under test) and the expected output, and the library will automatically tell you if they do not match. With bUnit, this comparison is done using a smart built-in semantic HTML comparison logic. Let's see a simple example, where we test the following <HelloWorld> component using the bUnit SnapshotTest component: <h1>Hello world from Blazor</h1> Here is the Razor code that tests the <HelloWorld> component: @inherits TestComponentBase <SnapshotTest Description=\"HelloWorld component renders correctly\"> <TestInput> <HelloWorld /> </TestInput> <ExpectedOutput> <h1>Hello world from Blazor</h1> </ExpectedOutput> </SnapshotTest> Let's break down what is going on in this test with the SnapshotTest component: We specify the Description parameter. The text in that will be shown when test runs and in the Test Explorer in Visual Studio, just like regular unit tests names. Inside the <TestInput> child component of SnapshotTest , we declare the component under test, in this case the <HelloWorld> component. Inside the <ExpectedOutput> child component of SnapshotTest , we declare the expected rendered output from whatever is declared in the <TestInput> child component. When the test runs, the SnapshotTest component will automatically compare the rendered output of the <TestInput> component with that of the <ExpectedOutput> component, using the semantic HTML comparison logic in bUnit. Tip Learn more about how the semantic HTML/markup comparison in bUnit work, and how to customize it on the Customizing the Semantic HTML Comparison page. Passing Parameters to Components Under Test Since we are declaring our component under test in Razor syntax, passing parameters to the component under test is the same as passing parameters in normal Blazor components. This is the same for tests created with both the Fixture and SnapshotTest components. In this example, we are passing both attribute parameters and child content to the component under test, in this case, a basic <Alert> component: @inherits TestComponentBase <Fixture Test=\"fixture => { }\"> <ComponentUnderTest> <Alert Type=\"AlertType.Warning\" Heading=\"TDD takes practise\"> Before you really get the benefit of TDD, you need to practice... </Alert> </ComponentUnderTest> </Fixture> <SnapshotTest> <TestInput> <Alert Type=\"AlertType.Warning\" Heading=\"TDD takes practise\"> Before you really get the benefit of TDD, you need to practice... </Alert> </TestInput> <ExpectedOutput> <div diff:ignore>...</div> </ExpectedOutput> </SnapshotTest> Injecting services into the components under test is covered on the Injecting Services into Components Under Test page. Further Reading Now that we have covered the basics of writing tests using Razor syntax, you can continue digging deeper, e.g. by looking at: Fixture Test Details SnapshotTest Details Injecting Services into Components Under Test Verifying Markup from a Component Verifying the State of a Component Under Test Triggering Event Handlers in Components"
  },
  "docs/interaction/awaiting-async-state.html": {
    "href": "docs/interaction/awaiting-async-state.html",
    "title": "Awaiting an Asynchronous State Change in a Component Under Test | bUnit",
    "keywords": "Awaiting an Asynchronous State Change A test can fail if a component performs asynchronous renders, e.g. because it was awaiting a task to complete before continuing its render life-cycle. For example, if a component is waiting for an async web service to return data to it in the OnInitializedAsync() life-cycle method, before rendering it to the render tree. This happens because tests execute in the test framework's synchronization context and the test renderer executes renders in its own synchronization context. bUnit comes with two methods that helps deal with this issue, the WaitForState(Func<Boolean>, TimeSpan?) method covered on this page, and the WaitForAssertion(Action, TimeSpan?) method covered on the Assertion of Asynchronous Changes page. Waiting for State Using WaitForState The WaitForState(Func<Boolean>, TimeSpan?) method can be used to block and wait in a test method, until the provided predicate returns true, or the timeout is reached (the default timeout is one second). Note The WaitForState() method will try the predicate pass to it when the WaitForState() method is called, and every time the component under test renders. Let us look at an example. Consider the following <AsyncData> component, who awaits an async TextService in its OnInitializedAsync() life-cycle method. When the service returns the data, the component will automatically re-render, to update its rendered markup. <p>@text</p> @code { string text = string.Empty; [Parameter] public Task<string> TextService { get; set; } protected override async Task OnInitializedAsync() { text = await TextService; } } To test the <AsyncData> component, do the following: using var ctx = new TestContext(); var textService = new TaskCompletionSource<string>(); var cut = ctx.RenderComponent<AsyncData>(parameters => parameters .Add(p => p.TextService, textService.Task) ); // Act - set the awaited result from the text service textService.SetResult(\"Hello World\"); // Wait for state before continuing test cut.WaitForState(() => cut.Find(\"p\").TextContent == \"Hello World\"); // Assert - verify result has been set cut.MarkupMatches(\"<p>Hello World</p>\"); This is what happens in the test: The test uses a TaskCompletionSource<string> to simulate an async web service. In the second highlighted line, the result is provided to the component through the textService . This causes the component to re-render. In the third highlighted line, the WaitForState() method is used to block the test until the predicate provided to it returns true. Finally, the tests assertion step can execute, knowing that the desired state has been reached. Warning The wait predicate and an assertion should not verify the same thing. Instead, use the WaitForAssertion(...) method covered on the Assertion of Asynchronous Changes page instead. Controlling Wait Timeout The timeout, which defaults to one second, can be controlled by passing a TimeSpan as the second argument to the WaitForState() method, e.g.: cut.WaitForState(() => cut.Find(\"p\").TextContent == \"Long time\", TimeSpan.FromSeconds(2)); If the timeout is reached, a WaitForFailedException exception is thrown with the following error message: The state predicate did not pass before the timeout period passed."
  },
  "docs/interaction/index.html": {
    "href": "docs/interaction/index.html",
    "title": "Interacting with a Component Under Test | bUnit",
    "keywords": "Interacting with a Component Under Test This section covers the various ways to interact with a component under test, e.g. trigger event handlers. This and more is covered in the following sub sections: Triggering Event Handlers in Components : This covers how to invoke event handlers bound to elements rendered by a component under test. Triggering a Render Life Cycle on a Component : This covers how to manually trigger a render cycle for a component under test. Awaiting an Asynchronous State Change in a Component Under Test : This covers how to await one or more asynchronous changes to a component under test's state, before continuing the test."
  },
  "docs/interaction/trigger-event-handlers.html": {
    "href": "docs/interaction/trigger-event-handlers.html",
    "title": "Triggering Event Handlers in Components | bUnit",
    "keywords": "Triggering Event Handlers in Components Blazor makes it possible to bind many event handlers to elements in a Blazor component, using the @onXXXX syntax, e.g. @onclick=\"MyClickHandler\" . bUnit comes with event dispatch helper methods that makes it possible to invoke event handlers for all event types supported by Blazor. The built-in dispatch event helpers are: Clipboard events Drag events Focus events General events Input events Keyboard events Media events Mouse events Pointer events Progress events Touch event To use these, first find the element in the component under test where the event handler is bound to, this is usually done with the Find(string cssSelector) method, and then invoke the event dispatch helper method of choice. The following section demonstrates how. Invoking an Event Handler on an Element To invoke an event handler on an element, first find the element in the component under test, and then call the desired event dispatch helper method. Let's look at a common example, where a @onclick event handler is invoked. The example will use the <ClickMe> component listed here: <button @onclick=\"ClickHandler\">Click ME!</button> @code { void ClickHandler(MouseEventArgs args) { // ... } } To trigger the @onclick ClickHandler event handler method in the <ClickMe> component, do the following: C# test code Razor test code // Arrange using var ctx = new TestContext(); var cut = ctx.RenderComponent<ClickMe>(); var buttonElement = cut.Find(\"button\"); // Act buttonElement.Click(); buttonElement.Click(detail: 3, ctrlKey: true); buttonElement.Click(new MouseEventArgs()); // Assert // ... @inherits TestComponentBase <Fixture Test=\"ClickingButtonWorks\"> <ComponentUnderTest> <ClickMe /> </ComponentUnderTest> @code { void ClickingButtonWorks(Fixture fixture) { // Arrange var cut = fixture.GetComponentUnderTest<ClickMe>(); var buttonElement = cut.Find(\"button\"); // Act buttonElement.Click(); buttonElement.Click(detail: 3, ctrlKey: true); buttonElement.Click(new MouseEventArgs()); // Assert // ... } } </Fixture> This is what happens in the test: In the arrange step of the test, the <ClickMe> component is rendered and the <button> element is found using the Find(string cssSelector) method. In the act step of the test, the <button> 's click event handler, in this case, the ClickHandler event handler method, is invoked in three different ways: The first and second invocation uses the same Click method. It has a number of optional arguments, some of which are passed in the second invocation. If any arguments are provided, they are added to an instance of the MouseEventArgs type, which is passed to the event handler, if it has it as an argument. The last invocation uses the Click method that takes an instance of the MouseEventArgs type, which is passed to the event handler, if it has it as an argument. All the event dispatch helper methods has the same two overloads, one that takes a number of optional arguments, and one that takes the event types EventArgs type."
  },
  "docs/interaction/trigger-renders.html": {
    "href": "docs/interaction/trigger-renders.html",
    "title": "Triggering a Render Life Cycle on a Component | bUnit",
    "keywords": "Triggering a Render Life Cycle on a Component When a component under test is rendered, an instance of the IRenderedComponent<TComponent> type is returned. Through that, it is possible to cause the component under test to render again directly through the Render() method or one of the SetParametersAndRender(...) methods or indirectly through the <xref:Bunit.IRenderedFragmentBase.InvokeAsync(System.Action)> method. Warning The Render() and SetParametersAndRender() methods are not available in the IRenderedFragment type that is returned when calling the non -generic version of GetComponentUnderTest() in <Fixture> -based Razor tests. Call the generic version of GetComponentUnderTest<TComponent>() to get a IRenderedComponent<TComponent> . Note These methods are available and work the same in both C# and Razor-based tests. The examples below are from C# based tests only. Let's look at how to use each of these methods to cause a re-render. Render The Render() tells the renderer to re-render the component, i.e. go through its life-cycle methods (except for OnInitialized() and OnInitializedAsync() methods). To use it, do the following: using var ctx = new TestContext(); var cut = ctx.RenderComponent<Heading>(); Assert.Equal(1, cut.RenderCount); // Re-render without new parameters cut.Render(); Assert.Equal(2, cut.RenderCount); The highlighted line shows the call to Render() . Tip The number of renders a component has been through can be inspected and verified using the RenderCount property. SetParametersAndRender The SetParametersAndRender(...) methods tells the renderer to re-render the component with new parameters, i.e. go through its life-cycle methods (except for OnInitialized() and OnInitializedAsync() methods), passing the new parameters to the SetParametersAsync() method, but only the new parameters . To use it, do the following: using var ctx = new TestContext(); var cut = ctx.RenderComponent<Item>(parameters => parameters .Add(p => p.Value, \"Foo\") ); cut.MarkupMatches(\"<span>Foo</span>\"); // Re-render with new parameters cut.SetParametersAndRender(parameters => parameters .Add(p => p.Value, \"Bar\") ); cut.MarkupMatches(\"<span>Bar</span>\"); The highlighted line shows the call to SetParametersAndRender(Action<ComponentParameterBuilder<TComponent>>) , which is also available as SetParametersAndRender(ComponentParameter[]) if you prefer that method of passing parameters. Note Passing parameters to components through the SetParametersAndRender(...) methods is identical to doing it with the RenderComponent<TComponent>(...) methods, described in detail on the Passing Parameters to Components page. InvokeAsync Invoking methods on a component under test, which causes a render, e.g. by calling StateHasChanged , can result in the following error: The current thread is not associated with the Dispatcher. Use InvokeAsync() to switch execution to the Dispatcher when triggering rendering or component state. If you receive this error, you need to invoke your method inside an Action delegate passed to the <xref:Bunit.IRenderedFragmentBase.InvokeAsync(System.Action)> method. Consider the <ImparativeCalc> component listed below: <output>@result</output> @code { int result = 0; public void Calculate(int x, int y) { result = x + y; StateHasChanged(); } } To invoke the Calculate() method on the component instance, do the following: using var ctx = new TestContext(); var cut = ctx.RenderComponent<ImparativeCalc>(); // Indirectly re-renders through the call to StateHasChanged // in the Calculate(x, y) method. cut.InvokeAsync(() => cut.Instance.Calculate(1, 2)); cut.MarkupMatches(\"<output>3</output>\"); The highlighted line shows the call to <xref:Bunit.IRenderedFragmentBase.InvokeAsync(System.Action)>, which is passed an Action delegate, that calls the Calculate method. Tip The instance of a component under test is available through the Instance property."
  },
  "docs/misc-test-tips.html": {
    "href": "docs/misc-test-tips.html",
    "title": "Miscellaneous Testing Tips | bUnit",
    "keywords": "Miscellaneous bUnit Testing Tips Here is a few testing tips and tricks that have proven useful to us. Projects Structure and Tips and Tricks The recommended solution/project structure for a test and production code project set-up is: src | MyComponentLib.csproj (namespace e.g. \"Company.MyComponentLib\") | _Imports.razor | Component1.razor | SubFolder | SubComponent1.razor test | MyComponentLibTests.csproj (with project reference to MyComponentLib.csproj) | _Imports.razor | Component1Test.cs | SubFolder | SubComponent1Test.cs Use same Root Namespace and Folder Structure A neat trick, which will limit the import statements needed in your test project, is to set the root namespace to the same as that of the production code project, AND use the same folder structure as shown above. Following the example above, the MyComponentLibTests.csproj file should contain: <PropertyGroup> <RootNamespace>Company.MyComponentLib</RootNamespace> </PropertyGroup> Capture Logs from ILogger in Test Output TODO: Document XunitLogger and XunitLoggerFactory Make copy/paste of HTML easier When writing C# based tests, you sometime want to copy/paste some HTML into C# strings from e.g. a Razor file. This is tedious to do manually as you have to escape the quotes and other special characters. The extension, SmartPaster2019 , allows us to copy strings where any character that needs to be escaped will be automatically."
  },
  "docs/providing-input/configure-3rd-party-libs.html": {
    "href": "docs/providing-input/configure-3rd-party-libs.html",
    "title": "Configure 3rd Party Libraries for Testing | bUnit",
    "keywords": "Configure 3rd Party Libraries for Testing Testing a component that is built using a 3rd party component library can require additional setup steps in each test, to ensure the 3rd party components work correctly in a test context. If for example a 3rd party component requires services to be registered in production code, it is likely that this is needed in a test context as well. See the Injecting Services into Components Under Test page for more info on this. Similarly, if a root component is needed to provide cascading values to the 3rd party components, that is likely to be needed as well. See the Passing Parameters to Components page for more on this. bUnit Friendly Component Libraries This section contains a table of 3rd party component libraries that are known to allow its users to test their components with bUnit. If addition setup or configuration is needed, a link is provided to the component library's own documentation, that shows how to test a component that uses components from the library. Component Library bUnit compatibility notes Test context setup guide . . . Tip If you are a Blazor component vendor and have instructions on how to setup a bUnit test context for testing components that use your components, please add a link to your documentation and component library to the table above. Just submit a pull-request to this page with the relevant links added, share the relevant links in bUnit's gitter chat , or add an issue on bUnit's github page with the relevant links."
  },
  "docs/providing-input/index.html": {
    "href": "docs/providing-input/index.html",
    "title": "Providing Input to a Component Under Test | bUnit",
    "keywords": "Providing Input to a Component Under Test This section covers the various ways to provide input to a component under test, its split into three sub sections: Passing Parameters to Components : This covers passing regular parameters, child content, cascading values, event callbacks, etc. This topic is mostly relevant when writing tests in C# only. Injecting Services into Components Under Test : This covers injecting services into components under test. This topic is relevant for both Razor-based tests and C# only tests. Configure 3rd Party Libraries for Testing : This covers setting up 3rd party libraries in a bUnit testing scenario, such that components under test that use them can be tested easily."
  },
  "docs/providing-input/inject-services-into-components.html": {
    "href": "docs/providing-input/inject-services-into-components.html",
    "title": "Injecting Services into Components Under Test | bUnit",
    "keywords": "Injecting Services into Components Under Test It is common that components under test has a dependency on services, injected into them through the @inject IMyService MyService syntax in .razor files, or the [Inject] private IMyService MyService { get; set; } syntax in .cs files. This is supported in bUnit through the Services collection on the ITestContext types that is used in both C# and Razor based tests. It allows services to be registered, how it is done in production code in Startup.cs in Blazor Server projects and in Program.cs in Blazor Wasm projects. In bUnit, you register the services in the Services collection before you render a component under test. The following sections shows how to do this in C# and Razor based tests. The examples will test the <WeatherForecasts> component listed below, that depends on the IWeatherForecastService service, injected in line 1: @inject IWeatherForecastService ForecastService <h1>Weather forecast</h1> <p>This component demonstrates fetching data from a service.</p> @if (Forecasts is null) { <p><em>Loading...</em></p> } else { <WeatherForecastTabel Forecasts=@Forecasts /> } @code { public WeatherForecast[] Forecasts { get; private set; } protected override async Task OnInitializedAsync() { Forecasts = await ForecastService.GetForecastAsync(DateTime.Now); } } Injecting Services in C# Based Tests Here is a C# based test that registers the IWeatherForecastService in the Services collection, which is needed by the <WeatherForecasts> component listed above. using var ctx = new TestContext(); // Register services ctx.Services.AddSingleton<IWeatherForecastService>(new WeatherForecastService()); // RenderComponent will inject the service in the WeatherForecasts component // when it is instantiated and rendered. var cut = ctx.RenderComponent<WeatherForecasts>(); // Assert that service is injected Assert.NotNull(cut.Instance.Forecasts); The highlighted line shows how the IWeatherForecastService is registered in the test context's Services collection, which is just a standard IServiceCollection , using the standard .NET Core DI services method, AddSingleton . Note The AddSingleton() method is only available on the Services collection if you import the Microsoft.Extensions.DependencyInjection type. Injecting Services in Razor Based Tests Here is a Razor based test that registers the IWeatherForecastService in the Services collection during the Setup methods, which is needed by the <WeatherForecasts> component listed above. @inherits TestComponentBase <Fixture Setup=\"RegisterWeatherForecastServices\" Test=\"VerifyServiceInjectedCorrectly\"> <ComponentUnderTest> <WeatherForecasts /> </ComponentUnderTest> @code { void RegisterWeatherForecastServices(Fixture fixture) { fixture.Services.AddSingleton<IWeatherForecastService>(new WeatherForecastService()); } void VerifyServiceInjectedCorrectly(Fixture fixture) { // Act - get component under test var cut = fixture.GetComponentUnderTest<WeatherForecasts>(); // Assert Assert.NotNull(cut.Instance.Forecasts); } } </Fixture> The highlighted line shows how the IWeatherForecastService is registered, using the standard .NET Core DI services method, AddSingleton . This can either be done via the Fixture 's Setup method as in this example, if you want to separate the service registration from the test method, or it can be done in the test method before calling GetComponentUnderTest() . In the following example shows how to do this with <SnapshotTest> tests: @inherits TestComponentBase @code { void RegisterWeatherForecastServices(SnapshotTest test) { test.Services.AddSingleton<IWeatherForecastService>(new WeatherForecastService()); } } <SnapshotTest Setup=\"RegisterWeatherForecastServices\"> <TestInput> <WeatherForecasts /> </TestInput> <ExpectedOutput>...</ExpectedOutput> </Fixture> Tip If multiple Razor tests share the same setup logic, they can share the same dedicated setup method as well. Note The AddSingleton() method is only available on the Services collection if you import the Microsoft.Extensions.DependencyInjection type. Further Reading A closely related topic is mocking. To learn more about mocking in bUnit, go to the Mocking and Faking Component Dependencies page."
  },
  "docs/providing-input/passing-parameters-to-components.html": {
    "href": "docs/providing-input/passing-parameters-to-components.html",
    "title": "Passing Parameters to Components | bUnit",
    "keywords": "Passing Parameters to Components bUnit comes with a bunch of ways to pass parameters to components. In Razor-based tests, those written in .razor files, passing parameters is exactly the same as in your normal Blazor pages and components. For C#-based test code, help is needed. This comes as: Loosely typed factory methods Simple tuple-based syntax, i.e. (name, value) Strongly typed builder (still experimental) There are two methods in bUnit that allows passing parameters in C#-based test code: RenderComponent on the test context SetParametersAndRender on a rendered component In the following sub sections, we will show both C# and Razor-based test code, just click between them using the tabs. Tip In all examples below, the ComponentParameterFactory is imported into the test class using using static Bunit.ComponentParameterFactory; . This results in a lot less boilerplate code, which improves test readability. With using static import, we can use the factory methods like this: using static Bunit.ComponentParameterFactory; ... var componentParameter = Parameter(\"paramName\", someValue); With a regular using import, we have to prefix the static factory methods like this: using Bunit.ComponentParameterFactory; ... var componentParameter = ComponentParameterFactory.Parameter(\"paramName\", someValue); Note The examples below are written using xUnit, but the code is the same with NUnit and MSTest. Regular Parameters A regular parameter is one that is declared using the [Parameter] attribute. The following subsections will cover both non Blazor types parameters, e.g. int and List<string> , and the special Blazor types like EventCallback and RenderFragment . Non-Blazor Type Parameters Let us look at an example of passing parameter that takes types which or not special to Blazor, i.e.: public class NonBlazorTypesParams : ComponentBase { [Parameter] public int Numbers { get; set; } [Parameter] public List<string> Lines { get; set; } } Using either C# or Razor test code, this can be done like this: C# test code Razor test code using var ctx = new TestContext(); // Using C# tuple with hardcoded name var cut1 = ctx.RenderComponent<NonBlazorTypesParams>( (\"Numbers\", 42), (\"Lines\", new List<string> { \"Hello\", \"World\" }) ); // Using C# tuple with refactor safe name var cut2 = ctx.RenderComponent<NonBlazorTypesParams>( (nameof(NonBlazorTypesParams.Numbers), 42), (nameof(NonBlazorTypesParams.Lines), new List<string> { \"Hello\", \"World\" }) ); // Using factory method var cut3 = ctx.RenderComponent<NonBlazorTypesParams>( Parameter(\"Numbers\", 42), Parameter(\"Lines\", new List<string> { \"Hello\", \"World\" }) ); // Using parameter builder var cut4 = ctx.RenderComponent<NonBlazorTypesParams>(parameters => parameters .Add(p => p.Numbers, 42) .Add(p => p.Lines, new List<string> { \"Hello\", \"World\" }) ); All of these examples do the same thing, here is what is going on: The first example passes parameters using C# tuples, (string name, object? value) . The second example also uses C# tuples to pass the parameters, but the name is retrieved in a refactor safe manner using the nameof keyword in C#. The third example uses the Parameter(String, Object) factory method. The last example uses the ComponentParameterBuilder<TComponent> 's Add method, which takes a parameter selector expression that selects the parameter using a lambda, and forces you to provide the correct type for the value. This makes the builders methods strongly typed and refactor safe. <Fixture Test=\"f => {}\"> <ComponentUnderTest> <NonBlazorTypesParams Numbers=\"42\" Lines=@(new List<string> { \"Hello\", \"World\" }) /> </ComponentUnderTest> </Fixture> This is just regular Blazor parameter passing, which is the same for both Fixture and SnapshotTest razor tests. EventCallback Parameters This example will pass parameters to the follow two EventCallback parameters: public class EventCallbackParams : ComponentBase { [Parameter] public EventCallback<MouseEventArgs> OnClick { get; set; } [Parameter] public EventCallback OnSomething { get; set; } } Using either C# or Razor test code, this can be done like this: C# test code Razor test code using var ctx = new TestContext(); // Using factory method with hardcoded name var cut1 = ctx.RenderComponent<EventCallbackParams>( EventCallback(\"OnClick\", (MouseEventArgs args) => { /* handle callback */ }), EventCallback(\"OnSomething\", () => { /* handle callback */ }) ); // Using factory method refactor safe name var cut2 = ctx.RenderComponent<EventCallbackParams>( EventCallback(nameof(EventCallbackParams.OnClick), (MouseEventArgs args) => { /* handle callback */ }), EventCallback(nameof(EventCallbackParams.OnSomething), () => { /* handle callback */ }) ); // Using parameter builder var cut3 = ctx.RenderComponent<EventCallbackParams>(parameters => parameters .Add(p => p.OnClick, args => { /* handle callback */ }) .Add(p => p.OnSomething, () => { /* handle callback */ }) ); These examples o the same thing, here is what is going on: The first and second example uses the EventCallback factory method in ComponentParameterFactory (there are many overloads that take different kinds of Action and Func delegates), to pass a lambda as the event callback to the specified parameter. The second example uses the ComponentParameterBuilder<TComponent> 's Add method, which takes a parameter selector expression that selects the parameter using a lambda, and forces you to provide the correct type of callback method. This makes the builders methods strongly typed and refactor safe. <Fixture Test=\"f => {}\"> <ComponentUnderTest> <EventCallbackParams OnClick=@(args => { /* handle callback */ }) OnSomething=@(() => { /* handle callback */ }) /> </ComponentUnderTest> </Fixture> This is just regular Blazor parameter passing, which is the same for both Fixture and SnapshotTest razor tests. ChildContent Parameters The ChildContent parameter in Blazor is represented by a RenderFragment . In Blazor, this can be regular HTML markup, it can be Razor markup, e.g. other component declarations, or a mix of the two. If it is another component, then that component can also receive child content, and so forth. The following subsections has different examples of child content being passed to the following component: public class ChildContentParams : ComponentBase { [Parameter] public RenderFragment ChildContent { get; set; } } Passing HTML to the ChildContent Parameter C# test code Razor test code using var ctx = new TestContext(); // Using factory method var cut1 = ctx.RenderComponent<ChildContentParams>( ChildContent(\"<h1>Hello World</h1>\") ); // Using parameter builder var cut2 = ctx.RenderComponent<ChildContentParams>(parameters => parameters .AddChildContent(\"<h1>Hello World</h1>\") ); These examples do the same thing, here is what is going on: The first example uses the ChildContent factory method in ComponentParameterFactory , to pass a HTML markup string as the input to the ChildContent parameter. The second example uses the ComponentParameterBuilder<TComponent> 's AddChildContent method to pass a HTML markup string as the input to the ChildContent parameter. <Fixture Test=\"f => {}\"> <ComponentUnderTest> <ChildContentParams> <h1>Hello World</h1> </ChildContentParams> </ComponentUnderTest> </Fixture> This is just regular Blazor child content parameter passing, e.g. as child content to the component under test, which is the same for both Fixture and SnapshotTest razor tests. Passing a Component without Parameters to the ChildContent Parameter To pass a component, e.g. the classic <Counter> component, that does not take any parameters itself, to a ChildContent parameter, do the following: C# test code Razor test code using var ctx = new TestContext(); // Using factory method var cut1 = ctx.RenderComponent<ChildContentParams>( ChildContent<Counter>() ); // Using parameter builder var cut2 = ctx.RenderComponent<ChildContentParams>(parameters => parameters .AddChildContent<Counter>() ); These examples do the same thing, here is what is going on: The first example uses the ChildContent<TChildComponent> factory method in ComponentParameterFactory , where TChildComponent is the (child) component that should be passed to the component under test's ChildContent parameter. The second example uses the ComponentParameterBuilder<TComponent> 's AddChildContent<TChildComponent> method, where TChildComponent is the (child) component that should be passed to the component under test's ChildContent parameter. <Fixture Test=\"f => {}\"> <ComponentUnderTest> <ChildContentParams> <Counter /> </ChildContentParams> </ComponentUnderTest> </Fixture> This is just regular Blazor child content parameter passing, where the <Counter /> component is declared inside the component under test. This is the same for both Fixture and SnapshotTest razor tests. Passing a Component with Parameters to the ChildContent Parameter To pass a component with parameters to a component under test, e.g. the <Alert> component with the following parameters, do the following: [Parameter] public string Heading { get; set; } [Parameter] public AlertType Type { get; set; } [Parameter] public RenderFragment ChildContent { get; set; } C# test code Razor test code using var ctx = new TestContext(); // Using factory method var cut1 = ctx.RenderComponent<ChildContentParams>( ChildContent<Alert>( (\"Heading\", \"Alert heading\"), (\"Type\", AlertType.Warning), ChildContent(\"<p>Hello World</p>\") ) ); // Using parameter builder var cut2 = ctx.RenderComponent<ChildContentParams>(parameters => parameters .AddChildContent<Alert>(alertParameters => alertParameters .Add(p => p.Heading, \"Alert heading\") .Add(p => p.Type, AlertType.Warning) .AddChildContent(\"<p>Hello World</p>\") ) ); These examples do the same thing, here is what is going on: The first example uses the ChildContent<TChildComponent> factory method in ComponentParameterFactory , where TChildComponent is the (child) component that should be passed to the component under test. ChildContent<TChildComponent> factory method can take zero or more component parameters as input itself, which will be passed to the TChildComponent component, in this case, the <Alert> component. The second example uses the ComponentParameterBuilder<TComponent> 's AddChildContent<TChildComponent> method, where TChildComponent is the (child) component that should be passed to the component under test. The AddChildContent<TChildComponent> method takes an optional ComponentParameterBuilder<TComponent> as input, which can be used to pass parameters to the TChildComponent component, in this case, the <Alert> component. <Fixture Test=\"f => {}\"> <ComponentUnderTest> <ChildContentParams> <Alert Heading=\"Alert heading\" Type=\"AlertType.Warning\"> <p>Hello World</p> </Alert> </ChildContentParams> </ComponentUnderTest> </Fixture> This is just regular Blazor child content parameter passing, where the <Alert> component is declared inside the component under test, and any parameters is passed to it like normal in Blazor. This is the same for both Fixture and SnapshotTest razor tests. Passing a mix of Razor and HTML to ChildContent Parameter The easiest way to pass a mix of HTML markup and Razor markup to a ChildContent parameter is to use Razor based tests, as the example below illustrates. It is possible to do it in C# only tests, but that means writing RenderTreeBuilder code. C# test code Razor test code using var ctx = new TestContext(); // Using parameter builder var cut = ctx.RenderComponent<ChildContentParams>(parameters => parameters .Add(p => p.ChildContent, (RenderFragment)(builder => { builder.AddMarkupContent(1, \"<h1>Below you will find a most interesting alert!</h1>\"); builder.OpenComponent<Alert>(2); builder.AddAttribute(3, \"Heading\", \"Alert heading\"); builder.AddAttribute(4, \"Type\", AlertType.Warning); builder.AddAttribute(5, \"ChildContent\", (RenderFragment)(alertBuilder => alertBuilder.AddMarkupContent(1, \"<p>Hello World</p>\"))); builder.CloseComponent(); })) ); Passing a mix of markup and a component to a ChildContent parameter is currently only possible using the ComponentParameterBuilder<TComponent> , and unfortunately you have to create the render fragment manually using the RenderTreeBuilder , like this example demonstrates. <Fixture Test=\"f => {}\"> <ComponentUnderTest> <ChildContentParams> <h1>Below you will find a most interesting alert!</h1> <Alert Heading=\"Alert heading\" Type=\"AlertType.Warning\"> <p>Hello World</p> </Alert> </ChildContentParams> </ComponentUnderTest> </Fixture> This is just regular Blazor child content parameter passing, where regular HTML markup and an <Alert> component is declared inside the component under test, and any parameters is passed to it like normal in Blazor. This is the same for both Fixture and SnapshotTest razor tests. RenderFragment Parameters A RenderFragment parameter is very similar to the special ChildContent parameter described in the previous section, since a ChildContent parameter is of type RenderFragment . The only difference is the name, which must be anything other than ChildContent . In Blazor, a RenderFragment parameter can be regular HTML markup, it can be Razor markup, e.g. other component declarations, or a mix of the two. If it is another component, then that component can also receive child content, and so forth. The following subsections has different examples of content being passed to the following component's RenderFragment parameter: public class RenderFragmentParams : ComponentBase { [Parameter] public RenderFragment Content { get; set; } } } Passing HTML to a RenderFragment Parameter C# test code Razor test code using var ctx = new TestContext(); // Using factory method var cut1 = ctx.RenderComponent<RenderFragmentParams>( RenderFragment(\"Content\", \"<h1>Hello World</h1>\") ); // Using parameter builder var cut2 = ctx.RenderComponent<RenderFragmentParams>(parameters => parameters .Add(p => p.Content, \"<h1>Hello World</h1>\") ); These examples do the same thing, here is what is going on: The first example uses the RenderFragment factory method in ComponentParameterFactory , to pass a HTML markup string as the input to the RenderFragment parameter. The second example uses the ComponentParameterBuilder<TComponent> 's Add method to pass a HTML markup string as the input to the RenderFragment parameter. <Fixture Test=\"f => {}\"> <ComponentUnderTest> <RenderFragmentParams> <Content> <h1>Hello World</h1> </Content> </RenderFragmentParams> </ComponentUnderTest> </Fixture> This is just regular Blazor RenderFragment parameter passing, e.g. as markup in the component under test's <Content> element, which is the same for both Fixture and SnapshotTest razor tests. Passing a Component without Parameters to a RenderFragment Parameter To pass a component, e.g. the classic <Counter> component, which does not take any parameters, to a RenderFragment parameter, do the following: C# test code Razor test code using var ctx = new TestContext(); // Using factory method var cut1 = ctx.RenderComponent<RenderFragmentParams>( RenderFragment<Counter>(\"Content\") ); // Using parameter builder var cut2 = ctx.RenderComponent<RenderFragmentParams>(parameters => parameters .Add<Counter>(p => p.Content) ); These examples do the same thing, here is what is going on: The first example uses the Add<TChildComponent> factory method in ComponentParameterFactory , where TChildComponent is the (child) component that should be passed to the RenderFragment parameter. The second example uses the ComponentParameterBuilder<TComponent> 's Add<TChildComponent> method, where TChildComponent is the (child) component that should be passed to the RenderFragment parameter. <Fixture Test=\"f => {}\"> <ComponentUnderTest> <RenderFragmentParams> <Content> <Counter /> </Content> </RenderFragmentParams> </ComponentUnderTest> </Fixture> This is just regular Blazor child content parameter passing, where the <Counter /> component is declared inside component under test's <Content> element. This is the same for both Fixture and SnapshotTest razor tests. Passing a Component with Parameters to a RenderFragment Parameter To pass a component with parameters to a RenderFragment parameter, e.g. the <Alert> component with the following parameters, do the following: [Parameter] public string Heading { get; set; } [Parameter] public AlertType Type { get; set; } [Parameter] public RenderFragment ChildContent { get; set; } C# test code Razor test code using var ctx = new TestContext(); // Using factory method var cut1 = ctx.RenderComponent<RenderFragmentParams>( RenderFragment<Alert>(\"Content\", (\"Heading\", \"Alert heading\"), (\"Type\", AlertType.Warning), ChildContent(\"<p>Hello World</p>\") ) ); // Using parameter builder var cut2 = ctx.RenderComponent<RenderFragmentParams>(parameters => parameters .Add<Alert>(p => p.Content, alertParameters => alertParameters .Add(p => p.Heading, \"Alert heading\") .Add(p => p.Type, AlertType.Warning) .AddChildContent(\"<p>Hello World</p>\") ) ); These examples do the same thing, here is what is going on: The first example uses the RenderFragment<TChildComponent> factory method in ComponentParameterFactory , where TChildComponent is the (child) component that should be passed to the RenderFragment parameter. RenderFragment<TChildComponent> factory method takes the name of the parameter and zero or more component parameters as input, which will be passed to the TChildComponent component, in this case, the <Alert> component. The second example uses the ComponentParameterBuilder<TComponent> 's Add<TChildComponent> method, where TChildComponent is the (child) component that should be passed to the RenderFragment parameter. The Add<TChildComponent> method takes an optional ComponentParameterBuilder<TComponent> as input, which can be used to pass parameters to the TChildComponent component, in this case, the <Alert> component. <Fixture Test=\"f => {}\"> <ComponentUnderTest> <RenderFragmentParams> <Content> <Alert Heading=\"Alert heading\" Type=\"AlertType.Warning\"> <p>Hello World</p> </Alert> </Content> </RenderFragmentParams> </ComponentUnderTest> </Fixture> This is just regular Blazor RenderFragment parameter passing, where the <Alert> component is declared inside the component under test's <Content> element, and any parameters is passed to it like normal in Blazor. This is the same for both Fixture and SnapshotTest razor tests. Passing a mix of Razor and HTML a RenderFragment Parameter The easiest way to pass a mix of HTML markup and Razor markup to a RenderFragment parameter is to use Razor based tests, as the example below illustrates. It is possible to do it in C# only tests, but that means writing RenderTreeBuilder code. C# test code Razor test code using var ctx = new TestContext(); // Using parameter builder var cut = ctx.RenderComponent<RenderFragmentParams>(parameters => parameters .Add(p => p.Content, (RenderFragment)(builder => { builder.AddMarkupContent(1, \"<h1>Below you will find a most interesting alert!</h1>\"); builder.OpenComponent<Alert>(2); builder.AddAttribute(3, \"Heading\", \"Alert heading\"); builder.AddAttribute(4, \"Type\", AlertType.Warning); builder.AddAttribute(5, \"ChildContent\", (RenderFragment)(alertBuilder => alertBuilder.AddMarkupContent(1, \"<p>Hello World</p>\"))); builder.CloseComponent(); })) ); Passing a mix of markup and a component to a RenderFragment parameter is currently only possible using the ComponentParameterBuilder<TComponent> , and unfortunately you have to create the render fragment manually using the RenderTreeBuilder , like this example demonstrates. <Fixture Test=\"f => {}\"> <ComponentUnderTest> <RenderFragmentParams> <Content> <h1>Below you will find a most interesting alert!</h1> <Alert Heading=\"Alert heading\" Type=\"AlertType.Warning\"> <p>Hello World</p> </Alert> </Content> </RenderFragmentParams> </ComponentUnderTest> </Fixture> This is just regular Blazor RenderFragment parameter passing, where regular HTML markup and an <Alert> component is declared inside the component under test's <Content> element, and any parameters is passed to it like normal in Blazor. This is the same for both Fixture and SnapshotTest razor tests. Templates Parameters Template parameters are closely related to RenderFragment parameters described in the previous section. The difference is that a template parameter is of type RenderFragment<TValue> . Like with regular RenderFragment , a RenderFragment<TValue> template parameter can be regular HTML markup, it can be Razor markup, e.g. other component declarations, or a mix of the two. If it is another component, then that component can also receive child content, and so forth. The following examples renders this template component, which has a RenderFragment<TValue> template parameter: @typeparam TItem <div id=\"generic-list\"> @foreach (var item in Items) { @Template(item) } </div> @code { [Parameter] public IEnumerable<TItem> Items { get; set; } [Parameter] public RenderFragment<TItem> Template { get; set; } } Passing a HTML based templates To pass a template into a RenderFragment<TValue> parameter, that just consists of regular HTML markup, do the following: C# test code Razor test code using var ctx = new TestContext(); // Using factory method var cut1 = ctx.RenderComponent<TemplateParams<string>>( (\"Items\", new string[] { \"Foo\", \"Bar\", \"Baz\" }), Template<string>(\"Template\", item => $\"<span>{item}</span>\") ); // Using parameter builder var cut2 = ctx.RenderComponent<TemplateParams<string>>(parameters => parameters .Add(p => p.Items, new[] { \"Foo\", \"Bar\", \"Baz\" }) .Add(p => p.Template, item => $\"<span>{item}</span>\") ); These examples do the same thing, i.e. pass a HTML markup template into the component under test. This is done with the help of a Func<TValue, string> delegate, that takes whatever the template value is as input, and returns a (markup) string. The delegate is automatically turned into a RenderFragment<TValue> type and pass to the template parameter. The first example passes data to the Items parameter, and then it uses the Template<TValue> factory method in ComponentParameterFactory , that takes the name of the RenderFragment<TValue> template parameter, and the Func<TValue, string> delegate as input. The second example uses the ComponentParameterBuilder<TComponent> 's Add method to first add the data to Items parameter and then a Func<TValue, string> delegate. The delegate creates a simple markup string in both examples. <Fixture Test=\"f => {}\"> <ComponentUnderTest> <TemplateParams Items=@(new string[]{ \"Foo\", \"Bar\", \"Baz\" }) TItem=\"string\"> <Template> <span>@context</span> </Template> </TemplateParams> </ComponentUnderTest> </Fixture> <Fixture Test=\"f => {}\"> <ComponentUnderTest> This is just regular Blazor RenderFragment<TValue> parameter passing, in this case, to the Template parameter. This is the same for both Fixture and SnapshotTest razor tests. Passing HTML and Components based templates To pass a template into a RenderFragment<TValue> parameter, which consists of both regular HTML markup and components, in this case, the <Item> component listed below, do the following: <span>@Value</span> @code { [Parameter] public string Value { get; set; } } C# test code Razor test code using var ctx = new TestContext(); // Using factory method var cut1 = ctx.RenderComponent<TemplateParams<string>>( (\"Items\", new string[] { \"Foo\", \"Bar\", \"Baz\" }), Template<string>(\"Template\", item => builder => { builder.OpenElement(1, \"div\"); builder.AddAttribute(2, \"class\", \"item\"); builder.OpenComponent<Item>(3); builder.AddAttribute(4, \"Value\", item); builder.CloseComponent(); builder.CloseElement(); }) ); // Using parameter builder var cut2 = ctx.RenderComponent<TemplateParams<string>>(parameters => parameters .Add(p => p.Items, new[] { \"Foo\", \"Bar\", \"Baz\" }) .Add(p => p.Template, item => builder => { builder.OpenElement(1, \"div\"); builder.AddAttribute(2, \"class\", \"item\"); builder.OpenComponent<Item>(3); builder.AddAttribute(4, \"Value\", item); builder.CloseComponent(); builder.CloseElement(); }) ); These examples do the same thing, i.e. create a template which consist of a <div> element which wraps the <Item> component listed above. In both cases, must construct the RenderFragemnt<TValue> type manually. Here is what is going on: The first example passes data to the Items parameter, and then it uses the Template<TValue> factory method in ComponentParameterFactory , which takes the name of the RenderFragment<TValue> template parameter and a RenderFragment<TValue> type as input. The second example uses the ComponentParameterBuilder<TComponent> 's Add method to first add the data to Items parameter and then a RenderFragment<TValue> type as input. <Fixture Test=\"f => {}\"> <ComponentUnderTest> <TemplateParams Items=@(new string[]{ \"Foo\", \"Bar\", \"Baz\" }) TItem=\"string\"> <Template> <div class=\"item\"> <Item Value=@context></Item> </div> </Template> </TemplateParams> </ComponentUnderTest> </Fixture> This is just regular Blazor RenderFragment<TValue> parameter passing, in this case, to the Template parameter. This is the same for both Fixture and SnapshotTest razor tests. Unmatched Parameters An unmatched parameter is a parameter passed to a component under test, which does not have an explicit [Parameter] parameter, but instead is captured by a [Parameter(CaptureUnmatchedValues = true)] parameter. In the follow examples, we will pass a unmatched parameter to the following component: public class UnmatchedParams : ComponentBase { [Parameter(CaptureUnmatchedValues = true)] public Dictionary<string, object> InputAttributes { get; set; } } C# test code Razor test code using var ctx = new TestContext(); // Using factory method var cut1 = ctx.RenderComponent<UnmatchedParams>( (\"some-unknown-param\", \"a value\") ); // Using parameter builder var cut2 = ctx.RenderComponent<UnmatchedParams>(parameters => parameters .AddUnmatched(\"some-unknown-param\", \"a value\") ); These examples do the same thing, i.e. pass in the parameter some-unknown-param with the value a value to the component under test. <Fixture Test=\"f => {}\"> <ComponentUnderTest> <UnmatchedParams some-unknown-param=\"a value\" /> </ComponentUnderTest> </Fixture> This is just regular Blazor parameter passing, which is the same for both Fixture and SnapshotTest razor tests. In this case, the parameter some-unknown-param with the value a value is passed to the component under test. Cascading Parameters and Cascading Values Cascading parameters are properties with the [CascadingParameter] attribute. There are two variants, named and unnamed cascading parameters. In Blazor, the <CascadingValue> component is used to provide values to cascading parameters, which we also do in Razor based tests. However, in C# based tests, we need to do it a little differently. The following examples will pass cascading values to the <CascadingParams> component listed below: @code { [CascadingParameter] public bool IsDarkTheme { get; set; } [CascadingParameter(Name = \"LoggedInUser\")] public string UserName { get; set; } [CascadingParameter(Name = \"LoggedInEmail\")] public string Email { get; set; } } Passing Unnamed Cascading Values To pass the unnamed IsDarkTheme cascading parameter to the <CascadingParams> component, do the following: C# test code Razor test code using var ctx = new TestContext(); var isDarkTheme = true; // Using factory method var cut1 = ctx.RenderComponent<CascadingParams>( CascadingValue(isDarkTheme) ); // Using parameter builder var cut2 = ctx.RenderComponent<CascadingParams>(parameters => parameters .Add(isDarkTheme) ); // Using parameter builder and selecting unnamed cascading parameter var cut3 = ctx.RenderComponent<CascadingParams>(parameters => parameters .Add(p => p.IsDarkTheme, isDarkTheme) ); These examples do the same thing, i.e. pass in variable isDarkTheme to the cascading parameter IsDarkTheme . The first example uses the CascadingValue factory method in ComponentParameterFactory to pass the unnamed parameter value. The second example uses the Add method on the ComponentParameterBuilder<TComponent> to pass the unnamed parameter value. The last example uses the Add method on the ComponentParameterBuilder<TComponent> with the parameter selector to explicitly select the desired cascading parameter and pass the unnamed parameter value that way. <Fixture Test=\"f => {}\"> <ComponentUnderTest> <CascadingValue Value=\"true\"> @* isDarkMode *@ <CascadingParams /> </CascadingValue> </ComponentUnderTest> </Fixture> This is just regular Blazor cascading value parameter passing, which is the same for both Fixture and SnapshotTest razor tests. In this case, the <CascadingValue> component is used to pass the unnamed parameter value. Passing Named Cascading Values To pass a named cascading parameter to the <CascadingParams> component, do the following: C# test code Razor test code using var ctx = new TestContext(); // Using factory method var cut1 = ctx.RenderComponent<CascadingParams>( CascadingValue(\"LoggedInUser\", \"Egil Hansen\") ); // Using parameter builder var cut2 = ctx.RenderComponent<CascadingParams>(parameters => parameters .Add(p => p.UserName, \"Egil Hansen\") ); These examples do the same thing, i.e. pass in value Egil Hansen to the cascading parameter with the name LoggedInUser . Note that the name of the parameter is not the same as the property of the parameter, e.g. LoggedInUser vs. UserName . The first example uses the CascadingValue factory method in ComponentParameterFactory to pass the named parameter value, specifying the cascading parameters name and a value (not the property name). The second example uses the Add method on the ComponentParameterBuilder<TComponent> with the parameter selector to select the cascading parameter property and pass the parameter value that way. <Fixture Test=\"f => {}\"> <ComponentUnderTest> <CascadingValue Name=\"LoggedInUser\" Value=@(\"Egil Hansen\")> <CascadingParams /> </CascadingValue> </ComponentUnderTest> </Fixture> This is just regular Blazor cascading value parameter passing, which is the same for both Fixture and SnapshotTest razor tests. In this case, the <CascadingValue> component is used to pass a named parameter value, since both the Name and Value parameters are specified. Passing Multiple, Named and Unnamed, Cascading Values To pass all cascading parameter to the <CascadingParams> component, do the following: C# test code Razor test code using var ctx = new TestContext(); var isDarkTheme = true; // Using factory method var cut1 = ctx.RenderComponent<CascadingParams>( CascadingValue(isDarkTheme), CascadingValue(\"LoggedInUser\", \"Egil Hansen\"), CascadingValue(\"LoggedInEmail\", \"egil@example.com\") ); // Using parameter builder var cut2 = ctx.RenderComponent<CascadingParams>(parameters => parameters .Add(isDarkTheme) .Add(p => p.UserName, \"Egil Hansen\") .Add(p => p.Email, \"egil@example.com\") ); // Using parameter builder and selecting unnamed cascading parameter var cut3 = ctx.RenderComponent<CascadingParams>(parameters => parameters .Add(p => p.IsDarkTheme, isDarkTheme) .Add(p => p.UserName, \"Egil Hansen\") .Add(p => p.Email, \"egil@example.com\") ); These examples do the same thing, i.e. pass both the unnamed IsDarkTheme cascading parameter, and the two named cascading parameters ( LoggedInUser , LoggedInEmail ). The first example uses the CascadingValue factory method in ComponentParameterFactory to pass the unnamed and named parameter values. The second example uses the Add method on the ComponentParameterBuilder<TComponent> without a parameter to pass the unnamed parameter value, and Add method with the parameter selector to select each of the named parameters to pass the named parameter values. The last example uses the Add method on the ComponentParameterBuilder<TComponent> with the parameter selector to select both the named and unnamed cascading parameters and pass values to them that way. <Fixture Test=\"f => {}\"> <ComponentUnderTest> <CascadingValue Value=\"true\"> @* isDarkMode *@ <CascadingValue Name=\"LoggedInUser\" Value=@(\"Egil Hansen\")> <CascadingValue Name=\"LoggedInEmail\" Value=@(\"egil@example.com\")> <CascadingParams /> </CascadingValue> </CascadingValue> </CascadingValue> </ComponentUnderTest> </Fixture> This is just regular Blazor cascading value parameter passing, which is the same for both Fixture and SnapshotTest razor tests. In this case, multiple <CascadingValue> components is used to pass the unnamed and named cascading parameter values to the component. Render a Component Under Test Inside Other Components It is possible to nest a component under tests inside other components, if that is needed to test it. For example, to nest the <HelloWorld> component inside the <Wrapper> component, do the following: C# test code Razor test code using var ctx = new TestContext(); // Using C# factory methods var wrapper1 = ctx.RenderComponent<Wrapper>( ChildContent<HelloWorld>() ); var cut1 = wrapper1.FindComponent<HelloWorld>(); // Using parameter builder var wrapper2 = ctx.RenderComponent<Wrapper>(parameters => parameters .AddChildContent<HelloWorld>() ); var cut2 = wrapper2.FindComponent<HelloWorld>(); These examples do the same thing, i.e. rendering the <HelloWorld> component inside the <Wrapper> component. What is special in both cases is the use of the FindComponent<HelloWorld>() , which returns a IRenderedComponent<HelloWorld> , which gives access to only the <HelloWorld> components part of the render tree, and the <HelloWorld> components instance. <Fixture Test=\"HelloWorldTest\"> <ComponentUnderTest> <Wrapper> <HelloWorld /> </Wrapper> </ComponentUnderTest> @code { void HelloWorldTest(Fixture fixture) { var cut = fixture.GetComponentUnderTest<HelloWorld>(); } } </Fixture> This is just regular Blazor child content parameter passing, where one component is rendered inside another, i.e. the <HelloWorld> component inside the <Wrapper> component. The special thing in this case is that the GetComponentUnderTest<HelloWorld>() method specifies the <HelloWorld> component as its target instead of the outer <Wrapper> component. This returns a IRenderedComponent<HelloWorld> , which gives access to only the <HelloWorld> components part of the render tree, and the <HelloWorld> components instance. Further Reading Injecting Services into Components Under Test"
  },
  "docs/test-doubles/faking-auth.html": {
    "href": "docs/test-doubles/faking-auth.html",
    "title": "Faking Authentication and Authorization | bUnit",
    "keywords": "Faking Authentication and Authorization bUnit comes with test specific implementation of Blazor's authentication and authorization types that makes it easy to test components that use Blazor's <AuthorizeView> , <CascadingAuthenticationState> , and <AuthorizeRouteView> components, and the AuthenticationStateProvider type. The test implementation of Blazor's authentication and authorization can be put into the following states: Authenticating Unauthenticated and unauthorized Authenticated and unauthorized Authenticated and authorized Authenticated and authorized with one or more roles , claims , and/or policies bUnit's authentication and authorization implementation is easily available by calling AddTestAuthorization() on a test context's Services collection. It returns an instance of the TestAuthorizationContext type that allows you to control the authentication and authorization state for a test. The following sections will show how to set each of these states in a test. Setting Authenticating, Authenticated and Authorized States The examples in the following sections will use <UserInfo> component listed below. It uses an injected AuthenticationStateProvider , the <CascadingAuthenticationState> and <AuthorizeView> components to show the user name when a user is authenticated, and it shows the authorization state, when the authenticated user is authorized. @using Microsoft.AspNetCore.Components.Authorization @inject AuthenticationStateProvider AuthenticationStateProvider @if (isAuthenticated) { <h1>Welcome @userName</h1> } @if (!isAuthenticated) { <h1>Please log in!</h1> } <CascadingAuthenticationState> <AuthorizeView> <Authorized> <p>State: Authorized</p> </Authorized> <Authorizing> <p>State: Authorizing</p> </Authorizing> <NotAuthorized> <p>State: Not authorized</p> </NotAuthorized> </AuthorizeView> </CascadingAuthenticationState> @code { bool isAuthenticated = false; string userName; protected override async Task OnParametersSetAsync() { var state = await AuthenticationStateProvider.GetAuthenticationStateAsync(); isAuthenticated = state.User.Identity.IsAuthenticated; userName = state.User.Identity.Name; } } The following subsections will demonstrate how to set the <UserInfo> into all three authentication and authorization states. Unauthenticated and Unauthorized State To set the state to unauthenticated and unauthorized, do the following: // Arrange using var ctx = new TestContext(); ctx.Services.AddTestAuthorization(); // Act var cut = ctx.RenderComponent<UserInfo>(); // Assert cut.MarkupMatches(@\"<h1>Please log in!</h1> <p>State: Not authorized</p>\"); The highlighted line shows how AddTestAuthorization() is used to add the test specific implementation of Blazor's authentication and authorization types to the Services collection, which makes authentication state available to other services and components used throughout the test that requires it. After calling AddTestAuthorization() , the default authentication state is unauthenticated and unauthorized. Authenticating and Authorizing State To set the state to authenticating and authorizing, do the following: // Arrange using var ctx = new TestContext(); var authContext = ctx.Services.AddTestAuthorization(); authContext.SetAuthorizing(); // Act var cut = ctx.RenderComponent<UserInfo>(); // Assert cut.MarkupMatches(@\"<h1>Please log in!</h1> <p>State: Authorizing</p>\"); After calling AddTestAuthorization() , the returned TestAuthorizationContext is used to set the authenticating and authorizing state through the SetAuthorizing() method. Authenticated and Unauthorized State To set the state to authenticated and unauthorized, do the following: // Arrange using var ctx = new TestContext(); var authContext = ctx.Services.AddTestAuthorization(); authContext.SetAuthorized(\"TEST USER\", AuthorizationState.Unauthorized); // Act var cut = ctx.RenderComponent<UserInfo>(); // Assert cut.MarkupMatches(@\"<h1>Welcome TEST USER</h1> <p>State: Not authorized</p>\"); After calling AddTestAuthorization() , the returned TestAuthorizationContext is used to set the authenticated and unauthorized state through the SetAuthorized(String, AuthorizationState) method. Authenticated and Authorized state To set the state to authenticated and authorized, do the following: // Arrange using var ctx = new TestContext(); var authContext = ctx.Services.AddTestAuthorization(); authContext.SetAuthorized(\"TEST USER\"); // Act var cut = ctx.RenderComponent<UserInfo>(); // Assert cut.MarkupMatches(@\"<h1>Welcome TEST USER</h1> <p>State: Authorized</p>\"); After calling AddTestAuthorization() , the returned TestAuthorizationContext is used to set the authenticated and authorized state through the SetAuthorized(String, AuthorizationState) method. Note, the second parameter, AuthorizationState , is optional, and defaults to AuthorizationState.Authorized , if not specified. Setting Authorization Details The following section will show how to specify roles and/or policies in a test. The examples will use the <UserRights> component listed below. It the <AuthorizeView> components to include different content based on the roles , claims , or policies specified in each test. @using Microsoft.AspNetCore.Components.Authorization @using System.Security.Claims @using System.Globalization <CascadingAuthenticationState> <AuthorizeView> <h1>Hi @context.User.Identity.Name, you have these claims and rights:</h1> </AuthorizeView> <ul> <AuthorizeView> @foreach (var claim in @context.User.FindAll(x => x.Type != ClaimTypes.Name)) { <li>@GetClaimName(claim): @claim.Value</li> } </AuthorizeView> <AuthorizeView Roles=\"superuser\"> <li>You have the role SUPER USER</li> </AuthorizeView> <AuthorizeView Roles=\"admin\"> <li>You have the role ADMIN</li> </AuthorizeView> <AuthorizeView Policy=\"content-editor\"> <li>You are a CONTENT EDITOR</li> </AuthorizeView> </ul> </CascadingAuthenticationState> @code { private static string GetClaimName(Claim claim) { var claimType = new Uri(claim.Type); var name = claimType.Segments.Last(); return CultureInfo.InvariantCulture.TextInfo.ToTitleCase(name); } } Roles To specify one or more roles for the authenticated and authorized user, do the following: // Arrange using var ctx = new TestContext(); var authContext = ctx.Services.AddTestAuthorization(); authContext.SetAuthorized(\"TEST USER\"); authContext.SetRoles(\"superuser\"); // Act var cut = ctx.RenderComponent<UserRights>(); // Assert cut.MarkupMatches(@\"<h1>Hi TEST USER, you have these claims and rights:</h1> <ul> <li>You have the role SUPER USER</li> </ul>\"); The highlighted line shows how the SetRoles(String[]) method is used to specify one role. To specify multiple roles, do the following: // Arrange using var ctx = new TestContext(); var authContext = ctx.Services.AddTestAuthorization(); authContext.SetAuthorized(\"TEST USER\"); authContext.SetRoles(\"admin\", \"superuser\"); // Act var cut = ctx.RenderComponent<UserRights>(); // Assert cut.MarkupMatches(@\"<h1>Hi TEST USER, you have these claims and rights:</h1> <ul> <li>You have the role SUPER USER</li> <li>You have the role ADMIN</li> </ul>\"); Policies To specify one or more policies for the authenticated and authorized user, do the following: // Arrange using var ctx = new TestContext(); var authContext = ctx.Services.AddTestAuthorization(); authContext.SetAuthorized(\"TEST USER\"); authContext.SetPolicies(\"content-editor\"); // Act var cut = ctx.RenderComponent<UserRights>(); // Assert cut.MarkupMatches(@\"<h1>Hi TEST USER, you have these claims and rights:</h1> <ul> <li>You are a CONTENT EDITOR</li> </ul>\"); The highlighted line shows how the SetPolicies(String[]) method is used to specify one policy. To specify multiple policies, do the following: authContext.SetPolicies(\"content-editor\", \"approver\"); Claims To specify one or more claims for the authenticated and authorized user, do the following: // Arrange using var ctx = new TestContext(); var authContext = ctx.Services.AddTestAuthorization(); authContext.SetAuthorized(\"TEST USER\"); authContext.SetClaims( new Claim(ClaimTypes.Email, \"test@example.com\"), new Claim(ClaimTypes.DateOfBirth, \"01-01-1970\") ); // Act var cut = ctx.RenderComponent<UserRights>(); // Assert cut.MarkupMatches(@\"<h1>Hi TEST USER, you have these claims and rights:</h1> <ul> <li>Emailaddress: test@example.com</li> <li>Dateofbirth: 01-01-1970</li> </ul>\"); The highlighted line shows how the SetClaims(Claim[]) method is used to pass two instances of the Claim types. Example of passing both roles, claims, and policies The following example specifies two roles, one claim, and one policy for the authenticated and authorized user: // Arrange using var ctx = new TestContext(); var authContext = ctx.Services.AddTestAuthorization(); authContext.SetAuthorized(\"TEST USER\"); authContext.SetRoles(\"admin\", \"superuser\"); authContext.SetPolicies(\"content-editor\"); authContext.SetClaims(new Claim(ClaimTypes.Email, \"test@example.com\")); // Act var cut = ctx.RenderComponent<UserRights>(); // Assert cut.MarkupMatches(@\"<h1>Hi TEST USER, you have these claims and rights:</h1> <ul> <li>Emailaddress: test@example.com</li> <li>You have the role SUPER USER</li> <li>You have the role ADMIN</li> <li>You are a CONTENT EDITOR</li> </ul>\");"
  },
  "docs/test-doubles/index.html": {
    "href": "docs/test-doubles/index.html",
    "title": "Mocking and Faking Component Dependencies | bUnit",
    "keywords": "Mocking Component Dependencies intro Mention Moq, JustMock, say nothing special required. Read more points to specific mocking guides for Blazor."
  },
  "docs/test-doubles/mocking-httpclient.html": {
    "href": "docs/test-doubles/mocking-httpclient.html",
    "title": "Mocking HttpClient | bUnit",
    "keywords": "Mocking HttpClient TODO - https://github.com/egil/bunit/issues/61"
  },
  "docs/test-doubles/mocking-ijsruntime.html": {
    "href": "docs/test-doubles/mocking-ijsruntime.html",
    "title": "Mocking Blazor's IJSRuntime | bUnit",
    "keywords": "Mocking Blazor's IJSRuntime It is common for Blazor components to use IJSRuntime to call JavaScript, and since bUnit does not run JavaScript, mocking IJSRuntime is needed for components that uses it. In that regard, IJSRuntime is no different than other services that a component might depend on. bUnit comes with a tailor built mock of IJSRuntime , that allows you to specify how JavaScript interop calls should be handled, what values they should return, and to verify that they have happened. If you have more complex mocking needs, or you prefer to use the same mocking framework for all mocking in your tests to keep things consistent, general purpose mocking frameworks like Moq , JustMock Lite , or NSubstitute all works nicely with bUnit. The following sections shows how to use the built-in mock of IJSRuntime . Registering the mock IJSRuntime A mock of IJSRuntime must be added to the Services collection, just like other services that a component under test requires. This is done like so: using var ctx = new TestContext(); var mockJS = ctx.Services.AddMockJSRuntime(); Calling AddMockJSRuntime() returns a MockJSRuntimeInvokeHandler , which is used to set up expected calls and verify invocations. Strict vs loose mode The AddMockJSRuntime() method takes an optional JSRuntimeMockMode parameter as input, which defaults to Loose , if not provided. Loose mode configures the mock to just return the default value when it receives an invocation that has not been explicitly set up, e.g. if a component calls InvokeAsync<int>(...) the mock will simply return default(int) back to it immediately. Strict mode configures the mock to throw an exception if it is invoked with a method call it has not been set up to handle explicitly. This is useful if you want to ensure that a component only performs a specific set of IJSRuntime invocations. To set the mock to strict mode, do the following: using var ctx = new TestContext(); var mockJS = ctx.Services.AddMockJSRuntime(JSRuntimeMockMode.Strict); Setting up invocations Use the Setup<TResult>(...) and SetupVoid(...) methods to configure the mock to handle calls from the matching InvokeAsync<TResult>(...) and InvokeVoidAsync(...) methods on IJSRuntime . When an invocation is set up through the Setup<TResult>(...) and SetupVoid(...) methods, a JSRuntimePlannedInvocation<TResult> object is returned. This can be used to set a result or an exception, to emulate what can happen during a JavaScript interop call in Blazor. Here are two examples: using var ctx = new TestContext(); var mockJS = ctx.Services.AddMockJSRuntime(); // Set up an invocation and specify the result value immidiately mockJS.Setup<string>(\"getPageTitle\").SetResult(\"bUnit is awesome\"); // Set up an invocation without specifying the result var plannedInvocation = mockJS.SetupVoid(\"startAnimation\"); // ... other test code // Later in the test, mark the invocation as completed. // SetResult() is not used in this case since InvokeVoidAsync // only completes or throws, it doesnt return a value. // Any calls to InvokeVoidAsync(...) up till this point will // have received an incompleted Task which the component // is likely awaiting until the call to SetCompleted() below. plannedInvocation.SetCompleted(); Verifying invocations All calls to the InvokeAsync<TResult>(...) and InvokeVoidAsync(...) methods on the mock are stored in its Invocations list, which can be inspected and asserted against. In addition to this, all planned invocations has their own Invocations list, which only contains their invocations. Invocations are represented by the JSRuntimeInvocation type, which has three properties of interest when verifying an invocation happened as expected: Identifier - the name of the function name/identifier passed to the invoke method. Arguments - a list of arguments passed to the invoke method. CancellationToken - the cancellation token passed to the invoke method (if any)."
  },
  "docs/test-doubles/mocking-localizer.html": {
    "href": "docs/test-doubles/mocking-localizer.html",
    "title": "Mocking Localization via IStringLocalizer | bUnit",
    "keywords": "Mocking Localization via IStringLocalizer"
  },
  "docs/test-doubles/mocking-navigation-manager.html": {
    "href": "docs/test-doubles/mocking-navigation-manager.html",
    "title": "Mocking Blazor's NavigationManager | bUnit",
    "keywords": "Mocking Blazor's NavigationManager"
  },
  "docs/verification/async-assertion.html": {
    "href": "docs/verification/async-assertion.html",
    "title": "Assertion of Asynchronous Changes | bUnit",
    "keywords": "Assertion of Asynchronous Changes A test can fail if a component performs asynchronous renders, e.g. because it was awaiting a task to complete before continuing its render life-cycle. For example, if a component is waiting for an async web service to return data to it in the OnInitializedAsync() life-cycle method, before rendering it to the render tree. This happens because tests execute in the test framework's synchronization context and the test renderer executes renders in its own synchronization context. bUnit comes with two methods that helps deal with this issue, the WaitForAssertion(Action, TimeSpan?) method covered on this page, and the WaitForState(Func<Boolean>, TimeSpan?) method covered on the Awaiting an Asynchronous State Change in a Component Under Test page. Waiting for Assertion to Pass Using WaitForAssertion The WaitForAssertion(Action, TimeSpan?) method can be used to block and wait in a test method, until the provided assert action does not throw an exception, or the timeout is reached (the default timeout is one second). Note The WaitForAssertion() method will try the assert action pass to it when the WaitForAssertion() method is called, and every time the component under test renders. Let us look at an example. Consider the following <AsyncData> component, who awaits an async TextService in its OnInitializedAsync() life-cycle method. When the service returns the data, the component will automatically re-render, to update its rendered markup. <p>@text</p> @code { string text = string.Empty; [Parameter] public Task<string> TextService { get; set; } protected override async Task OnInitializedAsync() { text = await TextService; } } To test the <AsyncData> component, do the following: // Arrange using var ctx = new TestContext(); var textService = new TaskCompletionSource<string>(); var cut = ctx.RenderComponent<AsyncData>(parameters => parameters .Add(p => p.TextService, textService.Task) ); // Act - set the awaited result from the text service textService.SetResult(\"Hello World\"); // Wait for assertion to pass cut.WaitForAssertion(() => cut.MarkupMatches(\"<p>Hello World</p>\")); This is what happens in the test: The test uses a TaskCompletionSource<string> to simulate an async web service. In the second highlighted line, the result is provided to the component through the textService . This causes the component to re-render. Finally, in the third highlighted line, the WaitForAssertion() method is used to block the test until the predicate assertion action runs without throwing an exception. Controlling Wait Timeout The timeout, which defaults to one second, can be controlled by passing a TimeSpan as the second argument to the WaitForAssertion() method, e.g.: cut.WaitForAssertion(() => cut.MarkupMatches(\"<p>Hello World</p>\"), TimeSpan.FromSeconds(2)); If the timeout is reached, a WaitForFailedException exception is thrown with the following error message: The assertion did not pass within the timeout period."
  },
  "docs/verification/index.html": {
    "href": "docs/verification/index.html",
    "title": "Verifying Output from a Component Under Test | bUnit",
    "keywords": "Verifying Output from a Component Under Test These section covers the different ways to verify the result of a test scenario: Verifying Markup from a Component : This covers the different ways bUnit enables verification and assertions against the rendered markup from a component. Verifying the State of a Component Under Test : This covers how to inspect instance of the component under test. Customizing the Semantic HTML Comparison : This covers how to customize the semantic HTML/markup comparer included in bUnit, for more stable tests. Assertion of Asynchronous Changes : This covers how to create stable tests in an asynchronous world."
  },
  "docs/verification/semantic-html-comparison.html": {
    "href": "docs/verification/semantic-html-comparison.html",
    "title": "Customizing the Semantic HTML Comparison | bUnit",
    "keywords": "Customizing the Semantic HTML Comparison This library includes comparison and assert helpers that uses the AngleSharp Diffing library to perform semantic HTML comparison. On this page we will go through how the comparison works, and what options you have to affect the comparison process. Note The semantic HTML comparison is available in both C# and Razor tests with the Fixture component, and is always used in Razor tests with the SnapshotTest component. Why semantic comparison is needed for stable tests Just performing string comparison of two strings containing HTML markup can break quite easily, even if the two markup strings are semantically equivalent. Some changes that can cause a regular string comparison to fail are: Formatting of markup, e.g. with extra line breaks or indentions, changes to insignificant whitespace. Reordering of attributes. The order of attributes does not matter. Reordering of classes defined in the class=\"...\" attribute. The order of classes does not matter. Change of boolean attribute to be implicit or explicit, e.g. from required=\"required\" to required . Change to insignificant whitespace inside <style> tags. Changes to HTML comments and comments inside <style> tags. The AngleSharp Diffing library handles all those cases, so your tests are more stable. Customizing Options The AngleSharp Diffing library also allows us to customize the comparison process, by added special attributes to the \"control\" markup , i.e. the expected markup we want to use in verification. There are the customization options you have available to you: Ignore comments (enabled by default): Comments in markup and inside <style> tags are automatically ignored and not part of the comparison process. Ignore element: Use the diff:ignore attribute to ignore an element, all it's attributes and child nodes. For example, to ignore the h1 element: <header> <h1 class=\"heading-1\" diff:ignore>Hello world</h1> </header> Ignore attribute: To ignore an attribute during comparison, add the :ignore modifier to the attribute (no value is needed). For example, to ignore the class attribute: <header> <h1 class:ignore=\"heading-1\">Hello world</h1> </header> Configure whitespace handling: By default all nodes and elements are compared using the Normalize whitespace handling option. The Normalize option will trim all text nodes and replace two or more whitespace characters with a single space character. The other options are Preserve , which will leave all whitespace unchanged, and RemoveWhitespaceNodes , which will only remove empty text nodes. To override the default option, use the diff:whitespace attribute, and pass one of the three options to it, for example: <header> <h1 diff:whitespace=\"preserve\">Hello <em> woooorld</em></h1> </header> Note The default for <pre> and <script> elements is the Preserve option. To change that, use the diff:whitespace attribute, for example: <pre diff:whitespace=\"RemoveWhitespaceNodes\">...</pre> Perform case insensitive comparison: By default, all text comparison is case sensitive, but if you want to perform a case insensitive comparison of text inside elements or attributes, use the diff:ignoreCase attributes on elements and :ignoreCase modifier on attributes. For example, to do case insensitive comparison of the text in the h1 element: <h1 diff:ignoreCase>HellO WoRlD</h1> To do case insensitive comparison of the text inside the title attribute: <h1 title:ignoreCase=\"HeaDinG\">...</h1> Use RegEx during comparison: To use a regular expression when comparing the text inside an element or inside an attribute, use the diff:regex on elements and :regex modifier on attributes. For example, to use a regular expression during comparison of the text in the h1 element, add the diff:regex attribute to the element and place the regular expression in the body of the element: <h1 diff:regex diff:ignoreCase>Hello World \\d{4}</h1> To use a regular expression during comparison of the text inside the title attribute, add the :regex modifier to attribute and add the regular expression in the attributes value: <h1 title:regex=\"Heading-\\d{4}\">...</h1> Note The attribute modifiers :ignoreCase and :regex can be combined, for example as: attr:ignoreCase:regex=\"FOO-\\d{4}\" Examples To verify the rendered output of a component, we have the MarkupMatches() methods we can use. If for example we have a component, <Heading> , that renders the following markup: <h3 id=\"heading-1337\" required> Heading text <small class=\"text-muted mark\"> Secondary text </small> </h3> If we want to verify the markup is rendered correctly, and for example use RegEx to verify the id attribute (it might be generated) and ignore the <small> element, we can do it like this in C# based tests: // Arrange - renders the Heading component using var ctx = new TestContext(); var cut = ctx.RenderComponent<Heading>(); // Assert // Here we specify expected HTML from CUT. var expectedHtml = @\"<h3 id:regex=\"\"heading-\\d{4}\"\" required> Heading text <small diff:ignore></small> </h3>\"; // Here we use the HTML diffing library to assert that the rendered HTML // from CUT is semantically the same as the expected HTML string above. cut.MarkupMatches(expectedHtml); In a Razor based test, using the <Fixture> test type, the example looks like this: <Fixture Test=\"InitialHtmlIsCorrect\"> <ComponentUnderTest> <Heading /> </ComponentUnderTest> <Fragment> <h3 id:regex=\"heading-\\d{4}\" required> Heading text <small diff:ignore></small> </h3> </Fragment> @code { void InitialHtmlIsCorrect(Fixture fixture) { // Arrange - Gets the Heading component var cut = fixture.GetComponentUnderTest<Heading>(); // Assert // Here we get expected HTML from the Fragment element above. var expectedHtml = fixture.GetFragment(); // Here we use the HTML diffing library to assert that the rendered HTML // from CUT is semantically the same as the expected HTML string above. cut.MarkupMatches(expectedHtml); } } </Fixture> In a Razor based test, using the <SnapshotTest> test type, the example looks like this: <SnapshotTest> <TestInput> <Heading /> </TestInput> <ExpectedOutput> <h3 id:regex=\"heading-\\d{4}\" required> Heading text <small diff:ignore></small> </h3> </ExpectedOutput> </SnapshotTest>"
  },
  "docs/verification/verify-component-state.html": {
    "href": "docs/verification/verify-component-state.html",
    "title": "Verifying the State of a Component Under Test | bUnit",
    "keywords": "Verifying the State of a Component Calling RenderComponent<TComponent> () on a TestContext or calling GetComponentUnderTest<TComponent>() on a Fixture returns an instance of the IRenderedComponent<TComponent> type. The IRenderedComponent<TComponent> type makes it possible to inspect the instance of the component under test ( TComponent ), and trigger re-renders explicitly. Note Since IRenderedComponent<TComponent> inherits from IRenderedFragment , all the markup verification techniques covered on the Verifying Markup from a Component page also applies to the IRenderedComponent<TComponent> type. Inspecting the Component Under Test The Instance property on the IRenderedComponent<TComponent> type provides access to the component under test. For example: using var ctx = new TestContext(); IRenderedComponent<Alert> cut = ctx.RenderComponent<Alert>(); Alert alert = cut.Instance; // Assert against <Alert /> instance Warning While it is possible to set [Parameter] and [CascadingParameter] properties directly through the Instance property on the IRenderedComponent<TComponent> type, doing so does not implicitly trigger a render and the component life-cycle methods are not called. The correct approach is to set parameters through the SetParametersAndRender() methods. See the Triggering a Render Life Cycle on a Component page for more on this. Finding Components in the Render Tree To get the instance of components nested inside the component under test, use the FindComponent<TComponent>() and FindComponents<TComponent>() methods on the IRenderedComponent<TComponent> type. Suppose we have a <TodoList> component with <Task> components nested inside for each task in the todo list, then the <Task> components can be found like this: using var ctx = new TestContext(); var cut = ctx.RenderComponent<TodoList>(parameter => parameter .Add(p => p.Tasks, new [] { \"Task 1\", \"Task 2\" }) ); var tasks = cut.FindComponents<Task>(); Assert.Equal(2, tasks.Count); Both the FindComponent<TComponent>() and FindComponents<TComponent>() methods performs a depth-first search of the render tree, with the first method returning only the first found matching component, while latter returning all matching components in the render tree. Both the FindComponent<TComponent>() and FindComponents<TComponent>() methods performs a depth-first search of the render tree, with the first method returning only the first found matching component, while latter returning all matching components in the render tree."
  },
  "docs/verification/verify-markup.html": {
    "href": "docs/verification/verify-markup.html",
    "title": "Verifying Markup from a Component | bUnit",
    "keywords": "Verifying Markup from a Component When a component is rendered in a test, the result is a IRenderedFragment or a IRenderedComponent<TComponent> . Through these it is possible to access the rendered markup (HTML) of the component, and in the case of IRenderedComponent<TComponent> , the instance of the component. Note An IRenderedComponent<TComponent> inherits from IRenderedFragment . This page will only cover features of the IRenderedFragment type. IRenderedComponent<TComponent> is covered on the Verifying the State of a Component Under Test page. This page cover the following verification approaches: Basic verification of raw markup. Semantic comparison of markup. Inspecting the individual DOM nodes in the DOM tree. Finding expected differences in markup between renders. The following sections will cover each of these. Basic Verification of Raw Markup To access the rendered markup of a component, just use the Markup property on IRenderedFragment . It holds the raw HTML from the component as a string . Warning Be aware that all indentions and whitespace in your components ( .razor files) are included in the raw rendered markup, so it is often wise to normalize the markup string a little, e.g. via the string Trim() method, to make the tests more stable. Otherwise a change to the formatting in your components might break the tests when it does not need to. To avoid these issues and others related to asserting against raw markup, use the semantic HTML comparer that comes with bUnit, described in the next section. To get the markup as a string, do the following: using var ctx = new TestContext(); var cut = ctx.RenderComponent<HelloWorld>(); var renderedMarkup = cut.Markup; Assert.Equal(\"<h1>Hello world from Blazor</h1>\", renderedMarkup); You can perform standard string assertions against the markup string, e.g. like checking if it contains a value or is empty. Semantic Comparison of Markup Working with raw markup only works well with very simple output, and even then, you have to sanitize it to get stable tests. A much better approach is to use the semantic HTML comparer that comes with bUnit. How does the Semantic HTML Comparer Work? The comparer takes two HTML fragments (e.g. in the form of a C# string) as input, and returns true if both HTML fragments will result in the same visual rendered output in a web browser, otherwise it returns false . For example, a web browser will render this HTML: <span>Foo Bar</span> Exactly the same as this HTML: <span> Foo Bar </span> That is why it makes sense to allow tests to pass, even when the rendered HTML markup is not entirely identical to the expected HTML, from a normal string comparer's perspective. bUnit's semantic HTML comparer safely ignores things like insignificant whitespace and the order of attributes on elements, and many more things. This leads to much more stable tests, as e.g. a reformatted component doesn't break it's tests because of insignificant whitespace changes. The MarkupMatches() Method The HTML comparer can be easily accessed through MarkupMatches() extension methods, available in places that represents HTML fragments in bUnit, i.e. on IRenderedFragment and the INode and INodeList types. In the following examples, the <Heading> component listed below will be used as the component under test. <h3 id=\"heading-1337\" required> Heading text <small class=\"text-muted mark\"> Secondary text </small> </h3> To use the MarkupMatches() method to perform a semantic comparison of the output of the <Heading> component, through its IRenderedFragment , do the following: using var ctx = new TestContext(); var cut = ctx.RenderComponent<Heading>(); cut.MarkupMatches(@\"<h3 id=\"\"heading-1337\"\" required> Heading text <small class=\"\"mark text-muted\"\">Secondary text</small> </h3>\"); The highlighted line shows the call to the MarkupMatches() method. This test passes even though the insignificant whitespace is not exactly the same between the expected HTML string and the raw markup produced by the <Heading> component. It even works when the CSS class-list is not in the same order on the <small> element. The MarkupMatches() method is also available on INode and INodeList types, for example: using var ctx = new TestContext(); var cut = ctx.RenderComponent<Heading>(); var smallElm = cut.Find(\"small\"); smallElm.MarkupMatches(@\"<small class=\"\"mark text-muted\"\">Secondary text</small>\"); Here we use the Find(string cssSelector) method to find the <small> element, and only verify it and it's content and attributes. Tip Working with Find() , FindAll() , INode and INodeList is covered later on this page. Text content can also be verified with the MarkupMatches() method, e.g. the text inside the <small> element. It has the advantage over regular string comparison that it removes insignificant whitespace in the text automatically, even between words, where a normal string Trim() method isn't enough. For example: using var ctx = new TestContext(); var cut = ctx.RenderComponent<Heading>(); var smallElmText = cut.Find(\"small\").TextContent; smallElmText.MarkupMatches(\"Secondary text\"); The semantic HTML comparer can be customized to make a test case even more stable and easier to maintain. It is e.g. possible to ignore an element or attribute during comparison, or provide an regular expression to the comparer when comparing a specific element or attribute, to make the comparer work with generated data. Learn more about the customizations options on the Customizing the Semantic HTML Comparison page. Inspecting DOM Nodes The rendered markup from a component is available as a DOM nodes through the Nodes property on IRenderedFragment , as well as the Find(string cssSelector) and FindAll(string cssSelector) extension methods on IRenderedFragment . The Nodes property and the FindAll() method returns an AngleSharp INodeList type, and the Find() method returns an AngleSharp IElement type. The DOM API in AngleSharp follows the W3C DOM API specifications and gives you the same results as state of the art browsers implementation of the DOM API in JavaScript does. Besides the official DOM API, AngleSharp and bUnit adds some useful extension methods on top. This makes working with DOM nodes convenient. Finding Nodes with the Find() and FindAll() methods Users of the famous JavaScript framework jQuery will recognize the two methods Find(string cssSelector) and FindAll(string cssSelector) . Find(string cssSelector) takes a \"CSS selector\" as input and returns an IElement as output, or throws an exception if non is found. FindAll(string cssSelector) takes a \"CSS selector\" as input and returns a list of IElement elements. Let's see some examples of using the Find(string cssSelector) and FindAll(string cssSelector) methods to query the <FancyTable> component listed below. <table> <caption>Lorem lipsum captium</caption> <tbody> <tr> <td style=\"white-space:nowrap\">Foo</td> <td>Bar</td> </tr> <tr> <td style=\"white-space:nowrap\">Baz</td> <td>Boo</td> </tr> </tbody> </table> To find the <caption> element and the first <td> elements in each row, do the following: using var ctx = new TestContext(); var cut = ctx.RenderComponent<FancyTable>(); var tableCaption = cut.Find(\"caption\"); var tableCells = cut.FindAll(\"td:first-child\"); Once you have one or more elements, you verify against them by e.g. inspecting their properties through the DOM API. For example: Assert.Empty(tableCaption.Attributes); Assert.Equal(2, tableCells.Count); Assert.All(tableCells, td => td.HasAttribute(\"style\")); Auto-refreshing Find() Queries A element found with the Find(string cssSelector) method will be updated if the component it came from is re-rendered. However, that does not apply to elements that are found by traversing the DOM tree via e.g. the Nodes property on IRenderedFragment , as those nodes do not know when their root component is re-rendered, and thus, when they should be updated. Therefore, always prefer using the Find(string cssSelector) method when searching for a single element, or always reissue the query whenever you need the element. Auto-refreshable FindAll() Queries The FindAll(string cssSelector, bool enableAutoRefresh = false) method has an optional parameter, enableAutoRefresh , which, when set to true , will return an collection of IElement , that automatically refreshes itself when the component the elements came from is re-rendered. Finding Expected Differences It can sometimes be easier to verify that an expected change has happened in the rendered markup (and only that), than it can be to specify how all the rendered markup should look after re-render. bUnit comes with a number of ways for finding lists of IDiff , the representation of a difference between two HTML fragments. All of these are direct methods or extension methods on the IRenderedFragment type, or on the INode or INodeList types: GetChangesSinceFirstRender() method on IRenderedFragment . This method returns a list of differences since the initial first render of a component. GetChangesSinceSnapshot() and SaveSnapshot() methods on IRenderedFragment . These two methods combined makes it possible to get a list of differences between the last time the SaveSnapshot() method was called and a call to the GetChangesSinceSnapshot() method is placed. CompareTo() methods from CompareToExtensions for the IRenderedFragment , INode , and INodeList types. These methods returns a list of differences between the two input HTML fragments. In addition to this, there are a number of experimental assertion helpers for IDiff and IEnumerable<IDiff> , that makes it easier and more concise to declare your assertions. Let's look at a few examples. In the first we will use the <Counter> component listed below: <h1>Counter</h1> <p> Current count: @currentCount </p> <button class=\"btn btn-primary\" @onclick=\"IncrementCount\">Click me</button> @code { int currentCount = 0; void IncrementCount() { currentCount++; } } Here is an example of using the GetChangesSinceFirstRender() method: using var ctx = new TestContext(); var cut = ctx.RenderComponent<Counter>(); // Act - increment the counter cut.Find(\"button\").Click(); // Assert - find differences between first render and click var diffs = cut.GetChangesSinceFirstRender(); // Only expect there to be one change var diff = diffs.ShouldHaveSingleChange(); // and that change should be a text // change to \"Current count: 1\" diff.ShouldBeTextChange(\"Current count: 1\"); This is what happens in the test: On line 8, GetChangesSinceFirstRender() is used to get a list of differences. On line 11, the ShouldHaveSingleChange() method is used to verify that there is only one change found. On line 14, the ShouldBeTextChange() method is used to verify that the single IDiff is a text change. Testing a more complex life cycle of a component can be more easily done using the GetChangesSinceSnapshot() and SaveSnapshot() methods, along with a host of other assert helpers. This example tests the <CheckList> component listed below. The component allow you to add new items to the check list by typing into the input field and hitting the enter key, and items can be removed again from the list by clicking on them. <input type=\"text\" placeholder=\"Add new item\" @bind=\"newItemValue\" @onkeyup=\"OnTextInput\" /> <ul> @foreach (var item in items) { <li @onclick=\"() => items.Remove(item)\">@item</li> } </ul> @code { private string newItemValue = string.Empty; private List<string> items = new List<string>(); private void OnTextInput(KeyboardEventArgs args) { if(args.Key == \"Enter\") { items.Add(newItemValue); newItemValue = string.Empty; } } } To test the end-to-end life cycle of adding and removing items from the <CheckList> component, do the following: // Arrange using var ctx = new TestContext(); var cut = ctx.RenderComponent<CheckList>(); var inputField = cut.Find(\"input\"); // Add first item inputField.Change(\"First item\"); inputField.KeyUp(key: \"Enter\"); // Assert that first item was added correctly var diffs = cut.GetChangesSinceFirstRender(); diffs.ShouldHaveSingleChange() .ShouldBeAddition(\"<li>First item</li>\"); // Save snapshot of current DOM nodes cut.SaveSnapshot(); // Add a second item inputField.Change(\"Second item\"); inputField.KeyUp(key: \"Enter\"); // Assert that both first and second item was added // since the first render diffs = cut.GetChangesSinceFirstRender(); diffs.ShouldHaveChanges( diff => diff.ShouldBeAddition(\"<li>First item</li>\"), diff => diff.ShouldBeAddition(\"<li>Second item</li>\") ); // Assert that only the second item was added // since the call to SaveSnapshot() diffs = cut.GetChangesSinceSnapshot(); diffs.ShouldHaveSingleChange() .ShouldBeAddition(\"<li>Second item</li>\"); // Save snapshot again of current DOM nodes cut.SaveSnapshot(); // Click last item to remove it from list cut.Find(\"li:last-child\").Click(); // Assert that the second item was removed // since the call to SaveSnapshot() diffs = cut.GetChangesSinceSnapshot(); diffs.ShouldHaveSingleChange() .ShouldBeRemoval(\"<li>Second item</li>\"); This is what happens in the test: First the component is rendered and the input field is found. The the first item is added through the input field. The GetChangesSinceFirstRender() , ShouldHaveSingleChange() and ShouldBeAddition() methods are used to verify that the item was correctly added. The SaveSnapshot() is used to save a snapshot of current DOM nodes internally in the cut . This reduces the number of diffs found in the following steps, simplifying verification. A second item is added to the check list. Two verifications is performed at this point, one using the GetChangesSinceFirstRender() method which finds two changes, and one using the GetChangesSinceSnapshot() method, that finds a single change. The first is only done for illustrative purposes. A new snapshot is saved, replacing the previous one, with a another call to the SaveSnapshot() method. Finally the last item in the list is found and clicked, and the GetChangesSinceSnapshot() method is used to find the changes, a single diff, which is verified as a removal of the second item. As mentioned earlier, the IDiff assertion helpers are still experimental. Any feedback and suggestions for improvements should be directed to the related issue on GitHub."
  },
  "index.html": {
    "href": "index.html",
    "title": "bUnit - a testing library for Blazor components | bUnit",
    "keywords": "bUnit - a testing library for Blazor components bUnit is a testing library for Blazor Components. Its goal is to make it easy to write comprehensive, stable unit tests . You can: Setup and define components under tests using C# or Razor syntax Verify outcome using semantic HTML comparer Interact with and inspect components, trigger event handlers Pass parameters, cascading values and inject services into components under test Mock IJsRuntime and Blazors authentication and authorization Perform snapshot testing bUnit builds on top of existing unit testing frameworks such as xUnit, NUnit, and MSTest, which runs the Blazor components tests, just as any normal unit test. Go to the Documentation pages to learn more. Test example For example, to test the <Counter> component listed below: <h1>Counter</h1> <p> Current count: @currentCount </p> <button class=\"btn btn-primary\" @onclick=\"IncrementCount\">Click me</button> @code { int currentCount = 0; void IncrementCount() { currentCount++; } } You can do the following, using bUnit and xUnit: [Fact] public void CounterShouldIncrementWhenClicked() { // Arrange: render the Counter.razor component using var ctx = new TestContext(); var cut = ctx.RenderComponent<Counter>(); // Act: find and click the <button> element to increment // the counter in the <p> element cut.Find(\"button\").Click(); // Assert: first find the <p> element, then verify its content cut.Find(\"p\").MarkupMatches(\"<p>Current count: 1</p>\"); } NuGet downloads bUnit is available on NuGet in various incarnations. If you are using xUnit as your general purpose testing framework, you can use bunit , which includes everything in one package. If you want to use NUnit or MStest, then pick bunit.core and bunit.web : Name Type NuGet Download Link bUnit Library, includes core, web, and xUnit support bUnit.core Library, only core bUnit.web Library, web and core bUnit.xUnit Library, xUnit and core bUnit.template Template, which currently creates an xUnit based bUnit test projects only Sponsors A hugh thank you to the sponsors of my work with bUnit . The higher tire sponsors are: Hassan Rezk Habib (@hassanhabib) Milestones to v1.0.0 These are the current goals that should be reached before v1.0.0 is ready: Stabilize the APIs , such that they work equally well with both xUnit, NUnit, and MSTest as the underlying test framework. The general goals is to make it easy and obvious for developers to create the tests they needed, and fall into the pit of success. Get the Razor-based testing to stable , e.g. make the discovery and running of tests defined in .razor files stable and efficient. This includes adding support for NUnit and MSTest as test runners. Join the .NET Foundation. . This project is too large for one person to be the owner and be the sole maintainer of, so the plan is to apply for membership as soon as possible, most likely close to or after v1.0.0 ships, and get the needed support and guidance to ensure the project long term. In the post v1.0.0 to v1.0.x time frame, focus will be on improving performance. Especially the spin-up time of about one second would be nice to get reduced. Contributors Shout outs and a big thank you to all the contributors to the library, both those that raise issues, provide input to issues, and those who send pull requests. Want to help out? You can help in a number of ways: Provide feedback and input through issues , Twitter or bUnit Gitter chat room . Help build the library, just pick an issue and submit pull-requests. Help write documentation. Create blog posts, presentations or video tutorials. If you do, I will be happy to showcase them in the related section on this site."
  }
}